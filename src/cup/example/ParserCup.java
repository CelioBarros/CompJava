
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 02 16:52:40 BRST 2015
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import type.*;
import symtab.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 02 16:52:40 BRST 2015
  */
public class ParserCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCup() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\354\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\004\003\000\002\004\002\000\002\005\005" +
    "\000\002\132\003\000\002\132\005\000\002\006\003\000" +
    "\002\006\002\000\002\007\003\000\002\007\004\000\002" +
    "\010\005\000\002\010\007\000\002\011\003\000\002\011" +
    "\002\000\002\012\003\000\002\012\004\000\002\013\003" +
    "\000\002\013\003\000\002\133\002\000\002\014\011\000" +
    "\002\131\003\000\002\131\002\000\002\015\003\000\002" +
    "\015\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\020\004\000\002\017\003\000\002" +
    "\017\002\000\002\022\004\000\002\021\003\000\002\021" +
    "\002\000\002\023\003\000\002\023\005\000\002\024\005" +
    "\000\002\026\003\000\002\026\002\000\002\027\003\000" +
    "\002\027\004\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\030\004\000\002\031\005\000\002\032" +
    "\003\000\002\032\002\000\002\033\003\000\002\033\004" +
    "\000\002\034\003\000\002\034\004\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\007\000\002\034\003\000\002\034\005\000\002\034\005" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\134\002\000\002\050\005\000\002\135\002\000\002" +
    "\050\006\000\002\051\004\000\002\051\005\000\002\052" +
    "\004\000\002\052\005\000\002\035\006\000\002\130\004" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\045" +
    "\003\000\002\045\002\000\002\046\003\000\002\046\004" +
    "\000\002\047\004\000\002\044\003\000\002\044\005\000" +
    "\002\036\005\000\002\037\004\000\002\037\002\000\002" +
    "\040\003\000\002\040\003\000\002\042\006\000\002\042" +
    "\005\000\002\042\004\000\002\041\003\000\002\041\005" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\005\000\002\053\006\000\002\053\006\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\075\005\000\002\075\005\000\002\054\004\000\002\054" +
    "\004\000\002\054\004\000\002\054\004\000\002\054\004" +
    "\000\002\054\005\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\056" +
    "\005\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\060\004\000\002\060\005\000\002\060\007\000\002" +
    "\060\003\000\002\060\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\004\000\002\061\003\000" +
    "\002\062\005\000\002\062\005\000\002\063\004\000\002" +
    "\063\005\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\065\006\000\002\066\004" +
    "\000\002\067\006\000\002\067\005\000\002\067\005\000" +
    "\002\115\003\000\002\115\002\000\002\070\003\000\002" +
    "\070\005\000\002\071\005\000\002\071\002\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003\000\002" +
    "\076\010\000\002\077\004\000\002\077\002\000\002\100" +
    "\011\000\002\101\007\000\002\104\013\000\002\105\003" +
    "\000\002\105\004\000\002\105\003\000\002\106\003\000" +
    "\002\106\002\000\002\107\005\000\002\110\003\000\002" +
    "\110\010\000\002\111\004\000\002\111\002\000\002\102" +
    "\005\000\002\103\011\000\002\112\003\000\002\112\002" +
    "\000\002\113\003\000\002\113\004\000\002\114\005\000" +
    "\002\114\004\000\002\114\003\000\002\116\003\000\002" +
    "\116\003\000\002\116\003\000\002\121\004\000\002\136" +
    "\002\000\002\126\011\000\002\125\002\000\002\125\003" +
    "\000\002\117\003\000\002\117\005\000\002\127\004\000" +
    "\002\120\003\000\002\120\003\000\002\122\010\000\002" +
    "\123\011\000\002\124\004\000\002\124\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\040\002\ufffd\005\006\010\ufffd\012\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\142\ufffd\001\002\000\036\002" +
    "\ufffe\010\ufffe\012\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe" +
    "\021\ufffe\022\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\142" +
    "\ufffe\001\002\000\036\002\ufff8\010\020\012\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\025\ufff8\026\ufff8\142\ufff8\001\002\000\004\143\013" +
    "\001\002\000\004\002\001\001\002\000\004\002\011\001" +
    "\002\000\004\002\000\001\002\000\006\004\015\006\014" +
    "\001\002\000\130\004\ufffb\006\ufffb\007\ufffb\011\ufffb\014" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\034\ufffb\035\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb" +
    "\102\ufffb\103\ufffb\113\ufffb\114\ufffb\126\ufffb\143\ufffb\001" +
    "\002\000\004\143\016\001\002\000\036\002\ufffc\010\ufffc" +
    "\012\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\142\ufffc\001\002" +
    "\000\130\004\ufffa\006\ufffa\007\ufffa\011\ufffa\014\ufffa\027" +
    "\ufffa\030\ufffa\031\ufffa\032\ufffa\034\ufffa\035\ufffa\037\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046" +
    "\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa" +
    "\055\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa\070" +
    "\ufffa\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\102\ufffa" +
    "\103\ufffa\113\ufffa\114\ufffa\126\ufffa\143\ufffa\001\002\000" +
    "\034\002\ufff2\012\uffea\015\036\016\041\017\033\020\040" +
    "\021\047\022\045\023\034\024\050\025\043\026\037\142" +
    "\uffea\001\002\000\004\143\013\001\002\000\036\002\ufff9" +
    "\010\020\012\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\142\ufff9" +
    "\001\002\000\036\002\ufff7\010\ufff7\012\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\142\ufff7\001\002\000\036\002\ufff6\010" +
    "\ufff6\012\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\142\ufff6\001" +
    "\002\000\006\004\026\006\025\001\002\000\006\011\027" +
    "\143\016\001\002\000\036\002\ufff5\010\ufff5\012\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\025\ufff5\026\ufff5\142\ufff5\001\002\000\004\004" +
    "\030\001\002\000\036\002\ufff4\010\ufff4\012\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024" +
    "\ufff4\025\ufff4\026\ufff4\142\ufff4\001\002\000\054\012\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\104\uffe9\105\uffe9\106\uffe9" +
    "\107\uffe9\110\uffe9\111\uffe9\112\uffe9\142\uffe9\143\uffe9\147" +
    "\uffe9\001\002\000\054\012\uffeb\015\036\016\041\017\033" +
    "\020\040\021\047\022\045\023\034\024\050\025\043\026" +
    "\037\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb" +
    "\112\uffeb\142\uffeb\143\uffeb\147\uffeb\001\002\000\054\012" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\104\uffe5\105\uffe5\106" +
    "\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\142\uffe5\143\uffe5" +
    "\147\uffe5\001\002\000\054\012\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\104\uffe1\105\uffe1\106\uffe1\107\uffe1\110\uffe1\111" +
    "\uffe1\112\uffe1\142\uffe1\143\uffe1\147\uffe1\001\002\000\034" +
    "\002\uffef\012\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\142\uffef" +
    "\001\002\000\054\012\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\112" +
    "\uffe7\142\uffe7\143\uffe7\147\uffe7\001\002\000\054\012\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\104\uffde\105\uffde\106\uffde" +
    "\107\uffde\110\uffde\111\uffde\112\uffde\142\uffde\143\uffde\147" +
    "\uffde\001\002\000\054\012\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4" +
    "\112\uffe4\142\uffe4\143\uffe4\147\uffe4\001\002\000\054\012" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\104\uffe6\105\uffe6\106" +
    "\uffe6\107\uffe6\110\uffe6\111\uffe6\112\uffe6\142\uffe6\143\uffe6" +
    "\147\uffe6\001\002\000\004\002\uffff\001\002\000\054\012" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\104\uffdf\105\uffdf\106" +
    "\uffdf\107\uffdf\110\uffdf\111\uffdf\112\uffdf\142\uffdf\143\uffdf" +
    "\147\uffdf\001\002\000\034\002\ufff1\012\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\142\ufff1\001\002\000\054\012\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\104\uffe2\105\uffe2\106\uffe2\107" +
    "\uffe2\110\uffe2\111\uffe2\112\uffe2\142\uffe2\143\uffe2\147\uffe2" +
    "\001\002\000\006\012\055\142\054\001\002\000\054\012" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\026\uffe3\104\uffe3\105\uffe3\106" +
    "\uffe3\107\uffe3\110\uffe3\111\uffe3\112\uffe3\142\uffe3\143\uffe3" +
    "\147\uffe3\001\002\000\054\012\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\104\uffe0\105\uffe0\106\uffe0\107\uffe0\110\uffe0\111" +
    "\uffe0\112\uffe0\142\uffe0\143\uffe0\147\uffe0\001\002\000\034" +
    "\002\uffee\012\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\142\uffee" +
    "\001\002\000\034\002\ufff3\012\uffea\015\036\016\041\017" +
    "\033\020\040\021\047\022\045\023\034\024\050\025\043" +
    "\026\037\142\uffea\001\002\000\034\002\ufff0\012\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\142\ufff0\001\002\000\004\143" +
    "\u0168\001\002\000\004\143\056\001\002\000\010\013\uffed" +
    "\014\uffed\027\uffed\001\002\000\010\013\061\014\uffdb\027" +
    "\uffdb\001\002\000\006\014\065\027\uffd8\001\002\000\004" +
    "\143\013\001\002\000\006\014\uffdc\027\uffdc\001\002\000" +
    "\010\006\014\014\uffdd\027\uffdd\001\002\000\004\027\074" +
    "\001\002\000\004\143\013\001\002\000\004\027\uffd9\001" +
    "\002\000\006\007\071\027\uffda\001\002\000\010\006\014" +
    "\007\uffd7\027\uffd7\001\002\000\004\143\013\001\002\000" +
    "\010\006\014\007\uffd6\027\uffd6\001\002\000\034\002\uffec" +
    "\012\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\024\uffec\025\uffec\026\uffec\142\uffec\001\002" +
    "\000\054\004\077\015\036\016\041\017\033\020\103\021" +
    "\047\022\045\023\034\024\050\025\043\026\037\030\uffd3" +
    "\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112" +
    "\uffea\143\uffea\147\uffea\001\002\000\054\004\uff25\015\uff25" +
    "\016\uff25\017\uff25\020\uff25\021\uff25\022\uff25\023\uff25\024" +
    "\uff25\025\uff25\026\uff25\030\uff25\104\uff25\105\uff25\106\uff25" +
    "\107\uff25\110\uff25\111\uff25\112\uff25\143\uff25\147\uff25\001" +
    "\002\000\054\004\uff26\015\uff26\016\uff26\017\uff26\020\uff26" +
    "\021\uff26\022\uff26\023\uff26\024\uff26\025\uff26\026\uff26\030" +
    "\uff26\104\uff26\105\uff26\106\uff26\107\uff26\110\uff26\111\uff26" +
    "\112\uff26\143\uff26\147\uff26\001\002\000\054\004\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\030\uffce\104\uffce\105\uffce\106" +
    "\uffce\107\uffce\110\uffce\111\uffce\112\uffce\143\uffce\147\uffce" +
    "\001\002\000\054\004\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\030\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0\111" +
    "\uffd0\112\uffd0\143\uffd0\147\uffd0\001\002\000\010\004\uffa3" +
    "\027\uffa3\031\137\001\002\000\054\004\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\030\uffcf\104\uffcf\105\uffcf\106\uffcf\107" +
    "\uffcf\110\uffcf\111\uffcf\112\uffcf\143\uffcf\147\uffcf\001\002" +
    "\000\052\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\145\104\uffe4" +
    "\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\112\uffe4\143" +
    "\uffe4\147\uffe4\001\002\000\054\004\uff24\015\uff24\016\uff24" +
    "\017\uff24\020\uff24\021\uff24\022\uff24\023\uff24\024\uff24\025" +
    "\uff24\026\uff24\030\uff24\104\uff24\105\uff24\106\uff24\107\uff24" +
    "\110\uff24\111\uff24\112\uff24\143\uff24\147\uff24\001\002\000" +
    "\054\004\077\015\036\016\041\017\033\020\103\021\047" +
    "\022\045\023\034\024\050\025\043\026\037\030\uffd4\104" +
    "\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea" +
    "\143\uffea\147\uffea\001\002\000\004\030\u0160\001\002\000" +
    "\054\004\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\104" +
    "\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\112\uffd2" +
    "\143\uffd2\147\uffd2\001\002\000\024\104\121\105\124\106" +
    "\122\107\112\110\123\111\113\112\115\143\120\147\114" +
    "\001\002\000\012\006\014\031\uffa5\070\uffa5\143\uffa5\001" +
    "\002\000\124\004\uffa9\006\uffa9\007\uffa9\011\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\034\uffa9\035\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\063" +
    "\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\074\uffa9" +
    "\075\uffa9\076\uffa9\077\uffa9\100\uffa9\102\uffa9\103\uffa9\113" +
    "\uffa9\114\uffa9\126\uffa9\143\uffa9\001\002\000\124\004\uffa7" +
    "\006\uffa7\007\uffa7\011\uffa7\030\uffa7\031\uffa7\032\uffa7\034" +
    "\uffa7\035\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\063\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\067\uffa7\070\uffa7\074\uffa7\075\uffa7\076\uffa7\077" +
    "\uffa7\100\uffa7\102\uffa7\103\uffa7\113\uffa7\114\uffa7\126\uffa7" +
    "\143\uffa7\001\002\000\124\004\uffad\006\uffad\007\uffad\011" +
    "\uffad\030\uffad\031\uffad\032\uffad\034\uffad\035\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046" +
    "\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad" +
    "\055\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070" +
    "\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad\102\uffad" +
    "\103\uffad\113\uffad\114\uffad\126\uffad\143\uffad\001\002\000" +
    "\124\004\uffa6\006\uffa6\007\uffa6\011\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\034\uffa6\035\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\063\uffa6\064" +
    "\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\074\uffa6\075\uffa6" +
    "\076\uffa6\077\uffa6\100\uffa6\102\uffa6\103\uffa6\113\uffa6\114" +
    "\uffa6\126\uffa6\143\uffa6\001\002\000\010\031\137\070\uffa3" +
    "\143\uffa3\001\002\000\004\143\u015a\001\002\000\012\006" +
    "\ufffb\031\ufffb\067\125\143\ufffb\001\002\000\124\004\uffac" +
    "\006\uffac\007\uffac\011\uffac\030\uffac\031\uffac\032\uffac\034" +
    "\uffac\035\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac" +
    "\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\055\uffac\063\uffac\064\uffac\065\uffac" +
    "\066\uffac\067\uffac\070\uffac\074\uffac\075\uffac\076\uffac\077" +
    "\uffac\100\uffac\102\uffac\103\uffac\113\uffac\114\uffac\126\uffac" +
    "\143\uffac\001\002\000\124\004\uffaa\006\uffaa\007\uffaa\011" +
    "\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa\035\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa" +
    "\055\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\100\uffaa\102\uffaa" +
    "\103\uffaa\113\uffaa\114\uffaa\126\uffaa\143\uffaa\001\002\000" +
    "\124\004\uffa8\006\uffa8\007\uffa8\011\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\034\uffa8\035\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\063\uffa8\064" +
    "\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\074\uffa8\075\uffa8" +
    "\076\uffa8\077\uffa8\100\uffa8\102\uffa8\103\uffa8\113\uffa8\114" +
    "\uffa8\126\uffa8\143\uffa8\001\002\000\124\004\uffab\006\uffab" +
    "\007\uffab\011\uffab\030\uffab\031\uffab\032\uffab\034\uffab\035" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\067\uffab\070\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100" +
    "\uffab\102\uffab\103\uffab\113\uffab\114\uffab\126\uffab\143\uffab" +
    "\001\002\000\026\070\uff20\104\121\105\124\106\122\107" +
    "\112\110\123\111\113\112\115\143\013\147\114\001\002" +
    "\000\004\070\143\001\002\000\004\143\134\001\002\000" +
    "\006\007\uff1e\070\uff1e\001\002\000\006\007\132\070\uff1f" +
    "\001\002\000\024\104\121\105\124\106\122\107\112\110" +
    "\123\111\113\112\115\143\013\147\114\001\002\000\006" +
    "\007\uff1d\070\uff1d\001\002\000\010\007\uffa3\031\137\070" +
    "\uffa3\001\002\000\006\007\uff2f\070\uff2f\001\002\000\130" +
    "\004\uffa2\006\uffa2\007\uffa2\011\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\037\uffa2\040\uffa2" +
    "\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2" +
    "\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\074" +
    "\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\102\uffa2\103\uffa2" +
    "\113\uffa2\114\uffa2\126\uffa2\143\uffa2\001\002\000\004\032" +
    "\142\001\002\000\130\004\uffa4\006\uffa4\007\uffa4\011\uffa4" +
    "\027\uffa4\030\uffa4\031\137\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4" +
    "\067\uffa4\070\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100" +
    "\uffa4\102\uffa4\103\uffa4\113\uffa4\114\uffa4\126\uffa4\143\uffa4" +
    "\001\002\000\130\004\uffa1\006\uffa1\007\uffa1\011\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067" +
    "\uffa1\070\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1" +
    "\102\uffa1\103\uffa1\113\uffa1\114\uffa1\126\uffa1\143\uffa1\001" +
    "\002\000\130\004\uffa0\006\uffa0\007\uffa0\011\uffa0\027\uffa0" +
    "\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0" +
    "\070\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\102" +
    "\uffa0\103\uffa0\113\uffa0\114\uffa0\126\uffa0\143\uffa0\001\002" +
    "\000\004\027\145\001\002\000\054\004\uff19\015\uff19\016" +
    "\uff19\017\uff19\020\uff19\021\uff19\022\uff19\023\uff19\024\uff19" +
    "\025\uff19\026\uff19\030\uff19\104\uff19\105\uff19\106\uff19\107" +
    "\uff19\110\uff19\111\uff19\112\uff19\143\uff19\147\uff19\001\002" +
    "\000\154\004\152\015\036\016\041\017\033\020\040\021" +
    "\047\022\045\023\034\024\222\025\043\026\037\027\145" +
    "\030\uffca\036\166\037\216\040\226\042\232\056\203\057" +
    "\156\060\206\061\224\062\170\067\162\071\234\072\176" +
    "\073\165\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111" +
    "\uffea\112\uffea\115\163\116\227\117\233\120\210\121\172" +
    "\122\217\123\212\124\173\125\213\127\225\131\201\132" +
    "\177\133\202\134\204\137\200\143\147\144\230\145\211" +
    "\146\164\147\uffea\001\002\000\166\004\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\042\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1" +
    "\067\uffc1\071\uffc1\072\uffc1\073\uffc1\104\uffc1\105\uffc1\106" +
    "\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\115\uffc1\116\uffc1" +
    "\117\uffc1\120\uffc1\121\uffc1\122\uffc1\123\uffc1\124\uffc1\125" +
    "\uffc1\127\uffc1\130\uffc1\131\uffc1\132\uffc1\133\uffc1\134\uffc1" +
    "\135\uffc1\136\uffc1\137\uffc1\140\uffc1\141\uffc1\143\uffc1\144" +
    "\uffc1\145\uffc1\146\uffc1\147\uffc1\001\002\000\114\004\uff88" +
    "\006\uff88\007\uff88\011\uff88\031\uff88\034\uff88\035\uff88\037" +
    "\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054" +
    "\uff88\055\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88" +
    "\074\uff88\075\u0158\076\uff88\077\uff88\100\uff88\102\uff88\103" +
    "\uff88\113\uff88\114\uff88\126\uff88\001\002\000\166\004\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\042\uffbf\056\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\067\uffbf\071\uffbf\072\uffbf\073\uffbf\104\uffbf" +
    "\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf\112\uffbf\115" +
    "\uffbf\116\uffbf\117\uffbf\120\uffbf\121\uffbf\122\uffbf\123\uffbf" +
    "\124\uffbf\125\uffbf\127\uffbf\130\uffbf\131\uffbf\132\uffbf\133" +
    "\uffbf\134\uffbf\135\uffbf\136\uffbf\137\uffbf\140\uffbf\141\uffbf" +
    "\143\uffbf\144\uffbf\145\uffbf\146\uffbf\147\uffbf\001\002\000" +
    "\122\004\uff8f\006\uff8f\007\uff8f\011\uff8f\030\uff8f\031\uff8f" +
    "\032\uff8f\034\uff8f\035\uff8f\037\uff8f\040\uff8f\041\uff8f\042" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\063\uff8f\064" +
    "\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\077\uff8f\100\uff8f\102\uff8f\103\uff8f\113\uff8f\114" +
    "\uff8f\126\uff8f\001\002\000\166\004\uffb8\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\042\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\067" +
    "\uffb8\071\uffb8\072\uffb8\073\uffb8\104\uffb8\105\uffb8\106\uffb8" +
    "\107\uffb8\110\uffb8\111\uffb8\112\uffb8\115\uffb8\116\uffb8\117" +
    "\uffb8\120\uffb8\121\uffb8\122\uffb8\123\uffb8\124\uffb8\125\uffb8" +
    "\127\uffb8\130\uffb8\131\uffb8\132\uffb8\133\uffb8\134\uffb8\135" +
    "\uffb8\136\uffb8\137\uffb8\140\uffb8\141\uffb8\143\uffb8\144\uffb8" +
    "\145\uffb8\146\uffb8\147\uffb8\001\002\000\122\004\uff49\006" +
    "\uff49\007\uff49\011\uff49\030\uff49\031\uff49\032\uff49\034\uff49" +
    "\035\uff49\037\uff49\040\uff49\041\uff49\042\uff49\043\uff49\044" +
    "\uff49\045\uff49\046\uff49\047\uff49\050\uff49\051\uff49\052\uff49" +
    "\053\uff49\054\uff49\055\uff49\063\uff49\064\uff49\065\uff49\066" +
    "\uff49\067\uff49\070\uff49\074\uff49\075\uff49\076\uff49\077\uff49" +
    "\100\uff49\102\uff49\103\uff49\113\uff49\114\uff49\126\uff49\001" +
    "\002\000\122\004\uff93\006\uff93\007\uff93\011\uff93\030\uff93" +
    "\031\uff93\032\uff93\034\uff93\035\uff93\037\uff93\040\uff93\041" +
    "\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93" +
    "\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\063" +
    "\uff93\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\074\uff93" +
    "\075\uff93\076\uff93\077\uff93\100\uff93\102\uff93\103\uff93\113" +
    "\uff93\114\uff93\126\uff93\001\002\000\166\004\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\042\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062" +
    "\uffbd\067\uffbd\071\uffbd\072\uffbd\073\uffbd\104\uffbd\105\uffbd" +
    "\106\uffbd\107\uffbd\110\uffbd\111\uffbd\112\uffbd\115\uffbd\116" +
    "\uffbd\117\uffbd\120\uffbd\121\uffbd\122\uffbd\123\uffbd\124\uffbd" +
    "\125\uffbd\127\uffbd\130\uffbd\131\uffbd\132\uffbd\133\uffbd\134" +
    "\uffbd\135\uffbd\136\uffbd\137\uffbd\140\uffbd\141\uffbd\143\uffbd" +
    "\144\uffbd\145\uffbd\146\uffbd\147\uffbd\001\002\000\056\036" +
    "\166\037\216\040\226\042\232\062\170\067\162\071\234" +
    "\072\176\073\165\115\163\116\227\117\233\120\210\121" +
    "\172\122\217\123\212\124\173\125\213\143\246\144\230" +
    "\145\211\146\164\001\002\000\166\004\uffc0\015\uffc0\016" +
    "\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\036\uffc0\037\uffc0\040" +
    "\uffc0\042\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0" +
    "\067\uffc0\071\uffc0\072\uffc0\073\uffc0\104\uffc0\105\uffc0\106" +
    "\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0\115\uffc0\116\uffc0" +
    "\117\uffc0\120\uffc0\121\uffc0\122\uffc0\123\uffc0\124\uffc0\125" +
    "\uffc0\127\uffc0\130\uffc0\131\uffc0\132\uffc0\133\uffc0\134\uffc0" +
    "\135\uffc0\136\uffc0\137\uffc0\140\uffc0\141\uffc0\143\uffc0\144" +
    "\uffc0\145\uffc0\146\uffc0\147\uffc0\001\002\000\166\004\uffc7" +
    "\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\036\uffc7" +
    "\037\uffc7\040\uffc7\042\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\067\uffc7\071\uffc7\072\uffc7\073\uffc7\104\uffc7" +
    "\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7\115" +
    "\uffc7\116\uffc7\117\uffc7\120\uffc7\121\uffc7\122\uffc7\123\uffc7" +
    "\124\uffc7\125\uffc7\127\uffc7\130\uffc7\131\uffc7\132\uffc7\133" +
    "\uffc7\134\uffc7\135\uffc7\136\uffc7\137\uffc7\140\uffc7\141\uffc7" +
    "\143\uffc7\144\uffc7\145\uffc7\146\uffc7\147\uffc7\001\002\000" +
    "\166\004\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\036\uffba\037\uffba\040\uffba\042\uffba\056\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\067\uffba\071\uffba\072\uffba\073" +
    "\uffba\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba" +
    "\112\uffba\115\uffba\116\uffba\117\uffba\120\uffba\121\uffba\122" +
    "\uffba\123\uffba\124\uffba\125\uffba\127\uffba\130\uffba\131\uffba" +
    "\132\uffba\133\uffba\134\uffba\135\uffba\136\uffba\137\uffba\140" +
    "\uffba\141\uffba\143\uffba\144\uffba\145\uffba\146\uffba\147\uffba" +
    "\001\002\000\024\104\121\105\124\106\122\107\112\110" +
    "\123\111\113\112\115\143\013\147\114\001\002\000\122" +
    "\004\uff44\006\uff44\007\uff44\011\uff44\030\uff44\031\uff44\032" +
    "\uff44\034\uff44\035\uff44\037\uff44\040\uff44\041\uff44\042\uff44" +
    "\043\uff44\044\uff44\045\uff44\046\uff44\047\uff44\050\uff44\051" +
    "\uff44\052\uff44\053\uff44\054\uff44\055\uff44\063\uff44\064\uff44" +
    "\065\uff44\066\uff44\067\uff44\070\uff44\074\uff44\075\uff44\076" +
    "\uff44\077\uff44\100\uff44\102\uff44\103\uff44\113\uff44\114\uff44" +
    "\126\uff44\001\002\000\122\004\uff45\006\uff45\007\uff45\011" +
    "\uff45\030\uff45\031\uff45\032\uff45\034\uff45\035\uff45\037\uff45" +
    "\040\uff45\041\uff45\042\uff45\043\uff45\044\uff45\045\uff45\046" +
    "\uff45\047\uff45\050\uff45\051\uff45\052\uff45\053\uff45\054\uff45" +
    "\055\uff45\063\uff45\064\uff45\065\uff45\066\uff45\067\uff45\070" +
    "\uff45\074\uff45\075\uff45\076\uff45\077\uff45\100\uff45\102\uff45" +
    "\103\uff45\113\uff45\114\uff45\126\uff45\001\002\000\122\004" +
    "\uff65\006\uff65\007\uff65\011\uff65\030\uff65\031\uff65\032\uff65" +
    "\034\uff65\035\uff65\037\uff65\040\uff65\041\uff65\042\uff65\043" +
    "\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65" +
    "\052\uff65\053\uff65\054\uff65\055\uff65\063\uff65\064\uff65\065" +
    "\uff65\066\uff65\067\uff65\070\uff65\074\uff65\075\uff65\076\uff65" +
    "\077\uff65\100\uff65\102\uff65\103\uff65\113\uff65\114\uff65\126" +
    "\uff65\001\002\000\056\036\166\037\216\040\226\042\232" +
    "\062\170\067\162\071\234\072\176\073\165\115\163\116" +
    "\227\117\233\120\210\121\172\122\217\123\212\124\173" +
    "\125\213\143\246\144\230\145\211\146\164\001\002\000" +
    "\004\030\u0151\001\002\000\056\036\166\037\216\040\226" +
    "\042\232\062\170\067\162\071\234\072\176\073\165\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\143\246\144\230\145\211\146\164\001" +
    "\002\000\122\004\uff91\006\uff91\007\uff91\011\uff91\030\uff91" +
    "\031\uff91\032\uff91\034\uff91\035\uff91\037\uff91\040\uff91\041" +
    "\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\063" +
    "\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\074\uff91" +
    "\075\uff91\076\uff91\077\uff91\100\uff91\102\uff91\103\uff91\113" +
    "\uff91\114\uff91\126\uff91\001\002\000\122\004\uff40\006\uff40" +
    "\007\uff40\011\uff40\030\uff40\031\uff40\032\uff40\034\uff40\035" +
    "\uff40\037\uff40\040\uff40\041\uff40\042\uff40\043\uff40\044\uff40" +
    "\045\uff40\046\uff40\047\uff40\050\uff40\051\uff40\052\uff40\053" +
    "\uff40\054\uff40\055\uff40\063\uff40\064\uff40\065\uff40\066\uff40" +
    "\067\uff40\070\uff40\074\uff40\075\uff40\076\uff40\077\uff40\100" +
    "\uff40\102\uff40\103\uff40\113\uff40\114\uff40\126\uff40\001\002" +
    "\000\122\004\uff8a\006\uff8a\007\uff8a\011\uff8a\030\uff8a\031" +
    "\uff8a\032\uff8a\034\uff8a\035\uff8a\037\uff8a\040\uff8a\041\uff8a" +
    "\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\063\uff8a" +
    "\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\074\uff8a\075" +
    "\uff8a\076\uff8a\077\uff8a\100\uff8a\102\uff8a\103\uff8a\113\uff8a" +
    "\114\uff8a\126\uff8a\001\002\000\122\004\uff8c\006\uff8c\007" +
    "\uff8c\011\uff8c\030\uff8c\031\uff8c\032\uff8c\034\uff8c\035\uff8c" +
    "\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045" +
    "\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c" +
    "\054\uff8c\055\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067" +
    "\uff8c\070\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c" +
    "\102\uff8c\103\uff8c\113\uff8c\114\uff8c\126\uff8c\001\002\000" +
    "\122\004\uff87\006\uff87\007\uff87\011\uff87\030\uff87\031\uff87" +
    "\032\uff87\034\uff87\035\uff87\037\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87" +
    "\051\uff87\052\uff87\053\uff87\054\uff87\055\uff87\063\uff87\064" +
    "\uff87\065\uff87\066\uff87\067\uff87\070\uff87\074\uff87\075\uff87" +
    "\076\uff87\077\uff87\100\uff87\102\uff87\103\uff87\113\uff87\114" +
    "\uff87\126\uff87\001\002\000\122\004\uff66\006\uff66\007\uff66" +
    "\011\uff66\030\uff66\031\uff66\032\uff66\034\uff66\035\uff66\037" +
    "\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66\045\uff66" +
    "\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054" +
    "\uff66\055\uff66\063\uff66\064\uff66\065\uff66\066\uff66\067\uff66" +
    "\070\uff66\074\uff66\075\uff66\076\uff66\077\uff66\100\uff66\102" +
    "\uff66\103\uff66\113\uff66\114\uff66\126\uff66\001\002\000\004" +
    "\067\u014c\001\002\000\004\067\u013d\001\002\000\152\004" +
    "\152\015\036\016\041\017\033\020\040\021\047\022\045" +
    "\023\034\024\222\025\043\026\037\027\145\036\166\037" +
    "\216\040\226\042\232\056\203\057\156\060\206\061\224" +
    "\062\170\067\162\071\234\072\176\073\165\104\uffea\105" +
    "\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\115\163" +
    "\116\227\117\233\120\210\121\172\122\217\123\212\124" +
    "\173\125\213\127\225\131\201\132\177\133\202\134\204" +
    "\137\200\143\147\144\230\145\211\146\164\147\uffea\001" +
    "\002\000\004\067\u012a\001\002\000\060\004\uffb7\036\166" +
    "\037\216\040\226\042\232\062\170\067\162\071\234\072" +
    "\176\073\165\115\163\116\227\117\233\120\210\121\172" +
    "\122\217\123\212\124\173\125\213\143\246\144\230\145" +
    "\211\146\164\001\002\000\152\004\152\015\036\016\041" +
    "\017\033\020\040\021\047\022\045\023\034\024\222\025" +
    "\043\026\037\027\145\036\166\037\216\040\226\042\232" +
    "\056\203\057\156\060\206\061\224\062\170\067\162\071" +
    "\234\072\176\073\165\104\uffea\105\uffea\106\uffea\107\uffea" +
    "\110\uffea\111\uffea\112\uffea\115\163\116\227\117\233\120" +
    "\210\121\172\122\217\123\212\124\173\125\213\127\225" +
    "\131\201\132\177\133\202\134\204\137\200\143\147\144" +
    "\230\145\211\146\164\147\uffea\001\002\000\166\004\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\036\uffc5" +
    "\037\uffc5\040\uffc5\042\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\067\uffc5\071\uffc5\072\uffc5\073\uffc5\104\uffc5" +
    "\105\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\115" +
    "\uffc5\116\uffc5\117\uffc5\120\uffc5\121\uffc5\122\uffc5\123\uffc5" +
    "\124\uffc5\125\uffc5\127\uffc5\130\uffc5\131\uffc5\132\uffc5\133" +
    "\uffc5\134\uffc5\135\uffc5\136\uffc5\137\uffc5\140\uffc5\141\uffc5" +
    "\143\uffc5\144\uffc5\145\uffc5\146\uffc5\147\uffc5\001\002\000" +
    "\006\004\u0118\143\u0119\001\002\000\166\004\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\042\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062" +
    "\uffc4\067\uffc4\071\uffc4\072\uffc4\073\uffc4\104\uffc4\105\uffc4" +
    "\106\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\115\uffc4\116" +
    "\uffc4\117\uffc4\120\uffc4\121\uffc4\122\uffc4\123\uffc4\124\uffc4" +
    "\125\uffc4\127\uffc4\130\uffc4\131\uffc4\132\uffc4\133\uffc4\134" +
    "\uffc4\135\uffc4\136\uffc4\137\uffc4\140\uffc4\141\uffc4\143\uffc4" +
    "\144\uffc4\145\uffc4\146\uffc4\147\uffc4\001\002\000\122\004" +
    "\uff41\006\uff41\007\uff41\011\uff41\030\uff41\031\uff41\032\uff41" +
    "\034\uff41\035\uff41\037\uff41\040\uff41\041\uff41\042\uff41\043" +
    "\uff41\044\uff41\045\uff41\046\uff41\047\uff41\050\uff41\051\uff41" +
    "\052\uff41\053\uff41\054\uff41\055\uff41\063\uff41\064\uff41\065" +
    "\uff41\066\uff41\067\uff41\070\uff41\074\uff41\075\uff41\076\uff41" +
    "\077\uff41\100\uff41\102\uff41\103\uff41\113\uff41\114\uff41\126" +
    "\uff41\001\002\000\122\004\uff47\006\uff47\007\uff47\011\uff47" +
    "\030\uff47\031\uff47\032\uff47\034\uff47\035\uff47\037\uff47\040" +
    "\uff47\041\uff47\042\uff47\043\uff47\044\uff47\045\uff47\046\uff47" +
    "\047\uff47\050\uff47\051\uff47\052\uff47\053\uff47\054\uff47\055" +
    "\uff47\063\uff47\064\uff47\065\uff47\066\uff47\067\uff47\070\uff47" +
    "\074\uff47\075\uff47\076\uff47\077\uff47\100\uff47\102\uff47\103" +
    "\uff47\113\uff47\114\uff47\126\uff47\001\002\000\122\004\uff8b" +
    "\006\uff8b\007\uff8b\011\uff8b\030\uff8b\031\uff8b\032\uff8b\034" +
    "\uff8b\035\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052" +
    "\uff8b\053\uff8b\054\uff8b\055\uff8b\063\uff8b\064\uff8b\065\uff8b" +
    "\066\uff8b\067\uff8b\070\uff8b\074\uff8b\075\uff8b\076\uff8b\077" +
    "\uff8b\100\uff8b\102\uff8b\103\uff8b\113\uff8b\114\uff8b\126\uff8b" +
    "\001\002\000\122\004\uff89\006\uff89\007\uff89\011\uff89\030" +
    "\uff89\031\uff89\032\uff89\034\uff89\035\uff89\037\uff89\040\uff89" +
    "\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047" +
    "\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89" +
    "\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070\uff89\074" +
    "\uff89\075\uff89\076\uff89\077\uff89\100\uff89\102\uff89\103\uff89" +
    "\113\uff89\114\uff89\126\uff89\001\002\000\166\004\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\042\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\067\uffc2\071\uffc2\072\uffc2\073\uffc2\104\uffc2\105" +
    "\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\115\uffc2" +
    "\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2\123\uffc2\124" +
    "\uffc2\125\uffc2\127\uffc2\130\uffc2\131\uffc2\132\uffc2\133\uffc2" +
    "\134\uffc2\135\uffc2\136\uffc2\137\uffc2\140\uffc2\141\uffc2\143" +
    "\uffc2\144\uffc2\145\uffc2\146\uffc2\147\uffc2\001\002\000\024" +
    "\104\121\105\124\106\122\107\112\110\123\111\113\112" +
    "\115\143\013\147\114\001\002\000\056\036\166\037\216" +
    "\040\226\042\232\062\170\067\162\071\234\072\176\073" +
    "\165\115\163\116\227\117\233\120\210\121\172\122\217" +
    "\123\212\124\173\125\213\143\246\144\230\145\211\146" +
    "\164\001\002\000\122\004\uff48\006\uff48\007\uff48\011\uff48" +
    "\030\uff48\031\uff48\032\uff48\034\uff48\035\uff48\037\uff48\040" +
    "\uff48\041\uff48\042\uff48\043\uff48\044\uff48\045\uff48\046\uff48" +
    "\047\uff48\050\uff48\051\uff48\052\uff48\053\uff48\054\uff48\055" +
    "\uff48\063\uff48\064\uff48\065\uff48\066\uff48\067\uff48\070\uff48" +
    "\074\uff48\075\uff48\076\uff48\077\uff48\100\uff48\102\uff48\103" +
    "\uff48\113\uff48\114\uff48\126\uff48\001\002\000\122\004\uff90" +
    "\006\uff90\007\uff90\011\uff90\030\uff90\031\uff90\032\uff90\034" +
    "\uff90\035\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052" +
    "\uff90\053\uff90\054\uff90\055\uff90\063\uff90\064\uff90\065\uff90" +
    "\066\uff90\067\uff90\070\uff90\074\uff90\075\uff90\076\uff90\077" +
    "\uff90\100\uff90\102\uff90\103\uff90\113\uff90\114\uff90\126\uff90" +
    "\001\002\000\112\004\u0101\006\310\007\270\011\253\031" +
    "\307\034\306\035\255\037\260\040\301\041\276\042\250" +
    "\043\272\044\274\045\305\046\271\047\251\050\315\051" +
    "\265\052\252\053\254\054\304\055\317\063\275\064\316" +
    "\065\302\066\313\067\257\074\311\076\277\077\312\100" +
    "\267\102\303\103\314\113\300\114\256\126\262\001\002" +
    "\000\052\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\067\375\104\uffe0" +
    "\105\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\143" +
    "\uffe0\147\uffe0\001\002\000\154\004\152\015\036\016\041" +
    "\017\033\020\040\021\047\022\045\023\034\024\222\025" +
    "\043\026\037\027\145\030\uffcb\036\166\037\216\040\226" +
    "\042\232\056\203\057\156\060\206\061\224\062\170\067" +
    "\162\071\234\072\176\073\165\104\uffea\105\uffea\106\uffea" +
    "\107\uffea\110\uffea\111\uffea\112\uffea\115\163\116\227\117" +
    "\233\120\210\121\172\122\217\123\212\124\173\125\213" +
    "\127\225\131\201\132\177\133\202\134\204\137\200\143" +
    "\147\144\230\145\211\146\164\147\uffea\001\002\000\006" +
    "\004\371\143\372\001\002\000\004\067\362\001\002\000" +
    "\056\036\166\037\216\040\226\042\232\062\170\067\162" +
    "\071\234\072\176\073\165\115\163\116\227\117\233\120" +
    "\210\121\172\122\217\123\212\124\173\125\213\143\246" +
    "\144\230\145\211\146\164\001\002\000\122\004\uff43\006" +
    "\uff43\007\uff43\011\uff43\030\uff43\031\uff43\032\uff43\034\uff43" +
    "\035\uff43\037\uff43\040\uff43\041\uff43\042\uff43\043\uff43\044" +
    "\uff43\045\uff43\046\uff43\047\uff43\050\uff43\051\uff43\052\uff43" +
    "\053\uff43\054\uff43\055\uff43\063\uff43\064\uff43\065\uff43\066" +
    "\uff43\067\uff43\070\uff43\074\uff43\075\uff43\076\uff43\077\uff43" +
    "\100\uff43\102\uff43\103\uff43\113\uff43\114\uff43\126\uff43\001" +
    "\002\000\122\004\uff46\006\uff46\007\uff46\011\uff46\030\uff46" +
    "\031\uff46\032\uff46\034\uff46\035\uff46\037\uff46\040\uff46\041" +
    "\uff46\042\uff46\043\uff46\044\uff46\045\uff46\046\uff46\047\uff46" +
    "\050\uff46\051\uff46\052\uff46\053\uff46\054\uff46\055\uff46\063" +
    "\uff46\064\uff46\065\uff46\066\uff46\067\uff46\070\uff46\074\uff46" +
    "\075\uff46\076\uff46\077\uff46\100\uff46\102\uff46\103\uff46\113" +
    "\uff46\114\uff46\126\uff46\001\002\000\166\004\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\036\uffb9\037\uffb9" +
    "\040\uffb9\042\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062" +
    "\uffb9\067\uffb9\071\uffb9\072\uffb9\073\uffb9\104\uffb9\105\uffb9" +
    "\106\uffb9\107\uffb9\110\uffb9\111\uffb9\112\uffb9\115\uffb9\116" +
    "\uffb9\117\uffb9\120\uffb9\121\uffb9\122\uffb9\123\uffb9\124\uffb9" +
    "\125\uffb9\127\uffb9\130\uffb9\131\uffb9\132\uffb9\133\uffb9\134" +
    "\uffb9\135\uffb9\136\uffb9\137\uffb9\140\uffb9\141\uffb9\143\uffb9" +
    "\144\uffb9\145\uffb9\146\uffb9\147\uffb9\001\002\000\056\036" +
    "\166\037\216\040\226\042\232\062\170\067\162\071\234" +
    "\072\176\073\165\115\163\116\227\117\233\120\210\121" +
    "\172\122\217\123\212\124\173\125\213\143\246\144\230" +
    "\145\211\146\164\001\002\000\122\004\uff42\006\uff42\007" +
    "\uff42\011\uff42\030\uff42\031\uff42\032\uff42\034\uff42\035\uff42" +
    "\037\uff42\040\uff42\041\uff42\042\uff42\043\uff42\044\uff42\045" +
    "\uff42\046\uff42\047\uff42\050\uff42\051\uff42\052\uff42\053\uff42" +
    "\054\uff42\055\uff42\063\uff42\064\uff42\065\uff42\066\uff42\067" +
    "\uff42\070\uff42\074\uff42\075\uff42\076\uff42\077\uff42\100\uff42" +
    "\102\uff42\103\uff42\113\uff42\114\uff42\126\uff42\001\002\000" +
    "\026\067\245\104\121\105\124\106\122\107\112\110\123" +
    "\111\113\112\115\143\013\147\114\001\002\000\122\004" +
    "\uff8e\006\uff8e\007\uff8e\011\uff8e\030\uff8e\031\uff8e\032\uff8e" +
    "\034\uff8e\035\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043" +
    "\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e" +
    "\052\uff8e\053\uff8e\054\uff8e\055\uff8e\063\uff8e\064\uff8e\065" +
    "\uff8e\066\uff8e\067\uff8e\070\uff8e\074\uff8e\075\uff8e\076\uff8e" +
    "\077\uff8e\100\uff8e\102\uff8e\103\uff8e\113\uff8e\114\uff8e\126" +
    "\uff8e\001\002\000\154\004\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\036\uffc9\037\uffc9\040\uffc9\042\uffc9" +
    "\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\067\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9" +
    "\110\uffc9\111\uffc9\112\uffc9\115\uffc9\116\uffc9\117\uffc9\120" +
    "\uffc9\121\uffc9\122\uffc9\123\uffc9\124\uffc9\125\uffc9\127\uffc9" +
    "\131\uffc9\132\uffc9\133\uffc9\134\uffc9\137\uffc9\143\uffc9\144" +
    "\uffc9\145\uffc9\146\uffc9\147\uffc9\001\002\000\122\004\uff92" +
    "\006\uff92\007\uff92\011\uff92\030\uff92\031\uff92\032\uff92\034" +
    "\uff92\035\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\063\uff92\064\uff92\065\uff92" +
    "\066\uff92\067\uff92\070\uff92\074\uff92\075\uff92\076\uff92\077" +
    "\uff92\100\uff92\102\uff92\103\uff92\113\uff92\114\uff92\126\uff92" +
    "\001\002\000\166\004\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3\056" +
    "\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\067\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110" +
    "\uffc3\111\uffc3\112\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3" +
    "\121\uffc3\122\uffc3\123\uffc3\124\uffc3\125\uffc3\127\uffc3\130" +
    "\uffc3\131\uffc3\132\uffc3\133\uffc3\134\uffc3\135\uffc3\136\uffc3" +
    "\137\uffc3\140\uffc3\141\uffc3\143\uffc3\144\uffc3\145\uffc3\146" +
    "\uffc3\147\uffc3\001\002\000\122\004\uff8d\006\uff8d\007\uff8d" +
    "\011\uff8d\030\uff8d\031\uff8d\032\uff8d\034\uff8d\035\uff8d\037" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d" +
    "\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054" +
    "\uff8d\055\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d" +
    "\070\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\102" +
    "\uff8d\103\uff8d\113\uff8d\114\uff8d\126\uff8d\001\002\000\122" +
    "\004\uffa5\006\014\007\uffa5\011\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\034\uffa5\035\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\063\uffa5\064\uffa5" +
    "\065\uffa5\066\uffa5\067\354\070\uffa5\074\uffa5\075\uffa5\076" +
    "\uffa5\077\uffa5\100\uffa5\102\uffa5\103\uffa5\113\uffa5\114\uffa5" +
    "\126\uffa5\001\002\000\122\004\uff53\006\uff53\007\uff53\011" +
    "\uff53\030\uff53\031\uff53\032\uff53\034\uff53\035\uff53\037\uff53" +
    "\040\uff53\041\uff53\042\uff53\043\uff53\044\uff53\045\uff53\046" +
    "\uff53\047\uff53\050\uff53\051\uff53\052\uff53\053\uff53\054\uff53" +
    "\055\uff53\063\uff53\064\uff53\065\uff53\066\uff53\067\uff53\070" +
    "\uff53\074\uff53\075\uff53\076\uff53\077\uff53\100\uff53\102\uff53" +
    "\103\uff53\113\uff53\114\uff53\126\uff53\001\002\000\122\004" +
    "\uff4a\006\uff4a\007\uff4a\011\uff4a\030\uff4a\031\350\032\uff4a" +
    "\034\uff4a\035\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043" +
    "\uff4a\044\uff4a\045\uff4a\046\uff4a\047\uff4a\050\uff4a\051\uff4a" +
    "\052\uff4a\053\uff4a\054\uff4a\055\uff4a\063\uff4a\064\uff4a\065" +
    "\uff4a\066\uff4a\067\uff4a\070\uff4a\074\uff4a\075\uff4a\076\uff4a" +
    "\077\uff4a\100\uff4a\102\uff4a\103\uff4a\113\uff4a\114\uff4a\126" +
    "\uff4a\001\002\000\056\036\166\037\216\040\226\042\232" +
    "\062\170\067\162\071\234\072\176\073\165\115\163\116" +
    "\227\117\233\120\210\121\172\122\217\123\212\124\173" +
    "\125\213\143\246\144\230\145\211\146\164\001\002\000" +
    "\122\004\uff88\006\uff88\007\uff88\011\uff88\030\uff88\031\uff88" +
    "\032\uff88\034\uff88\035\uff88\037\uff88\040\uff88\041\uff88\042" +
    "\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\063\uff88\064" +
    "\uff88\065\uff88\066\uff88\067\uff88\070\uff88\074\uff88\075\uff88" +
    "\076\uff88\077\uff88\100\uff88\102\uff88\103\uff88\113\uff88\114" +
    "\uff88\126\uff88\001\002\000\112\006\310\007\270\011\253" +
    "\031\307\034\306\035\255\037\260\040\301\041\276\042" +
    "\250\043\272\044\274\045\305\046\271\047\251\050\315" +
    "\051\265\052\252\053\254\054\304\055\317\063\275\064" +
    "\316\065\302\066\313\067\257\070\263\074\311\076\277" +
    "\077\312\100\267\102\303\103\314\113\300\114\256\126" +
    "\262\001\002\000\122\004\uff7b\006\uff7b\007\uff7b\011\uff7b" +
    "\030\uff7b\031\uff7b\032\uff7b\034\uff7b\035\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055" +
    "\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b" +
    "\074\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\102\uff7b\103" +
    "\uff7b\113\uff7b\114\uff7b\126\uff7b\001\002\000\056\036\uff71" +
    "\037\uff71\040\uff71\042\uff71\062\uff71\067\uff71\071\uff71\072" +
    "\uff71\073\uff71\115\uff71\116\uff71\117\uff71\120\uff71\121\uff71" +
    "\122\uff71\123\uff71\124\uff71\125\uff71\143\uff71\144\uff71\145" +
    "\uff71\146\uff71\001\002\000\056\036\uff6d\037\uff6d\040\uff6d" +
    "\042\uff6d\062\uff6d\067\uff6d\071\uff6d\072\uff6d\073\uff6d\115" +
    "\uff6d\116\uff6d\117\uff6d\120\uff6d\121\uff6d\122\uff6d\123\uff6d" +
    "\124\uff6d\125\uff6d\143\uff6d\144\uff6d\145\uff6d\146\uff6d\001" +
    "\002\000\056\036\uff74\037\uff74\040\uff74\042\uff74\062\uff74" +
    "\067\uff74\071\uff74\072\uff74\073\uff74\115\uff74\116\uff74\117" +
    "\uff74\120\uff74\121\uff74\122\uff74\123\uff74\124\uff74\125\uff74" +
    "\143\uff74\144\uff74\145\uff74\146\uff74\001\002\000\056\036" +
    "\uff6c\037\uff6c\040\uff6c\042\uff6c\062\uff6c\067\uff6c\071\uff6c" +
    "\072\uff6c\073\uff6c\115\uff6c\116\uff6c\117\uff6c\120\uff6c\121" +
    "\uff6c\122\uff6c\123\uff6c\124\uff6c\125\uff6c\143\uff6c\144\uff6c" +
    "\145\uff6c\146\uff6c\001\002\000\056\036\166\037\216\040" +
    "\226\042\232\062\170\067\162\071\234\072\176\073\165" +
    "\115\163\116\227\117\233\120\210\121\172\122\217\123" +
    "\212\124\173\125\213\143\246\144\230\145\211\146\164" +
    "\001\002\000\056\036\uff60\037\uff60\040\uff60\042\uff60\062" +
    "\uff60\067\uff60\071\uff60\072\uff60\073\uff60\115\uff60\116\uff60" +
    "\117\uff60\120\uff60\121\uff60\122\uff60\123\uff60\124\uff60\125" +
    "\uff60\143\uff60\144\uff60\145\uff60\146\uff60\001\002\000\060" +
    "\036\166\037\216\040\226\042\232\062\170\067\162\070" +
    "\340\071\234\072\176\073\165\115\163\116\227\117\233" +
    "\120\210\121\172\122\217\123\212\124\173\125\213\143" +
    "\246\144\230\145\211\146\164\001\002\000\056\036\uff76" +
    "\037\uff76\040\uff76\042\uff76\062\uff76\067\uff76\071\uff76\072" +
    "\uff76\073\uff76\115\uff76\116\uff76\117\uff76\120\uff76\121\uff76" +
    "\122\uff76\123\uff76\124\uff76\125\uff76\143\uff76\144\uff76\145" +
    "\uff76\146\uff76\001\002\000\056\036\166\037\216\040\226" +
    "\042\232\062\170\067\162\071\234\072\176\073\165\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\143\246\144\230\145\211\146\164\001" +
    "\002\000\004\143\013\001\002\000\122\004\uff50\006\uff50" +
    "\007\uff50\011\uff50\030\uff50\031\uff50\032\uff50\034\uff50\035" +
    "\uff50\037\uff50\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50" +
    "\045\uff50\046\uff50\047\uff50\050\uff50\051\uff50\052\uff50\053" +
    "\uff50\054\uff50\055\uff50\063\uff50\064\uff50\065\uff50\066\uff50" +
    "\067\uff50\070\uff50\074\uff50\075\uff50\076\uff50\077\uff50\100" +
    "\uff50\102\uff50\103\uff50\113\uff50\114\uff50\126\uff50\001\002" +
    "\000\056\036\166\037\216\040\226\042\232\062\170\067" +
    "\162\071\234\072\176\073\165\115\163\116\227\117\233" +
    "\120\210\121\172\122\217\123\212\124\173\125\213\143" +
    "\246\144\230\145\211\146\164\001\002\000\056\036\uff6e" +
    "\037\uff6e\040\uff6e\042\uff6e\062\uff6e\067\uff6e\071\uff6e\072" +
    "\uff6e\073\uff6e\115\uff6e\116\uff6e\117\uff6e\120\uff6e\121\uff6e" +
    "\122\uff6e\123\uff6e\124\uff6e\125\uff6e\143\uff6e\144\uff6e\145" +
    "\uff6e\146\uff6e\001\002\000\056\036\166\037\216\040\226" +
    "\042\232\062\170\067\162\071\234\072\176\073\165\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\143\246\144\230\145\211\146\164\001" +
    "\002\000\056\036\uff62\037\uff62\040\uff62\042\uff62\062\uff62" +
    "\067\uff62\071\uff62\072\uff62\073\uff62\115\uff62\116\uff62\117" +
    "\uff62\120\uff62\121\uff62\122\uff62\123\uff62\124\uff62\125\uff62" +
    "\143\uff62\144\uff62\145\uff62\146\uff62\001\002\000\056\036" +
    "\166\037\216\040\226\042\232\062\170\067\162\071\234" +
    "\072\176\073\165\115\163\116\227\117\233\120\210\121" +
    "\172\122\217\123\212\124\173\125\213\143\246\144\230" +
    "\145\211\146\164\001\002\000\056\036\uff72\037\uff72\040" +
    "\uff72\042\uff72\062\uff72\067\uff72\071\uff72\072\uff72\073\uff72" +
    "\115\uff72\116\uff72\117\uff72\120\uff72\121\uff72\122\uff72\123" +
    "\uff72\124\uff72\125\uff72\143\uff72\144\uff72\145\uff72\146\uff72" +
    "\001\002\000\056\036\uff77\037\uff77\040\226\042\232\062" +
    "\uff77\067\uff77\071\uff77\072\uff77\073\uff77\115\uff77\116\uff77" +
    "\117\uff77\120\uff77\121\uff77\122\uff77\123\uff77\124\uff77\125" +
    "\uff77\143\246\144\uff77\145\uff77\146\uff77\001\002\000\056" +
    "\036\166\037\216\040\226\042\232\062\170\067\162\071" +
    "\234\072\176\073\165\115\163\116\227\117\233\120\210" +
    "\121\172\122\217\123\212\124\173\125\213\143\246\144" +
    "\230\145\211\146\164\001\002\000\056\036\uff75\037\uff75" +
    "\040\uff75\042\uff75\062\uff75\067\uff75\071\uff75\072\uff75\073" +
    "\uff75\115\uff75\116\uff75\117\uff75\120\uff75\121\uff75\122\uff75" +
    "\123\uff75\124\uff75\125\uff75\143\uff75\144\uff75\145\uff75\146" +
    "\uff75\001\002\000\056\036\uff55\037\uff55\040\uff55\042\uff55" +
    "\062\uff55\067\uff55\071\uff55\072\uff55\073\uff55\115\uff55\116" +
    "\uff55\117\uff55\120\uff55\121\uff55\122\uff55\123\uff55\124\uff55" +
    "\125\uff55\143\uff55\144\uff55\145\uff55\146\uff55\001\002\000" +
    "\056\036\166\037\uff78\040\226\042\232\062\uff78\067\162" +
    "\071\uff78\072\uff78\073\uff78\115\uff78\116\uff78\117\uff78\120" +
    "\uff78\121\uff78\122\uff78\123\uff78\124\uff78\125\uff78\143\246" +
    "\144\uff78\145\uff78\146\uff78\001\002\000\060\036\uff64\037" +
    "\uff64\040\uff64\042\uff64\062\uff64\067\uff64\071\uff64\072\uff64" +
    "\073\uff64\076\327\115\uff64\116\uff64\117\uff64\120\uff64\121" +
    "\uff64\122\uff64\123\uff64\124\uff64\125\uff64\143\uff64\144\uff64" +
    "\145\uff64\146\uff64\001\002\000\056\036\uff5f\037\uff5f\040" +
    "\uff5f\042\uff5f\062\uff5f\067\uff5f\071\uff5f\072\uff5f\073\uff5f" +
    "\115\uff5f\116\uff5f\117\uff5f\120\uff5f\121\uff5f\122\uff5f\123" +
    "\uff5f\124\uff5f\125\uff5f\143\uff5f\144\uff5f\145\uff5f\146\uff5f" +
    "\001\002\000\122\004\uff7a\006\uff7a\007\uff7a\011\uff7a\030" +
    "\uff7a\031\uff7a\032\uff7a\034\uff7a\035\uff7a\037\uff7a\040\uff7a" +
    "\041\uff7a\042\uff7a\043\uff7a\044\uff7a\045\uff7a\046\uff7a\047" +
    "\uff7a\050\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a" +
    "\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\074" +
    "\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\102\uff7a\103\uff7a" +
    "\113\uff7a\114\uff7a\126\uff7a\001\002\000\056\036\uff58\037" +
    "\uff58\040\uff58\042\uff58\062\uff58\067\uff58\071\uff58\072\uff58" +
    "\073\uff58\115\uff58\116\uff58\117\uff58\120\uff58\121\uff58\122" +
    "\uff58\123\uff58\124\uff58\125\uff58\143\uff58\144\uff58\145\uff58" +
    "\146\uff58\001\002\000\056\036\uff61\037\uff61\040\uff61\042" +
    "\uff61\062\uff61\067\uff61\071\uff61\072\uff61\073\uff61\115\uff61" +
    "\116\uff61\117\uff61\120\uff61\121\uff61\122\uff61\123\uff61\124" +
    "\uff61\125\uff61\143\uff61\144\uff61\145\uff61\146\uff61\001\002" +
    "\000\056\036\uff6b\037\uff6b\040\uff6b\042\uff6b\062\uff6b\067" +
    "\uff6b\071\uff6b\072\uff6b\073\uff6b\115\uff6b\116\uff6b\117\uff6b" +
    "\120\uff6b\121\uff6b\122\uff6b\123\uff6b\124\uff6b\125\uff6b\143" +
    "\uff6b\144\uff6b\145\uff6b\146\uff6b\001\002\000\056\036\uff73" +
    "\037\uff73\040\uff73\042\uff73\062\uff73\067\uff73\071\uff73\072" +
    "\uff73\073\uff73\115\uff73\116\uff73\117\uff73\120\uff73\121\uff73" +
    "\122\uff73\123\uff73\124\uff73\125\uff73\143\uff73\144\uff73\145" +
    "\uff73\146\uff73\001\002\000\056\036\166\037\216\040\226" +
    "\042\232\062\170\067\162\071\234\072\176\073\165\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\143\246\144\230\145\211\146\164\001" +
    "\002\000\056\036\166\037\216\040\226\042\232\062\170" +
    "\067\162\071\234\072\176\073\165\115\163\116\227\117" +
    "\233\120\210\121\172\122\217\123\212\124\173\125\213" +
    "\143\246\144\230\145\211\146\164\001\002\000\056\036" +
    "\166\037\216\040\226\042\232\062\170\067\162\071\234" +
    "\072\176\073\165\115\163\116\227\117\233\120\210\121" +
    "\172\122\217\123\212\124\173\125\213\143\246\144\230" +
    "\145\211\146\164\001\002\000\056\036\166\037\216\040" +
    "\226\042\232\062\170\067\162\071\234\072\176\073\165" +
    "\115\163\116\227\117\233\120\210\121\172\122\217\123" +
    "\212\124\173\125\213\143\246\144\230\145\211\146\164" +
    "\001\002\000\056\036\uff63\037\uff63\040\uff63\042\uff63\062" +
    "\uff63\067\uff63\071\uff63\072\uff63\073\uff63\115\uff63\116\uff63" +
    "\117\uff63\120\uff63\121\uff63\122\uff63\123\uff63\124\uff63\125" +
    "\uff63\143\uff63\144\uff63\145\uff63\146\uff63\001\002\000\056" +
    "\036\uff56\037\uff56\040\uff56\042\uff56\062\uff56\067\uff56\071" +
    "\uff56\072\uff56\073\uff56\115\uff56\116\uff56\117\uff56\120\uff56" +
    "\121\uff56\122\uff56\123\uff56\124\uff56\125\uff56\143\uff56\144" +
    "\uff56\145\uff56\146\uff56\001\002\000\056\036\uff5d\037\uff5d" +
    "\040\uff5d\042\uff5d\062\uff5d\067\uff5d\071\uff5d\072\uff5d\073" +
    "\uff5d\115\uff5d\116\uff5d\117\uff5d\120\uff5d\121\uff5d\122\uff5d" +
    "\123\uff5d\124\uff5d\125\uff5d\143\uff5d\144\uff5d\145\uff5d\146" +
    "\uff5d\001\002\000\056\036\uff6f\037\uff6f\040\uff6f\042\uff6f" +
    "\062\uff6f\067\uff6f\071\uff6f\072\uff6f\073\uff6f\115\uff6f\116" +
    "\uff6f\117\uff6f\120\uff6f\121\uff6f\122\uff6f\123\uff6f\124\uff6f" +
    "\125\uff6f\143\uff6f\144\uff6f\145\uff6f\146\uff6f\001\002\000" +
    "\056\036\uff57\037\uff57\040\uff57\042\uff57\062\uff57\067\uff57" +
    "\071\uff57\072\uff57\073\uff57\115\uff57\116\uff57\117\uff57\120" +
    "\uff57\121\uff57\122\uff57\123\uff57\124\uff57\125\uff57\143\uff57" +
    "\144\uff57\145\uff57\146\uff57\001\002\000\056\036\uff6a\037" +
    "\uff6a\040\uff6a\042\uff6a\062\uff6a\067\uff6a\071\uff6a\072\uff6a" +
    "\073\uff6a\115\uff6a\116\uff6a\117\uff6a\120\uff6a\121\uff6a\122" +
    "\uff6a\123\uff6a\124\uff6a\125\uff6a\143\uff6a\144\uff6a\145\uff6a" +
    "\146\uff6a\001\002\000\112\006\310\007\270\011\253\031" +
    "\307\034\306\035\255\037\260\040\301\041\276\042\250" +
    "\043\272\044\274\045\305\046\271\047\251\050\315\051" +
    "\265\052\252\053\254\054\304\055\317\063\275\064\316" +
    "\065\302\066\313\067\257\074\311\075\321\076\277\077" +
    "\312\100\267\102\303\103\314\113\300\114\256\126\262" +
    "\001\002\000\056\036\166\037\216\040\226\042\232\062" +
    "\170\067\162\071\234\072\176\073\165\115\163\116\227" +
    "\117\233\120\210\121\172\122\217\123\212\124\173\125" +
    "\213\143\246\144\230\145\211\146\164\001\002\000\122" +
    "\004\uff67\006\310\007\270\011\253\030\uff67\031\307\032" +
    "\uff67\034\306\035\255\037\260\040\301\041\276\042\250" +
    "\043\272\044\274\045\305\046\271\047\251\050\315\051" +
    "\265\052\252\053\254\054\304\055\317\063\275\064\316" +
    "\065\302\066\313\067\257\070\uff67\074\311\075\uff67\076" +
    "\277\077\312\100\267\102\303\103\314\113\300\114\256" +
    "\126\262\001\002\000\122\004\uff83\006\uff83\007\270\011" +
    "\uff83\030\uff83\031\307\032\uff83\034\uff83\035\255\037\uff83" +
    "\040\301\041\uff83\042\250\043\272\044\274\045\305\046" +
    "\uff83\047\251\050\315\051\265\052\252\053\254\054\304" +
    "\055\317\063\275\064\316\065\302\066\313\067\uff83\070" +
    "\uff83\074\311\075\uff83\076\277\077\312\100\267\102\303" +
    "\103\314\113\300\114\256\126\262\001\002\000\112\006" +
    "\310\007\270\011\253\031\307\032\325\034\306\035\255" +
    "\037\260\040\301\041\276\042\250\043\272\044\274\045" +
    "\305\046\271\047\251\050\315\051\265\052\252\053\254" +
    "\054\304\055\317\063\275\064\316\065\302\066\313\067" +
    "\257\074\311\076\277\077\312\100\267\102\303\103\314" +
    "\113\300\114\256\126\262\001\002\000\122\004\uff84\006" +
    "\uff84\007\uff84\011\uff84\030\uff84\031\uff84\032\uff84\034\uff84" +
    "\035\uff84\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044" +
    "\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84" +
    "\053\uff84\054\uff84\055\uff84\063\uff84\064\uff84\065\uff84\066" +
    "\uff84\067\uff84\070\uff84\074\uff84\075\uff84\076\uff84\077\uff84" +
    "\100\uff84\102\uff84\103\uff84\113\uff84\114\uff84\126\uff84\001" +
    "\002\000\122\004\uff7f\006\310\007\270\011\uff7f\030\uff7f" +
    "\031\307\032\uff7f\034\uff7f\035\255\037\uff7f\040\301\041" +
    "\uff7f\042\250\043\272\044\274\045\305\046\uff7f\047\251" +
    "\050\315\051\265\052\252\053\254\054\304\055\317\063" +
    "\275\064\316\065\302\066\313\067\257\070\uff7f\074\311" +
    "\075\uff7f\076\277\077\312\100\267\102\303\103\314\113" +
    "\300\114\256\126\262\001\002\000\056\036\uff5e\037\uff5e" +
    "\040\uff5e\042\uff5e\062\uff5e\067\uff5e\071\uff5e\072\uff5e\073" +
    "\uff5e\115\uff5e\116\uff5e\117\uff5e\120\uff5e\121\uff5e\122\uff5e" +
    "\123\uff5e\124\uff5e\125\uff5e\143\uff5e\144\uff5e\145\uff5e\146" +
    "\uff5e\001\002\000\122\004\uff5c\006\310\007\270\011\253" +
    "\030\uff5c\031\307\032\uff5c\034\306\035\255\037\uff5c\040" +
    "\301\041\uff5c\042\250\043\272\044\274\045\305\046\271" +
    "\047\251\050\315\051\265\052\252\053\254\054\304\055" +
    "\317\063\275\064\316\065\302\066\313\067\257\070\uff5c" +
    "\074\311\075\uff5c\076\277\077\312\100\267\102\303\103" +
    "\314\113\300\114\256\126\262\001\002\000\122\004\uff70" +
    "\006\310\007\270\011\253\030\uff70\031\307\032\uff70\034" +
    "\306\035\255\037\260\040\301\041\276\042\250\043\272" +
    "\044\274\045\305\046\271\047\251\050\315\051\265\052" +
    "\252\053\254\054\304\055\317\063\275\064\316\065\302" +
    "\066\313\067\257\070\uff70\074\311\075\uff70\076\277\077" +
    "\312\100\267\102\303\103\314\113\300\114\256\126\262" +
    "\001\002\000\122\004\uff5b\006\uff5b\007\uff5b\011\uff5b\030" +
    "\uff5b\031\307\032\uff5b\034\uff5b\035\255\037\uff5b\040\301" +
    "\041\uff5b\042\250\043\272\044\274\045\305\046\uff5b\047" +
    "\251\050\315\051\265\052\252\053\254\054\304\055\317" +
    "\063\275\064\316\065\302\066\313\067\uff5b\070\uff5b\074" +
    "\311\075\uff5b\076\277\077\312\100\267\102\303\103\314" +
    "\113\300\114\256\126\uff5b\001\002\000\122\004\uff82\006" +
    "\uff82\007\uff82\011\uff82\030\uff82\031\307\032\uff82\034\uff82" +
    "\035\255\037\uff82\040\301\041\uff82\042\250\043\272\044" +
    "\274\045\305\046\uff82\047\251\050\315\051\265\052\252" +
    "\053\254\054\304\055\317\063\275\064\316\065\302\066" +
    "\313\067\uff82\070\uff82\074\311\075\uff82\076\277\077\312" +
    "\100\267\102\303\103\314\113\300\114\256\126\262\001" +
    "\002\000\122\004\uff68\006\310\007\270\011\253\030\uff68" +
    "\031\307\032\uff68\034\306\035\255\037\260\040\301\041" +
    "\276\042\250\043\272\044\274\045\305\046\271\047\251" +
    "\050\315\051\265\052\252\053\254\054\304\055\317\063" +
    "\275\064\316\065\302\066\313\067\257\070\uff68\074\311" +
    "\075\uff68\076\277\077\312\100\267\102\303\103\314\113" +
    "\300\114\256\126\262\001\002\000\122\004\uff79\006\310" +
    "\007\270\011\253\030\uff79\031\307\032\uff79\034\306\035" +
    "\255\037\260\040\301\041\276\042\250\043\272\044\274" +
    "\045\305\046\271\047\251\050\315\051\265\052\252\053" +
    "\254\054\304\055\317\063\275\064\316\065\302\066\313" +
    "\067\257\070\uff79\074\311\075\uff79\076\277\077\312\100" +
    "\267\102\303\103\314\113\300\114\256\126\262\001\002" +
    "\000\122\004\uff81\006\uff81\007\uff81\011\uff81\030\uff81\031" +
    "\uff81\032\uff81\034\uff81\035\uff81\037\uff81\040\uff81\041\uff81" +
    "\042\uff81\043\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050" +
    "\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\063\uff81" +
    "\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81\074\uff81\075" +
    "\uff81\076\uff81\077\uff81\100\uff81\102\uff81\103\uff81\113\uff81" +
    "\114\uff81\126\uff81\001\002\000\122\004\uff59\006\310\007" +
    "\270\011\253\030\uff59\031\307\032\uff59\034\306\035\255" +
    "\037\260\040\301\041\276\042\250\043\272\044\274\045" +
    "\305\046\271\047\251\050\315\051\265\052\252\053\254" +
    "\054\304\055\317\063\275\064\316\065\302\066\313\067" +
    "\257\070\uff59\074\311\075\uff59\076\277\077\312\100\267" +
    "\102\303\103\314\113\300\114\256\126\262\001\002\000" +
    "\122\004\uff86\006\uff86\007\uff86\011\uff86\030\uff86\031\uff86" +
    "\032\uff86\034\uff86\035\uff86\037\uff86\040\uff86\041\uff86\042" +
    "\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86" +
    "\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86\063\uff86\064" +
    "\uff86\065\uff86\066\uff86\067\uff86\070\uff86\074\uff86\075\uff86" +
    "\076\uff86\077\uff86\100\uff86\102\uff86\103\uff86\113\uff86\114" +
    "\uff86\126\uff86\001\002\000\006\007\343\070\344\001\002" +
    "\000\112\006\310\007\270\011\253\031\307\034\306\035" +
    "\255\037\260\040\301\041\276\042\250\043\272\044\274" +
    "\045\305\046\271\047\251\050\315\051\265\052\252\053" +
    "\254\054\304\055\317\063\275\064\316\065\302\066\313" +
    "\067\257\070\uff4d\074\311\076\277\077\312\100\267\102" +
    "\303\103\314\113\300\114\256\126\262\001\002\000\056" +
    "\036\166\037\216\040\226\042\232\062\170\067\162\071" +
    "\234\072\176\073\165\115\163\116\227\117\233\120\210" +
    "\121\172\122\217\123\212\124\173\125\213\143\246\144" +
    "\230\145\211\146\164\001\002\000\122\004\uff85\006\uff85" +
    "\007\uff85\011\uff85\030\uff85\031\uff85\032\uff85\034\uff85\035" +
    "\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85" +
    "\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053" +
    "\uff85\054\uff85\055\uff85\063\uff85\064\uff85\065\uff85\066\uff85" +
    "\067\uff85\070\uff85\074\uff85\075\uff85\076\uff85\077\uff85\100" +
    "\uff85\102\uff85\103\uff85\113\uff85\114\uff85\126\uff85\001\002" +
    "\000\112\006\310\007\uff4c\011\253\031\307\034\306\035" +
    "\255\037\260\040\301\041\276\042\250\043\272\044\274" +
    "\045\305\046\271\047\251\050\315\051\265\052\252\053" +
    "\254\054\304\055\317\063\275\064\316\065\302\066\313" +
    "\067\257\070\uff4c\074\311\076\277\077\312\100\267\102" +
    "\303\103\314\113\300\114\256\126\262\001\002\000\122" +
    "\004\uff80\006\uff80\007\uff80\011\uff80\030\uff80\031\307\032" +
    "\uff80\034\uff80\035\255\037\uff80\040\301\041\uff80\042\250" +
    "\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\315\051" +
    "\265\052\252\053\254\054\304\055\317\063\275\064\316" +
    "\065\302\066\313\067\uff80\070\uff80\074\311\075\uff80\076" +
    "\277\077\312\100\267\102\303\103\314\113\300\114\256" +
    "\126\uff80\001\002\000\122\004\uffa3\006\uffa3\007\uffa3\011" +
    "\uffa3\030\uffa3\031\137\032\uffa3\034\uffa3\035\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\102\uffa3" +
    "\103\uffa3\113\uffa3\114\uffa3\126\uffa3\001\002\000\056\036" +
    "\166\037\216\040\226\042\232\062\170\067\162\071\234" +
    "\072\176\073\165\115\163\116\227\117\233\120\210\121" +
    "\172\122\217\123\212\124\173\125\213\143\246\144\230" +
    "\145\211\146\164\001\002\000\112\006\310\007\270\011" +
    "\253\031\307\032\352\034\306\035\255\037\260\040\301" +
    "\041\276\042\250\043\272\044\274\045\305\046\271\047" +
    "\251\050\315\051\265\052\252\053\254\054\304\055\317" +
    "\063\275\064\316\065\302\066\313\067\257\074\311\076" +
    "\277\077\312\100\267\102\303\103\314\113\300\114\256" +
    "\126\262\001\002\000\122\004\uff4b\006\uff4b\007\uff4b\011" +
    "\uff4b\030\uff4b\031\uff4b\032\uff4b\034\uff4b\035\uff4b\037\uff4b" +
    "\040\uff4b\041\uff4b\042\uff4b\043\uff4b\044\uff4b\045\uff4b\046" +
    "\uff4b\047\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\054\uff4b" +
    "\055\uff4b\063\uff4b\064\uff4b\065\uff4b\066\uff4b\067\uff4b\070" +
    "\uff4b\074\uff4b\075\uff4b\076\uff4b\077\uff4b\100\uff4b\102\uff4b" +
    "\103\uff4b\113\uff4b\114\uff4b\126\uff4b\001\002\000\122\004" +
    "\uff51\006\uff51\007\uff51\011\uff51\030\uff51\031\uff51\032\uff51" +
    "\034\uff51\035\uff51\037\uff51\040\uff51\041\uff51\042\uff51\043" +
    "\uff51\044\uff51\045\uff51\046\uff51\047\uff51\050\uff51\051\uff51" +
    "\052\uff51\053\uff51\054\uff51\055\uff51\063\uff51\064\uff51\065" +
    "\uff51\066\uff51\067\uff51\070\uff51\074\uff51\075\uff51\076\uff51" +
    "\077\uff51\100\uff51\102\uff51\103\uff51\113\uff51\114\uff51\126" +
    "\uff51\001\002\000\060\036\166\037\216\040\226\042\232" +
    "\062\170\067\162\070\uff4e\071\234\072\176\073\165\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\143\246\144\230\145\211\146\164\001" +
    "\002\000\006\007\343\070\uff4f\001\002\000\004\070\357" +
    "\001\002\000\122\004\uff52\006\uff52\007\uff52\011\uff52\030" +
    "\uff52\031\uff52\032\uff52\034\uff52\035\uff52\037\uff52\040\uff52" +
    "\041\uff52\042\uff52\043\uff52\044\uff52\045\uff52\046\uff52\047" +
    "\uff52\050\uff52\051\uff52\052\uff52\053\uff52\054\uff52\055\uff52" +
    "\063\uff52\064\uff52\065\uff52\066\uff52\067\uff52\070\uff52\074" +
    "\uff52\075\uff52\076\uff52\077\uff52\100\uff52\102\uff52\103\uff52" +
    "\113\uff52\114\uff52\126\uff52\001\002\000\122\004\uff7d\006" +
    "\uff7d\007\uff7d\011\uff7d\030\uff7d\031\307\032\uff7d\034\uff7d" +
    "\035\uff7d\037\uff7d\040\301\041\uff7d\042\250\043\uff7d\044" +
    "\uff7d\045\uff7d\046\uff7d\047\uff7d\050\315\051\265\052\252" +
    "\053\254\054\304\055\317\063\275\064\316\065\302\066" +
    "\313\067\uff7d\070\uff7d\074\311\075\uff7d\076\277\077\312" +
    "\100\267\102\303\103\314\113\300\114\256\126\uff7d\001" +
    "\002\000\122\004\uff7c\006\uff7c\007\uff7c\011\uff7c\030\uff7c" +
    "\031\307\032\uff7c\034\uff7c\035\uff7c\037\uff7c\040\301\041" +
    "\uff7c\042\250\043\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c" +
    "\050\315\051\265\052\252\053\254\054\304\055\317\063" +
    "\275\064\316\065\302\066\313\067\uff7c\070\uff7c\074\311" +
    "\075\uff7c\076\277\077\312\100\267\102\303\103\314\113" +
    "\300\114\256\126\uff7c\001\002\000\056\036\166\037\216" +
    "\040\226\042\232\062\170\067\162\071\234\072\176\073" +
    "\165\115\163\116\227\117\233\120\210\121\172\122\217" +
    "\123\212\124\173\125\213\143\246\144\230\145\211\146" +
    "\164\001\002\000\112\006\310\007\270\011\253\031\307" +
    "\034\306\035\255\037\260\040\301\041\276\042\250\043" +
    "\272\044\274\045\305\046\271\047\251\050\315\051\265" +
    "\052\252\053\254\054\304\055\317\063\275\064\316\065" +
    "\302\066\313\067\257\070\364\074\311\076\277\077\312" +
    "\100\267\102\303\103\314\113\300\114\256\126\262\001" +
    "\002\000\152\004\152\015\036\016\041\017\033\020\040" +
    "\021\047\022\045\023\034\024\222\025\043\026\037\027" +
    "\145\036\166\037\216\040\226\042\232\056\203\057\156" +
    "\060\206\061\224\062\170\067\162\071\234\072\176\073" +
    "\165\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea" +
    "\112\uffea\115\163\116\227\117\233\120\210\121\172\122" +
    "\217\123\212\124\173\125\213\127\225\131\201\132\177" +
    "\133\202\134\204\137\200\143\147\144\230\145\211\146" +
    "\164\147\uffea\001\002\000\166\004\uff3d\015\uff3d\016\uff3d" +
    "\017\uff3d\020\uff3d\021\uff3d\022\uff3d\023\uff3d\024\uff3d\025" +
    "\uff3d\026\uff3d\027\uff3d\030\uff3d\036\uff3d\037\uff3d\040\uff3d" +
    "\042\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d\062\uff3d\067" +
    "\uff3d\071\uff3d\072\uff3d\073\uff3d\104\uff3d\105\uff3d\106\uff3d" +
    "\107\uff3d\110\uff3d\111\uff3d\112\uff3d\115\uff3d\116\uff3d\117" +
    "\uff3d\120\uff3d\121\uff3d\122\uff3d\123\uff3d\124\uff3d\125\uff3d" +
    "\127\uff3d\130\366\131\uff3d\132\uff3d\133\uff3d\134\uff3d\135" +
    "\uff3d\136\uff3d\137\uff3d\140\uff3d\141\uff3d\143\uff3d\144\uff3d" +
    "\145\uff3d\146\uff3d\147\uff3d\001\002\000\152\004\152\015" +
    "\036\016\041\017\033\020\040\021\047\022\045\023\034" +
    "\024\222\025\043\026\037\027\145\036\166\037\216\040" +
    "\226\042\232\056\203\057\156\060\206\061\224\062\170" +
    "\067\162\071\234\072\176\073\165\104\uffea\105\uffea\106" +
    "\uffea\107\uffea\110\uffea\111\uffea\112\uffea\115\163\116\227" +
    "\117\233\120\210\121\172\122\217\123\212\124\173\125" +
    "\213\127\225\131\201\132\177\133\202\134\204\137\200" +
    "\143\147\144\230\145\211\146\164\147\uffea\001\002\000" +
    "\166\004\uff3f\015\uff3f\016\uff3f\017\uff3f\020\uff3f\021\uff3f" +
    "\022\uff3f\023\uff3f\024\uff3f\025\uff3f\026\uff3f\027\uff3f\030" +
    "\uff3f\036\uff3f\037\uff3f\040\uff3f\042\uff3f\056\uff3f\057\uff3f" +
    "\060\uff3f\061\uff3f\062\uff3f\067\uff3f\071\uff3f\072\uff3f\073" +
    "\uff3f\104\uff3f\105\uff3f\106\uff3f\107\uff3f\110\uff3f\111\uff3f" +
    "\112\uff3f\115\uff3f\116\uff3f\117\uff3f\120\uff3f\121\uff3f\122" +
    "\uff3f\123\uff3f\124\uff3f\125\uff3f\127\uff3f\130\uff3f\131\uff3f" +
    "\132\uff3f\133\uff3f\134\uff3f\135\uff3f\136\uff3f\137\uff3f\140" +
    "\uff3f\141\uff3f\143\uff3f\144\uff3f\145\uff3f\146\uff3f\147\uff3f" +
    "\001\002\000\166\004\uff3e\015\uff3e\016\uff3e\017\uff3e\020" +
    "\uff3e\021\uff3e\022\uff3e\023\uff3e\024\uff3e\025\uff3e\026\uff3e" +
    "\027\uff3e\030\uff3e\036\uff3e\037\uff3e\040\uff3e\042\uff3e\056" +
    "\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\067\uff3e\071\uff3e" +
    "\072\uff3e\073\uff3e\104\uff3e\105\uff3e\106\uff3e\107\uff3e\110" +
    "\uff3e\111\uff3e\112\uff3e\115\uff3e\116\uff3e\117\uff3e\120\uff3e" +
    "\121\uff3e\122\uff3e\123\uff3e\124\uff3e\125\uff3e\127\uff3e\130" +
    "\uff3e\131\uff3e\132\uff3e\133\uff3e\134\uff3e\135\uff3e\136\uff3e" +
    "\137\uff3e\140\uff3e\141\uff3e\143\uff3e\144\uff3e\145\uff3e\146" +
    "\uff3e\147\uff3e\001\002\000\166\004\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\042\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\067" +
    "\uffb1\071\uffb1\072\uffb1\073\uffb1\104\uffb1\105\uffb1\106\uffb1" +
    "\107\uffb1\110\uffb1\111\uffb1\112\uffb1\115\uffb1\116\uffb1\117" +
    "\uffb1\120\uffb1\121\uffb1\122\uffb1\123\uffb1\124\uffb1\125\uffb1" +
    "\127\uffb1\130\uffb1\131\uffb1\132\uffb1\133\uffb1\134\uffb1\135" +
    "\uffb1\136\uffb1\137\uffb1\140\uffb1\141\uffb1\143\uffb1\144\uffb1" +
    "\145\uffb1\146\uffb1\147\uffb1\001\002\000\004\004\373\001" +
    "\002\000\166\004\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\036\uffb0\037\uffb0\040\uffb0\042\uffb0\056\uffb0" +
    "\057\uffb0\060\uffb0\061\uffb0\062\uffb0\067\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0" +
    "\111\uffb0\112\uffb0\115\uffb0\116\uffb0\117\uffb0\120\uffb0\121" +
    "\uffb0\122\uffb0\123\uffb0\124\uffb0\125\uffb0\127\uffb0\130\uffb0" +
    "\131\uffb0\132\uffb0\133\uffb0\134\uffb0\135\uffb0\136\uffb0\137" +
    "\uffb0\140\uffb0\141\uffb0\143\uffb0\144\uffb0\145\uffb0\146\uffb0" +
    "\147\uffb0\001\002\000\154\004\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\036\uffc8\037\uffc8\040\uffc8\042" +
    "\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\067\uffc8" +
    "\071\uffc8\072\uffc8\073\uffc8\104\uffc8\105\uffc8\106\uffc8\107" +
    "\uffc8\110\uffc8\111\uffc8\112\uffc8\115\uffc8\116\uffc8\117\uffc8" +
    "\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8\127" +
    "\uffc8\131\uffc8\132\uffc8\133\uffc8\134\uffc8\137\uffc8\143\uffc8" +
    "\144\uffc8\145\uffc8\146\uffc8\147\uffc8\001\002\000\056\036" +
    "\166\037\216\040\226\042\232\062\170\067\162\071\234" +
    "\072\176\073\165\115\163\116\227\117\233\120\210\121" +
    "\172\122\217\123\212\124\173\125\213\143\246\144\230" +
    "\145\211\146\164\001\002\000\112\006\310\007\270\011" +
    "\253\031\307\034\306\035\255\037\260\040\301\041\276" +
    "\042\250\043\272\044\274\045\305\046\271\047\251\050" +
    "\315\051\265\052\252\053\254\054\304\055\317\063\275" +
    "\064\316\065\302\066\313\067\257\070\377\074\311\076" +
    "\277\077\312\100\267\102\303\103\314\113\300\114\256" +
    "\126\262\001\002\000\152\004\152\015\036\016\041\017" +
    "\033\020\040\021\047\022\045\023\034\024\222\025\043" +
    "\026\037\027\145\036\166\037\216\040\226\042\232\056" +
    "\203\057\156\060\206\061\224\062\170\067\162\071\234" +
    "\072\176\073\165\104\uffea\105\uffea\106\uffea\107\uffea\110" +
    "\uffea\111\uffea\112\uffea\115\163\116\227\117\233\120\210" +
    "\121\172\122\217\123\212\124\173\125\213\127\225\131" +
    "\201\132\177\133\202\134\204\137\200\143\147\144\230" +
    "\145\211\146\164\147\uffea\001\002\000\166\004\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\042\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\067\uffbe\071\uffbe\072\uffbe\073\uffbe\104\uffbe\105" +
    "\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\115\uffbe" +
    "\116\uffbe\117\uffbe\120\uffbe\121\uffbe\122\uffbe\123\uffbe\124" +
    "\uffbe\125\uffbe\127\uffbe\130\uffbe\131\uffbe\132\uffbe\133\uffbe" +
    "\134\uffbe\135\uffbe\136\uffbe\137\uffbe\140\uffbe\141\uffbe\143" +
    "\uffbe\144\uffbe\145\uffbe\146\uffbe\147\uffbe\001\002\000\166" +
    "\004\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\042\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\067\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112" +
    "\uffc6\115\uffc6\116\uffc6\117\uffc6\120\uffc6\121\uffc6\122\uffc6" +
    "\123\uffc6\124\uffc6\125\uffc6\127\uffc6\130\uffc6\131\uffc6\132" +
    "\uffc6\133\uffc6\134\uffc6\135\uffc6\136\uffc6\137\uffc6\140\uffc6" +
    "\141\uffc6\143\uffc6\144\uffc6\145\uffc6\146\uffc6\147\uffc6\001" +
    "\002\000\122\004\uff7e\006\310\007\270\011\253\030\uff7e" +
    "\031\307\032\uff7e\034\306\035\255\037\uff7e\040\301\041" +
    "\uff7e\042\250\043\272\044\274\045\305\046\271\047\251" +
    "\050\315\051\265\052\252\053\254\054\304\055\317\063" +
    "\275\064\316\065\302\066\313\067\257\070\uff7e\074\311" +
    "\075\uff7e\076\277\077\312\100\267\102\303\103\314\113" +
    "\300\114\256\126\262\001\002\000\004\143\u0105\001\002" +
    "\000\006\004\uff9f\007\uff9f\001\002\000\012\004\uffa3\007" +
    "\uffa3\031\137\033\uffa3\001\002\000\006\004\u0108\007\u0107" +
    "\001\002\000\004\143\u0105\001\002\000\166\004\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\042\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf" +
    "\062\uffaf\067\uffaf\071\uffaf\072\uffaf\073\uffaf\104\uffaf\105" +
    "\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\112\uffaf\115\uffaf" +
    "\116\uffaf\117\uffaf\120\uffaf\121\uffaf\122\uffaf\123\uffaf\124" +
    "\uffaf\125\uffaf\127\uffaf\130\uffaf\131\uffaf\132\uffaf\133\uffaf" +
    "\134\uffaf\135\uffaf\136\uffaf\137\uffaf\140\uffaf\141\uffaf\143" +
    "\uffaf\144\uffaf\145\uffaf\146\uffaf\147\uffaf\001\002\000\006" +
    "\004\uff9e\007\uff9e\001\002\000\010\004\uff9b\007\uff9b\033" +
    "\u010b\001\002\000\060\027\u0110\036\166\037\216\040\226" +
    "\042\232\062\170\067\162\071\234\072\176\073\165\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\143\246\144\230\145\211\146\164\001" +
    "\002\000\006\004\uff9d\007\uff9d\001\002\000\114\004\uff9a" +
    "\006\310\007\270\011\253\030\uff9a\031\307\034\306\035" +
    "\255\037\260\040\301\041\276\042\250\043\272\044\274" +
    "\045\305\046\271\047\251\050\315\051\265\052\252\053" +
    "\254\054\304\055\317\063\275\064\316\065\302\066\313" +
    "\067\257\074\311\076\277\077\312\100\267\102\303\103" +
    "\314\113\300\114\256\126\262\001\002\000\006\004\uff9c" +
    "\007\uff9c\001\002\000\010\004\uff99\007\uff99\030\uff99\001" +
    "\002\000\062\027\u0110\030\u0113\036\166\037\216\040\226" +
    "\042\232\062\170\067\162\071\234\072\176\073\165\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\143\246\144\230\145\211\146\164\001" +
    "\002\000\006\007\u0114\030\u0115\001\002\000\006\007\uff95" +
    "\030\uff95\001\002\000\010\004\uff96\007\uff96\030\uff96\001" +
    "\002\000\062\027\u0110\030\u0117\036\166\037\216\040\226" +
    "\042\232\062\170\067\162\071\234\072\176\073\165\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\143\246\144\230\145\211\146\164\001" +
    "\002\000\010\004\uff97\007\uff97\030\uff97\001\002\000\006" +
    "\007\uff94\030\uff94\001\002\000\010\004\uff98\007\uff98\030" +
    "\uff98\001\002\000\166\004\uffb3\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\027\uffb3\030\uffb3\036\uffb3\037\uffb3\040\uffb3\042\uffb3" +
    "\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\067\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3" +
    "\110\uffb3\111\uffb3\112\uffb3\115\uffb3\116\uffb3\117\uffb3\120" +
    "\uffb3\121\uffb3\122\uffb3\123\uffb3\124\uffb3\125\uffb3\127\uffb3" +
    "\130\uffb3\131\uffb3\132\uffb3\133\uffb3\134\uffb3\135\uffb3\136" +
    "\uffb3\137\uffb3\140\uffb3\141\uffb3\143\uffb3\144\uffb3\145\uffb3" +
    "\146\uffb3\147\uffb3\001\002\000\004\004\u011a\001\002\000" +
    "\166\004\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\042\uffb2\056\uffb2\057\uffb2" +
    "\060\uffb2\061\uffb2\062\uffb2\067\uffb2\071\uffb2\072\uffb2\073" +
    "\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2" +
    "\112\uffb2\115\uffb2\116\uffb2\117\uffb2\120\uffb2\121\uffb2\122" +
    "\uffb2\123\uffb2\124\uffb2\125\uffb2\127\uffb2\130\uffb2\131\uffb2" +
    "\132\uffb2\133\uffb2\134\uffb2\135\uffb2\136\uffb2\137\uffb2\140" +
    "\uffb2\141\uffb2\143\uffb2\144\uffb2\145\uffb2\146\uffb2\147\uffb2" +
    "\001\002\000\166\004\uff30\015\uff30\016\uff30\017\uff30\020" +
    "\uff30\021\uff30\022\uff30\023\uff30\024\uff30\025\uff30\026\uff30" +
    "\027\uff30\030\uff30\036\uff30\037\uff30\040\uff30\042\uff30\056" +
    "\uff30\057\uff30\060\uff30\061\uff30\062\uff30\067\uff30\071\uff30" +
    "\072\uff30\073\uff30\104\uff30\105\uff30\106\uff30\107\uff30\110" +
    "\uff30\111\uff30\112\uff30\115\uff30\116\uff30\117\uff30\120\uff30" +
    "\121\uff30\122\uff30\123\uff30\124\uff30\125\uff30\127\uff30\130" +
    "\uff30\131\uff30\132\uff30\133\uff30\134\uff30\135\u011f\136\u011e" +
    "\137\uff30\140\uff30\141\uff30\143\uff30\144\uff30\145\uff30\146" +
    "\uff30\147\uff30\001\002\000\166\004\uff33\015\uff33\016\uff33" +
    "\017\uff33\020\uff33\021\uff33\022\uff33\023\uff33\024\uff33\025" +
    "\uff33\026\uff33\027\uff33\030\uff33\036\uff33\037\uff33\040\uff33" +
    "\042\uff33\056\uff33\057\uff33\060\uff33\061\uff33\062\uff33\067" +
    "\uff33\071\uff33\072\uff33\073\uff33\104\uff33\105\uff33\106\uff33" +
    "\107\uff33\110\uff33\111\uff33\112\uff33\115\uff33\116\uff33\117" +
    "\uff33\120\uff33\121\uff33\122\uff33\123\uff33\124\uff33\125\uff33" +
    "\127\uff33\130\uff33\131\uff33\132\uff33\133\uff33\134\uff33\135" +
    "\uff33\136\uff33\137\uff33\140\uff33\141\uff33\143\uff33\144\uff33" +
    "\145\uff33\146\uff33\147\uff33\001\002\000\166\004\uff34\015" +
    "\uff34\016\uff34\017\uff34\020\uff34\021\uff34\022\uff34\023\uff34" +
    "\024\uff34\025\uff34\026\uff34\027\uff34\030\uff34\036\uff34\037" +
    "\uff34\040\uff34\042\uff34\056\uff34\057\uff34\060\uff34\061\uff34" +
    "\062\uff34\067\uff34\071\uff34\072\uff34\073\uff34\104\uff34\105" +
    "\uff34\106\uff34\107\uff34\110\uff34\111\uff34\112\uff34\115\uff34" +
    "\116\uff34\117\uff34\120\uff34\121\uff34\122\uff34\123\uff34\124" +
    "\uff34\125\uff34\127\uff34\130\uff34\131\uff34\132\uff34\133\uff34" +
    "\134\uff34\135\uff34\136\uff34\137\uff34\140\uff34\141\uff34\143" +
    "\uff34\144\uff34\145\uff34\146\uff34\147\uff34\001\002\000\152" +
    "\004\152\015\036\016\041\017\033\020\040\021\047\022" +
    "\045\023\034\024\222\025\043\026\037\027\145\036\166" +
    "\037\216\040\226\042\232\056\203\057\156\060\206\061" +
    "\224\062\170\067\162\071\234\072\176\073\165\104\uffea" +
    "\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\127\225\131\201\132\177\133\202\134" +
    "\204\137\200\143\147\144\230\145\211\146\164\147\uffea" +
    "\001\002\000\004\067\u0120\001\002\000\024\104\121\105" +
    "\124\106\122\107\112\110\123\111\113\112\115\143\013" +
    "\147\114\001\002\000\004\070\u0122\001\002\000\152\004" +
    "\152\015\036\016\041\017\033\020\040\021\047\022\045" +
    "\023\034\024\222\025\043\026\037\027\145\036\166\037" +
    "\216\040\226\042\232\056\203\057\156\060\206\061\224" +
    "\062\170\067\162\071\234\072\176\073\165\104\uffea\105" +
    "\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\115\163" +
    "\116\227\117\233\120\210\121\172\122\217\123\212\124" +
    "\173\125\213\127\225\131\201\132\177\133\202\134\204" +
    "\137\200\143\147\144\230\145\211\146\164\147\uffea\001" +
    "\002\000\166\004\uff32\015\uff32\016\uff32\017\uff32\020\uff32" +
    "\021\uff32\022\uff32\023\uff32\024\uff32\025\uff32\026\uff32\027" +
    "\uff32\030\uff32\036\uff32\037\uff32\040\uff32\042\uff32\056\uff32" +
    "\057\uff32\060\uff32\061\uff32\062\uff32\067\uff32\071\uff32\072" +
    "\uff32\073\uff32\104\uff32\105\uff32\106\uff32\107\uff32\110\uff32" +
    "\111\uff32\112\uff32\115\uff32\116\uff32\117\uff32\120\uff32\121" +
    "\uff32\122\uff32\123\uff32\124\uff32\125\uff32\127\uff32\130\uff32" +
    "\131\uff32\132\uff32\133\uff32\134\uff32\135\uff32\136\uff32\137" +
    "\uff32\140\uff32\141\uff32\143\uff32\144\uff32\145\uff32\146\uff32" +
    "\147\uff32\001\002\000\166\004\uff31\015\uff31\016\uff31\017" +
    "\uff31\020\uff31\021\uff31\022\uff31\023\uff31\024\uff31\025\uff31" +
    "\026\uff31\027\uff31\030\uff31\036\uff31\037\uff31\040\uff31\042" +
    "\uff31\056\uff31\057\uff31\060\uff31\061\uff31\062\uff31\067\uff31" +
    "\071\uff31\072\uff31\073\uff31\104\uff31\105\uff31\106\uff31\107" +
    "\uff31\110\uff31\111\uff31\112\uff31\115\uff31\116\uff31\117\uff31" +
    "\120\uff31\121\uff31\122\uff31\123\uff31\124\uff31\125\uff31\127" +
    "\uff31\130\uff31\131\uff31\132\uff31\133\uff31\134\uff31\135\uff31" +
    "\136\uff31\137\uff31\140\uff31\141\uff31\143\uff31\144\uff31\145" +
    "\uff31\146\uff31\147\uff31\001\002\000\004\004\u0129\001\002" +
    "\000\112\004\uffb5\006\310\007\270\011\253\031\307\034" +
    "\306\035\255\037\260\040\301\041\276\042\250\043\272" +
    "\044\274\045\305\046\271\047\251\050\315\051\265\052" +
    "\252\053\254\054\304\055\317\063\275\064\316\065\302" +
    "\066\313\067\257\074\311\076\277\077\312\100\267\102" +
    "\303\103\314\113\300\114\256\126\262\001\002\000\004" +
    "\004\u0128\001\002\000\166\004\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\036\uffb4\037\uffb4\040\uffb4\042" +
    "\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\067\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\104\uffb4\105\uffb4\106\uffb4\107" +
    "\uffb4\110\uffb4\111\uffb4\112\uffb4\115\uffb4\116\uffb4\117\uffb4" +
    "\120\uffb4\121\uffb4\122\uffb4\123\uffb4\124\uffb4\125\uffb4\127" +
    "\uffb4\130\uffb4\131\uffb4\132\uffb4\133\uffb4\134\uffb4\135\uffb4" +
    "\136\uffb4\137\uffb4\140\uffb4\141\uffb4\143\uffb4\144\uffb4\145" +
    "\uffb4\146\uffb4\147\uffb4\001\002\000\166\004\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\042\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\062" +
    "\uffb6\067\uffb6\071\uffb6\072\uffb6\073\uffb6\104\uffb6\105\uffb6" +
    "\106\uffb6\107\uffb6\110\uffb6\111\uffb6\112\uffb6\115\uffb6\116" +
    "\uffb6\117\uffb6\120\uffb6\121\uffb6\122\uffb6\123\uffb6\124\uffb6" +
    "\125\uffb6\127\uffb6\130\uffb6\131\uffb6\132\uffb6\133\uffb6\134" +
    "\uffb6\135\uffb6\136\uffb6\137\uffb6\140\uffb6\141\uffb6\143\uffb6" +
    "\144\uffb6\145\uffb6\146\uffb6\147\uffb6\001\002\000\124\004" +
    "\u012b\015\036\016\041\017\033\020\040\021\047\022\045" +
    "\023\034\024\050\025\043\026\037\036\166\037\216\040" +
    "\226\042\232\062\170\067\162\071\234\072\176\073\165" +
    "\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112" +
    "\uffea\115\163\116\227\117\233\120\210\121\172\122\217" +
    "\123\212\124\173\125\213\143\246\144\230\145\211\146" +
    "\164\147\uffea\001\002\000\060\004\uff37\036\uff37\037\uff37" +
    "\040\uff37\042\uff37\062\uff37\067\uff37\071\uff37\072\uff37\073" +
    "\uff37\115\uff37\116\uff37\117\uff37\120\uff37\121\uff37\122\uff37" +
    "\123\uff37\124\uff37\125\uff37\143\uff37\144\uff37\145\uff37\146" +
    "\uff37\001\002\000\060\004\uff39\036\uff39\037\uff39\040\uff39" +
    "\042\uff39\062\uff39\067\uff39\071\uff39\072\uff39\073\uff39\115" +
    "\uff39\116\uff39\117\uff39\120\uff39\121\uff39\122\uff39\123\uff39" +
    "\124\uff39\125\uff39\143\uff39\144\uff39\145\uff39\146\uff39\001" +
    "\002\000\112\004\u0136\006\310\007\270\011\253\031\307" +
    "\034\306\035\255\037\260\040\301\041\276\042\250\043" +
    "\272\044\274\045\305\046\271\047\251\050\315\051\265" +
    "\052\252\053\254\054\304\055\317\063\275\064\316\065" +
    "\302\066\313\067\257\074\311\076\277\077\312\100\267" +
    "\102\303\103\314\113\300\114\256\126\262\001\002\000" +
    "\060\004\uff35\036\166\037\216\040\226\042\232\062\170" +
    "\067\162\071\234\072\176\073\165\115\163\116\227\117" +
    "\233\120\210\121\172\122\217\123\212\124\173\125\213" +
    "\143\246\144\230\145\211\146\164\001\002\000\004\004" +
    "\u0131\001\002\000\112\004\uff36\006\310\007\270\011\253" +
    "\031\307\034\306\035\255\037\260\040\301\041\276\042" +
    "\250\043\272\044\274\045\305\046\271\047\251\050\315" +
    "\051\265\052\252\053\254\054\304\055\317\063\275\064" +
    "\316\065\302\066\313\067\257\074\311\076\277\077\312" +
    "\100\267\102\303\103\314\113\300\114\256\126\262\001" +
    "\002\000\060\004\uff35\036\166\037\216\040\226\042\232" +
    "\062\170\067\162\071\234\072\176\073\165\115\163\116" +
    "\227\117\233\120\210\121\172\122\217\123\212\124\173" +
    "\125\213\143\246\144\230\145\211\146\164\001\002\000" +
    "\004\004\u0133\001\002\000\004\070\u0134\001\002\000\152" +
    "\004\152\015\036\016\041\017\033\020\040\021\047\022" +
    "\045\023\034\024\222\025\043\026\037\027\145\036\166" +
    "\037\216\040\226\042\232\056\203\057\156\060\206\061" +
    "\224\062\170\067\162\071\234\072\176\073\165\104\uffea" +
    "\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112\uffea\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\127\225\131\201\132\177\133\202\134" +
    "\204\137\200\143\147\144\230\145\211\146\164\147\uffea" +
    "\001\002\000\166\004\uff3a\015\uff3a\016\uff3a\017\uff3a\020" +
    "\uff3a\021\uff3a\022\uff3a\023\uff3a\024\uff3a\025\uff3a\026\uff3a" +
    "\027\uff3a\030\uff3a\036\uff3a\037\uff3a\040\uff3a\042\uff3a\056" +
    "\uff3a\057\uff3a\060\uff3a\061\uff3a\062\uff3a\067\uff3a\071\uff3a" +
    "\072\uff3a\073\uff3a\104\uff3a\105\uff3a\106\uff3a\107\uff3a\110" +
    "\uff3a\111\uff3a\112\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a" +
    "\121\uff3a\122\uff3a\123\uff3a\124\uff3a\125\uff3a\127\uff3a\130" +
    "\uff3a\131\uff3a\132\uff3a\133\uff3a\134\uff3a\135\uff3a\136\uff3a" +
    "\137\uff3a\140\uff3a\141\uff3a\143\uff3a\144\uff3a\145\uff3a\146" +
    "\uff3a\147\uff3a\001\002\000\060\004\uff38\036\uff38\037\uff38" +
    "\040\uff38\042\uff38\062\uff38\067\uff38\071\uff38\072\uff38\073" +
    "\uff38\115\uff38\116\uff38\117\uff38\120\uff38\121\uff38\122\uff38" +
    "\123\uff38\124\uff38\125\uff38\143\uff38\144\uff38\145\uff38\146" +
    "\uff38\001\002\000\004\132\u0138\001\002\000\004\067\u0139" +
    "\001\002\000\056\036\166\037\216\040\226\042\232\062" +
    "\170\067\162\071\234\072\176\073\165\115\163\116\227" +
    "\117\233\120\210\121\172\122\217\123\212\124\173\125" +
    "\213\143\246\144\230\145\211\146\164\001\002\000\112" +
    "\006\310\007\270\011\253\031\307\034\306\035\255\037" +
    "\260\040\301\041\276\042\250\043\272\044\274\045\305" +
    "\046\271\047\251\050\315\051\265\052\252\053\254\054" +
    "\304\055\317\063\275\064\316\065\302\066\313\067\257" +
    "\070\u013b\074\311\076\277\077\312\100\267\102\303\103" +
    "\314\113\300\114\256\126\262\001\002\000\004\004\u013c" +
    "\001\002\000\166\004\uff3c\015\uff3c\016\uff3c\017\uff3c\020" +
    "\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c\025\uff3c\026\uff3c" +
    "\027\uff3c\030\uff3c\036\uff3c\037\uff3c\040\uff3c\042\uff3c\056" +
    "\uff3c\057\uff3c\060\uff3c\061\uff3c\062\uff3c\067\uff3c\071\uff3c" +
    "\072\uff3c\073\uff3c\104\uff3c\105\uff3c\106\uff3c\107\uff3c\110" +
    "\uff3c\111\uff3c\112\uff3c\115\uff3c\116\uff3c\117\uff3c\120\uff3c" +
    "\121\uff3c\122\uff3c\123\uff3c\124\uff3c\125\uff3c\127\uff3c\130" +
    "\uff3c\131\uff3c\132\uff3c\133\uff3c\134\uff3c\135\uff3c\136\uff3c" +
    "\137\uff3c\140\uff3c\141\uff3c\143\uff3c\144\uff3c\145\uff3c\146" +
    "\uff3c\147\uff3c\001\002\000\056\036\166\037\216\040\226" +
    "\042\232\062\170\067\162\071\234\072\176\073\165\115" +
    "\163\116\227\117\233\120\210\121\172\122\217\123\212" +
    "\124\173\125\213\143\246\144\230\145\211\146\164\001" +
    "\002\000\112\006\310\007\270\011\253\031\307\034\306" +
    "\035\255\037\260\040\301\041\276\042\250\043\272\044" +
    "\274\045\305\046\271\047\251\050\315\051\265\052\252" +
    "\053\254\054\304\055\317\063\275\064\316\065\302\066" +
    "\313\067\257\070\u013f\074\311\076\277\077\312\100\267" +
    "\102\303\103\314\113\300\114\256\126\262\001\002\000" +
    "\004\027\u0140\001\002\000\160\004\152\015\036\016\041" +
    "\017\033\020\040\021\047\022\045\023\034\024\222\025" +
    "\043\026\037\027\145\030\uff2c\036\166\037\216\040\226" +
    "\042\232\056\203\057\156\060\206\061\224\062\170\067" +
    "\162\071\234\072\176\073\165\104\uffea\105\uffea\106\uffea" +
    "\107\uffea\110\uffea\111\uffea\112\uffea\115\163\116\227\117" +
    "\233\120\210\121\172\122\217\123\212\124\173\125\213" +
    "\127\225\131\201\132\177\133\202\134\204\137\200\140" +
    "\u0144\141\u0142\143\147\144\230\145\211\146\164\147\uffea" +
    "\001\002\000\160\004\uff2b\015\uff2b\016\uff2b\017\uff2b\020" +
    "\uff2b\021\uff2b\022\uff2b\023\uff2b\024\uff2b\025\uff2b\026\uff2b" +
    "\027\uff2b\030\uff2b\036\uff2b\037\uff2b\040\uff2b\042\uff2b\056" +
    "\uff2b\057\uff2b\060\uff2b\061\uff2b\062\uff2b\067\uff2b\071\uff2b" +
    "\072\uff2b\073\uff2b\104\uff2b\105\uff2b\106\uff2b\107\uff2b\110" +
    "\uff2b\111\uff2b\112\uff2b\115\uff2b\116\uff2b\117\uff2b\120\uff2b" +
    "\121\uff2b\122\uff2b\123\uff2b\124\uff2b\125\uff2b\127\uff2b\131" +
    "\uff2b\132\uff2b\133\uff2b\134\uff2b\137\uff2b\140\uff2b\141\uff2b" +
    "\143\uff2b\144\uff2b\145\uff2b\146\uff2b\147\uff2b\001\002\000" +
    "\004\075\u014b\001\002\000\160\004\152\015\036\016\041" +
    "\017\033\020\040\021\047\022\045\023\034\024\222\025" +
    "\043\026\037\027\145\030\uff2d\036\166\037\216\040\226" +
    "\042\232\056\203\057\156\060\206\061\224\062\170\067" +
    "\162\071\234\072\176\073\165\104\uffea\105\uffea\106\uffea" +
    "\107\uffea\110\uffea\111\uffea\112\uffea\115\163\116\227\117" +
    "\233\120\210\121\172\122\217\123\212\124\173\125\213" +
    "\127\225\131\201\132\177\133\202\134\204\137\200\140" +
    "\u0144\141\u0142\143\147\144\230\145\211\146\164\147\uffea" +
    "\001\002\000\056\036\166\037\216\040\226\042\232\062" +
    "\170\067\162\071\234\072\176\073\165\115\163\116\227" +
    "\117\233\120\210\121\172\122\217\123\212\124\173\125" +
    "\213\143\246\144\230\145\211\146\164\001\002\000\004" +
    "\030\u0147\001\002\000\160\004\uff27\015\uff27\016\uff27\017" +
    "\uff27\020\uff27\021\uff27\022\uff27\023\uff27\024\uff27\025\uff27" +
    "\026\uff27\027\uff27\030\uff27\036\uff27\037\uff27\040\uff27\042" +
    "\uff27\056\uff27\057\uff27\060\uff27\061\uff27\062\uff27\067\uff27" +
    "\071\uff27\072\uff27\073\uff27\104\uff27\105\uff27\106\uff27\107" +
    "\uff27\110\uff27\111\uff27\112\uff27\115\uff27\116\uff27\117\uff27" +
    "\120\uff27\121\uff27\122\uff27\123\uff27\124\uff27\125\uff27\127" +
    "\uff27\131\uff27\132\uff27\133\uff27\134\uff27\137\uff27\140\uff27" +
    "\141\uff27\143\uff27\144\uff27\145\uff27\146\uff27\147\uff27\001" +
    "\002\000\166\004\uff2e\015\uff2e\016\uff2e\017\uff2e\020\uff2e" +
    "\021\uff2e\022\uff2e\023\uff2e\024\uff2e\025\uff2e\026\uff2e\027" +
    "\uff2e\030\uff2e\036\uff2e\037\uff2e\040\uff2e\042\uff2e\056\uff2e" +
    "\057\uff2e\060\uff2e\061\uff2e\062\uff2e\067\uff2e\071\uff2e\072" +
    "\uff2e\073\uff2e\104\uff2e\105\uff2e\106\uff2e\107\uff2e\110\uff2e" +
    "\111\uff2e\112\uff2e\115\uff2e\116\uff2e\117\uff2e\120\uff2e\121" +
    "\uff2e\122\uff2e\123\uff2e\124\uff2e\125\uff2e\127\uff2e\130\uff2e" +
    "\131\uff2e\132\uff2e\133\uff2e\134\uff2e\135\uff2e\136\uff2e\137" +
    "\uff2e\140\uff2e\141\uff2e\143\uff2e\144\uff2e\145\uff2e\146\uff2e" +
    "\147\uff2e\001\002\000\112\006\310\007\270\011\253\031" +
    "\307\034\306\035\255\037\260\040\301\041\276\042\250" +
    "\043\272\044\274\045\305\046\271\047\251\050\315\051" +
    "\265\052\252\053\254\054\304\055\317\063\275\064\316" +
    "\065\302\066\313\067\257\074\311\075\u0149\076\277\077" +
    "\312\100\267\102\303\103\314\113\300\114\256\126\262" +
    "\001\002\000\160\004\uff29\015\uff29\016\uff29\017\uff29\020" +
    "\uff29\021\uff29\022\uff29\023\uff29\024\uff29\025\uff29\026\uff29" +
    "\027\uff29\030\uff29\036\uff29\037\uff29\040\uff29\042\uff29\056" +
    "\uff29\057\uff29\060\uff29\061\uff29\062\uff29\067\uff29\071\uff29" +
    "\072\uff29\073\uff29\104\uff29\105\uff29\106\uff29\107\uff29\110" +
    "\uff29\111\uff29\112\uff29\115\uff29\116\uff29\117\uff29\120\uff29" +
    "\121\uff29\122\uff29\123\uff29\124\uff29\125\uff29\127\uff29\131" +
    "\uff29\132\uff29\133\uff29\134\uff29\137\uff29\140\uff29\141\uff29" +
    "\143\uff29\144\uff29\145\uff29\146\uff29\147\uff29\001\002\000" +
    "\160\004\uff2a\015\uff2a\016\uff2a\017\uff2a\020\uff2a\021\uff2a" +
    "\022\uff2a\023\uff2a\024\uff2a\025\uff2a\026\uff2a\027\uff2a\030" +
    "\uff2a\036\uff2a\037\uff2a\040\uff2a\042\uff2a\056\uff2a\057\uff2a" +
    "\060\uff2a\061\uff2a\062\uff2a\067\uff2a\071\uff2a\072\uff2a\073" +
    "\uff2a\104\uff2a\105\uff2a\106\uff2a\107\uff2a\110\uff2a\111\uff2a" +
    "\112\uff2a\115\uff2a\116\uff2a\117\uff2a\120\uff2a\121\uff2a\122" +
    "\uff2a\123\uff2a\124\uff2a\125\uff2a\127\uff2a\131\uff2a\132\uff2a" +
    "\133\uff2a\134\uff2a\137\uff2a\140\uff2a\141\uff2a\143\uff2a\144" +
    "\uff2a\145\uff2a\146\uff2a\147\uff2a\001\002\000\160\004\uff28" +
    "\015\uff28\016\uff28\017\uff28\020\uff28\021\uff28\022\uff28\023" +
    "\uff28\024\uff28\025\uff28\026\uff28\027\uff28\030\uff28\036\uff28" +
    "\037\uff28\040\uff28\042\uff28\056\uff28\057\uff28\060\uff28\061" +
    "\uff28\062\uff28\067\uff28\071\uff28\072\uff28\073\uff28\104\uff28" +
    "\105\uff28\106\uff28\107\uff28\110\uff28\111\uff28\112\uff28\115" +
    "\uff28\116\uff28\117\uff28\120\uff28\121\uff28\122\uff28\123\uff28" +
    "\124\uff28\125\uff28\127\uff28\131\uff28\132\uff28\133\uff28\134" +
    "\uff28\137\uff28\140\uff28\141\uff28\143\uff28\144\uff28\145\uff28" +
    "\146\uff28\147\uff28\001\002\000\056\036\166\037\216\040" +
    "\226\042\232\062\170\067\162\071\234\072\176\073\165" +
    "\115\163\116\227\117\233\120\210\121\172\122\217\123" +
    "\212\124\173\125\213\143\246\144\230\145\211\146\164" +
    "\001\002\000\112\006\310\007\270\011\253\031\307\034" +
    "\306\035\255\037\260\040\301\041\276\042\250\043\272" +
    "\044\274\045\305\046\271\047\251\050\315\051\265\052" +
    "\252\053\254\054\304\055\317\063\275\064\316\065\302" +
    "\066\313\067\257\070\u014e\074\311\076\277\077\312\100" +
    "\267\102\303\103\314\113\300\114\256\126\262\001\002" +
    "\000\152\004\152\015\036\016\041\017\033\020\040\021" +
    "\047\022\045\023\034\024\222\025\043\026\037\027\145" +
    "\036\166\037\216\040\226\042\232\056\203\057\156\060" +
    "\206\061\224\062\170\067\162\071\234\072\176\073\165" +
    "\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\111\uffea\112" +
    "\uffea\115\163\116\227\117\233\120\210\121\172\122\217" +
    "\123\212\124\173\125\213\127\225\131\201\132\177\133" +
    "\202\134\204\137\200\143\147\144\230\145\211\146\164" +
    "\147\uffea\001\002\000\166\004\uff3b\015\uff3b\016\uff3b\017" +
    "\uff3b\020\uff3b\021\uff3b\022\uff3b\023\uff3b\024\uff3b\025\uff3b" +
    "\026\uff3b\027\uff3b\030\uff3b\036\uff3b\037\uff3b\040\uff3b\042" +
    "\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b\062\uff3b\067\uff3b" +
    "\071\uff3b\072\uff3b\073\uff3b\104\uff3b\105\uff3b\106\uff3b\107" +
    "\uff3b\110\uff3b\111\uff3b\112\uff3b\115\uff3b\116\uff3b\117\uff3b" +
    "\120\uff3b\121\uff3b\122\uff3b\123\uff3b\124\uff3b\125\uff3b\127" +
    "\uff3b\130\uff3b\131\uff3b\132\uff3b\133\uff3b\134\uff3b\135\uff3b" +
    "\136\uff3b\137\uff3b\140\uff3b\141\uff3b\143\uff3b\144\uff3b\145" +
    "\uff3b\146\uff3b\147\uff3b\001\002\000\122\004\uff5a\006\310" +
    "\007\270\011\253\030\uff5a\031\307\032\uff5a\034\306\035" +
    "\255\037\260\040\301\041\276\042\250\043\272\044\274" +
    "\045\305\046\271\047\251\050\315\051\265\052\252\053" +
    "\254\054\304\055\317\063\275\064\316\065\302\066\313" +
    "\067\257\070\uff5a\074\311\075\uff5a\076\277\077\312\100" +
    "\267\102\303\103\314\113\300\114\256\126\262\001\002" +
    "\000\166\004\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\056\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\067\uffcc\071\uffcc\072\uffcc" +
    "\073\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc\111" +
    "\uffcc\112\uffcc\115\uffcc\116\uffcc\117\uffcc\120\uffcc\121\uffcc" +
    "\122\uffcc\123\uffcc\124\uffcc\125\uffcc\127\uffcc\130\uffcc\131" +
    "\uffcc\132\uffcc\133\uffcc\134\uffcc\135\uffcc\136\uffcc\137\uffcc" +
    "\140\uffcc\141\uffcc\143\uffcc\144\uffcc\145\uffcc\146\uffcc\147" +
    "\uffcc\001\002\000\122\004\uff69\006\310\007\270\011\uff69" +
    "\030\uff69\031\307\032\uff69\034\uff69\035\255\037\uff69\040" +
    "\301\041\uff69\042\250\043\272\044\274\045\305\046\uff69" +
    "\047\251\050\315\051\265\052\252\053\254\054\304\055" +
    "\317\063\275\064\316\065\302\066\313\067\257\070\uff69" +
    "\074\311\075\uff69\076\277\077\312\100\267\102\303\103" +
    "\314\113\300\114\256\126\262\001\002\000\004\070\u0154" +
    "\001\002\000\056\036\166\037\216\040\226\042\232\062" +
    "\170\067\162\071\234\072\176\073\165\115\163\116\227" +
    "\117\233\120\210\121\172\122\217\123\212\124\173\125" +
    "\213\143\246\144\230\145\211\146\164\001\002\000\122" +
    "\004\uff54\006\310\007\270\011\253\030\uff54\031\307\032" +
    "\uff54\034\306\035\255\037\260\040\301\041\276\042\250" +
    "\043\272\044\274\045\305\046\271\047\251\050\315\051" +
    "\265\052\252\053\254\054\304\055\317\063\275\064\316" +
    "\065\302\066\313\067\257\070\uff54\074\311\075\uff54\076" +
    "\277\077\312\100\267\102\303\103\314\113\300\114\256" +
    "\126\262\001\002\000\112\004\u0157\006\310\007\270\011" +
    "\253\031\307\034\306\035\255\037\260\040\301\041\276" +
    "\042\250\043\272\044\274\045\305\046\271\047\251\050" +
    "\315\051\265\052\252\053\254\054\304\055\317\063\275" +
    "\064\316\065\302\066\313\067\257\074\311\076\277\077" +
    "\312\100\267\102\303\103\314\113\300\114\256\126\262" +
    "\001\002\000\166\004\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\067\uffbc\071\uffbc" +
    "\072\uffbc\073\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110" +
    "\uffbc\111\uffbc\112\uffbc\115\uffbc\116\uffbc\117\uffbc\120\uffbc" +
    "\121\uffbc\122\uffbc\123\uffbc\124\uffbc\125\uffbc\127\uffbc\130" +
    "\uffbc\131\uffbc\132\uffbc\133\uffbc\134\uffbc\135\uffbc\136\uffbc" +
    "\137\uffbc\140\uffbc\141\uffbc\143\uffbc\144\uffbc\145\uffbc\146" +
    "\uffbc\147\uffbc\001\002\000\152\004\152\015\036\016\041" +
    "\017\033\020\040\021\047\022\045\023\034\024\222\025" +
    "\043\026\037\027\145\036\166\037\216\040\226\042\232" +
    "\056\203\057\156\060\206\061\224\062\170\067\162\071" +
    "\234\072\176\073\165\104\uffea\105\uffea\106\uffea\107\uffea" +
    "\110\uffea\111\uffea\112\uffea\115\163\116\227\117\233\120" +
    "\210\121\172\122\217\123\212\124\173\125\213\127\225" +
    "\131\201\132\177\133\202\134\204\137\200\143\147\144" +
    "\230\145\211\146\164\147\uffea\001\002\000\166\004\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\042\uffbb\056\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\062\uffbb\067\uffbb\071\uffbb\072\uffbb\073\uffbb\104\uffbb" +
    "\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb\115" +
    "\uffbb\116\uffbb\117\uffbb\120\uffbb\121\uffbb\122\uffbb\123\uffbb" +
    "\124\uffbb\125\uffbb\127\uffbb\130\uffbb\131\uffbb\132\uffbb\133" +
    "\uffbb\134\uffbb\135\uffbb\136\uffbb\137\uffbb\140\uffbb\141\uffbb" +
    "\143\uffbb\144\uffbb\145\uffbb\146\uffbb\147\uffbb\001\002\000" +
    "\014\004\uffa3\007\uffa3\031\137\033\uffa3\067\uff22\001\002" +
    "\000\004\067\u015c\001\002\000\026\070\uff20\104\121\105" +
    "\124\106\122\107\112\110\123\111\113\112\115\143\013" +
    "\147\114\001\002\000\004\070\u015e\001\002\000\010\004" +
    "\uff21\027\uff21\031\uff21\001\002\000\006\070\uffae\143\uffae" +
    "\001\002\000\034\002\uffd5\012\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\142\uffd5\001\002\000\054\004\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\030\uffd1\104\uffd1\105\uffd1\106\uffd1\107" +
    "\uffd1\110\uffd1\111\uffd1\112\uffd1\143\uffd1\147\uffd1\001\002" +
    "\000\054\004\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd" +
    "\104\uffcd\105\uffcd\106\uffcd\107\uffcd\110\uffcd\111\uffcd\112" +
    "\uffcd\143\uffcd\147\uffcd\001\002\000\006\004\u0167\027\145" +
    "\001\002\000\054\004\uff23\015\uff23\016\uff23\017\uff23\020" +
    "\uff23\021\uff23\022\uff23\023\uff23\024\uff23\025\uff23\026\uff23" +
    "\030\uff23\104\uff23\105\uff23\106\uff23\107\uff23\110\uff23\111" +
    "\uff23\112\uff23\143\uff23\147\uff23\001\002\000\054\004\uff1b" +
    "\015\uff1b\016\uff1b\017\uff1b\020\uff1b\021\uff1b\022\uff1b\023" +
    "\uff1b\024\uff1b\025\uff1b\026\uff1b\030\uff1b\104\uff1b\105\uff1b" +
    "\106\uff1b\107\uff1b\110\uff1b\111\uff1b\112\uff1b\143\uff1b\147" +
    "\uff1b\001\002\000\054\004\uff1c\015\uff1c\016\uff1c\017\uff1c" +
    "\020\uff1c\021\uff1c\022\uff1c\023\uff1c\024\uff1c\025\uff1c\026" +
    "\uff1c\030\uff1c\104\uff1c\105\uff1c\106\uff1c\107\uff1c\110\uff1c" +
    "\111\uff1c\112\uff1c\143\uff1c\147\uff1c\001\002\000\054\004" +
    "\uff1a\015\uff1a\016\uff1a\017\uff1a\020\uff1a\021\uff1a\022\uff1a" +
    "\023\uff1a\024\uff1a\025\uff1a\026\uff1a\030\uff1a\104\uff1a\105" +
    "\uff1a\106\uff1a\107\uff1a\110\uff1a\111\uff1a\112\uff1a\143\uff1a" +
    "\147\uff1a\001\002\000\006\013\u016a\027\uff16\001\002\000" +
    "\004\027\u016c\001\002\000\004\143\013\001\002\000\006" +
    "\007\071\027\uff17\001\002\000\054\004\077\015\036\016" +
    "\041\017\033\020\103\021\047\022\045\023\034\024\050" +
    "\025\043\026\037\030\uffd3\104\uffea\105\uffea\106\uffea\107" +
    "\uffea\110\uffea\111\uffea\112\uffea\143\uffea\147\uffea\001\002" +
    "\000\004\030\u016e\001\002\000\034\002\uff18\012\uff18\015" +
    "\uff18\016\uff18\017\uff18\020\uff18\021\uff18\022\uff18\023\uff18" +
    "\024\uff18\025\uff18\026\uff18\142\uff18\001\002\000\054\012" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\104\uffe8\105\uffe8\106" +
    "\uffe8\107\uffe8\110\uffe8\111\uffe8\112\uffe8\142\uffe8\143\uffe8" +
    "\147\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016d\000\012\002\007\003\006\004\004\005\003\001" +
    "\001\000\002\001\001\000\010\006\016\007\020\010\021" +
    "\001\001\000\004\132\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\011\041\012\051\013\043\014\034\015\031" +
    "\016\030\123\050\131\045\001\001\000\004\132\023\001" +
    "\001\000\004\010\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u016e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\052\014\034\015\031\016\030\123\050" +
    "\131\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\133\056\001\001\000\006\017\057" +
    "\020\061\001\001\000\006\021\063\022\065\001\001\000" +
    "\004\132\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\072\001\001\000\006\023\066\132\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\132\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\015\031\016\030\025\106\026\105\027\104" +
    "\030\101\035\103\116\077\121\075\122\074\126\100\131" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\045\u0162\046\137\047" +
    "\135\127\u0163\001\001\000\002\001\001\000\004\031\u0161" +
    "\001\001\000\002\001\001\000\026\015\031\016\030\025" +
    "\u0160\030\101\035\103\116\077\121\075\122\074\126\100" +
    "\131\107\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\043\115\130\116\132\110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\045\u015e\046\137\047\135\001\001" +
    "\000\006\036\u0103\044\u0105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\043\115\102\127\117\130\125\125\130" +
    "\126\132\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\043\115\102" +
    "\132\130\126\132\110\001\001\000\002\001\001\000\010" +
    "\045\134\046\137\047\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\143\001" +
    "\001\000\002\001\001\000\072\015\031\016\030\031\204" +
    "\032\166\033\222\034\235\035\157\050\154\051\160\052" +
    "\230\053\220\054\153\056\236\060\170\062\217\063\150" +
    "\065\234\066\240\072\173\073\152\075\174\076\206\100" +
    "\237\101\213\103\147\104\145\107\156\131\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\053\u0155\054\153\056" +
    "\236\060\170\062\217\063\150\065\234\066\240\072\173" +
    "\073\152\075\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\043\115\130\u0152\132\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\053\u0151\054\153\056\236\060\170\062\217" +
    "\063\150\065\234\066\240\072\173\073\152\075\174\001" +
    "\001\000\002\001\001\000\030\053\u014f\054\153\056\236" +
    "\060\170\062\217\063\150\065\234\066\240\072\173\073" +
    "\152\075\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\015\031\016\030\031\204\034\u0136\035\157\050\154\051" +
    "\160\052\230\053\220\054\153\056\236\060\170\062\217" +
    "\063\150\065\234\066\240\072\173\073\152\075\174\076" +
    "\206\100\237\101\213\103\147\104\145\107\156\131\214" +
    "\001\001\000\002\001\001\000\032\053\u0125\054\153\056" +
    "\236\060\170\062\217\063\150\065\234\066\240\072\173" +
    "\073\152\075\174\134\u0124\001\001\000\070\015\031\016" +
    "\030\031\204\034\u011b\035\157\050\154\051\160\052\230" +
    "\053\220\054\153\056\236\060\170\062\217\063\150\065" +
    "\234\066\240\072\173\073\152\075\174\076\206\100\237" +
    "\101\213\103\147\104\145\107\156\110\u011a\131\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\043\115\130\u0102" +
    "\132\110\001\001\000\030\053\u0101\054\153\056\236\060" +
    "\170\062\217\063\150\065\234\066\240\072\173\073\152" +
    "\075\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\055\263\057\272\061\265\064\260\001\001\000\002" +
    "\001\001\000\066\015\031\016\030\031\204\034\373\035" +
    "\157\050\154\051\160\052\230\053\220\054\153\056\236" +
    "\060\170\062\217\063\150\065\234\066\240\072\173\073" +
    "\152\075\174\076\206\100\237\101\213\103\147\104\145" +
    "\107\156\131\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\053\360\054\153\056\236\060\170\062\217" +
    "\063\150\065\234\066\240\072\173\073\152\075\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\053\357\054\153\056\236\060\170\062\217\063" +
    "\150\065\234\066\240\072\173\073\152\075\174\001\001" +
    "\000\002\001\001\000\010\043\243\067\242\132\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\346\001\001\000\030\053\246" +
    "\054\153\056\236\060\170\062\217\063\150\065\234\066" +
    "\240\072\173\073\152\075\174\001\001\000\002\001\001" +
    "\000\012\055\263\057\272\061\265\064\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\053\345\054\153\056" +
    "\236\060\170\062\217\063\150\065\234\066\240\072\173" +
    "\073\152\075\174\001\001\000\002\001\001\000\032\053" +
    "\341\054\153\056\236\060\170\062\217\063\150\065\234" +
    "\066\240\070\340\072\173\073\152\075\174\001\001\000" +
    "\002\001\001\000\030\053\336\054\153\056\236\060\170" +
    "\062\217\063\150\065\234\066\240\072\173\073\152\075" +
    "\174\001\001\000\004\132\335\001\001\000\002\001\001" +
    "\000\030\053\334\054\153\056\236\060\170\062\217\063" +
    "\150\065\234\066\240\072\173\073\152\075\174\001\001" +
    "\000\002\001\001\000\030\053\333\054\153\056\236\060" +
    "\170\062\217\063\150\065\234\066\240\072\173\073\152" +
    "\075\174\001\001\000\002\001\001\000\030\053\332\054" +
    "\153\056\236\060\170\062\217\063\150\065\234\066\240" +
    "\072\173\073\152\075\174\001\001\000\002\001\001\000" +
    "\030\053\331\054\153\056\236\060\170\062\217\063\150" +
    "\065\234\066\240\072\173\073\152\075\174\001\001\000" +
    "\030\053\330\054\153\056\236\060\170\062\217\063\150" +
    "\065\234\066\240\072\173\073\152\075\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\053\327\054\153" +
    "\056\236\060\170\062\217\063\150\065\234\066\240\072" +
    "\173\073\152\075\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\053\325" +
    "\054\153\056\236\060\170\062\217\063\150\065\234\066" +
    "\240\072\173\073\152\075\174\001\001\000\030\053\323" +
    "\054\153\056\236\060\170\062\217\063\150\065\234\066" +
    "\240\072\173\073\152\075\174\001\001\000\030\053\322" +
    "\054\153\056\236\060\170\062\217\063\150\065\234\066" +
    "\240\072\173\073\152\075\174\001\001\000\030\053\317" +
    "\054\153\056\236\060\170\062\217\063\150\065\234\066" +
    "\240\072\173\073\152\075\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\055\263\057\272" +
    "\061\265\064\260\001\001\000\030\053\321\054\153\056" +
    "\236\060\170\062\217\063\150\065\234\066\240\072\173" +
    "\073\152\075\174\001\001\000\012\055\263\057\272\061" +
    "\265\064\260\001\001\000\012\055\263\057\272\061\265" +
    "\064\260\001\001\000\012\055\263\057\272\061\265\064" +
    "\260\001\001\000\002\001\001\000\012\055\263\057\272" +
    "\061\265\064\260\001\001\000\002\001\001\000\012\055" +
    "\263\057\272\061\265\064\260\001\001\000\012\055\263" +
    "\057\272\061\265\064\260\001\001\000\012\055\263\057" +
    "\272\061\265\064\260\001\001\000\012\055\263\057\272" +
    "\061\265\064\260\001\001\000\012\055\263\057\272\061" +
    "\265\064\260\001\001\000\012\055\263\057\272\061\265" +
    "\064\260\001\001\000\002\001\001\000\012\055\263\057" +
    "\272\061\265\064\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\055\263\057\272\061\265\064\260\001" +
    "\001\000\030\053\344\054\153\056\236\060\170\062\217" +
    "\063\150\065\234\066\240\072\173\073\152\075\174\001" +
    "\001\000\002\001\001\000\012\055\263\057\272\061\265" +
    "\064\260\001\001\000\012\055\263\057\272\061\265\064" +
    "\260\001\001\000\010\045\352\046\137\047\135\001\001" +
    "\000\030\053\350\054\153\056\236\060\170\062\217\063" +
    "\150\065\234\066\240\072\173\073\152\075\174\001\001" +
    "\000\012\055\263\057\272\061\265\064\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\053\341\054\153" +
    "\056\236\060\170\062\217\063\150\065\234\066\240\070" +
    "\354\072\173\073\152\075\174\115\355\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\055" +
    "\263\057\272\061\265\064\260\001\001\000\012\055\263" +
    "\057\272\061\265\064\260\001\001\000\030\053\362\054" +
    "\153\056\236\060\170\062\217\063\150\065\234\066\240" +
    "\072\173\073\152\075\174\001\001\000\012\055\263\057" +
    "\272\061\265\064\260\001\001\000\066\015\031\016\030" +
    "\031\204\034\364\035\157\050\154\051\160\052\230\053" +
    "\220\054\153\056\236\060\170\062\217\063\150\065\234" +
    "\066\240\072\173\073\152\075\174\076\206\100\237\101" +
    "\213\103\147\104\145\107\156\131\214\001\001\000\004" +
    "\077\366\001\001\000\066\015\031\016\030\031\204\034" +
    "\367\035\157\050\154\051\160\052\230\053\220\054\153" +
    "\056\236\060\170\062\217\063\150\065\234\066\240\072" +
    "\173\073\152\075\174\076\206\100\237\101\213\103\147" +
    "\104\145\107\156\131\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\053\375\054\153\056" +
    "\236\060\170\062\217\063\150\065\234\066\240\072\173" +
    "\073\152\075\174\001\001\000\012\055\263\057\272\061" +
    "\265\064\260\001\001\000\066\015\031\016\030\031\204" +
    "\034\377\035\157\050\154\051\160\052\230\053\220\054" +
    "\153\056\236\060\170\062\217\063\150\065\234\066\240" +
    "\072\173\073\152\075\174\076\206\100\237\101\213\103" +
    "\147\104\145\107\156\131\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\055\263\057\272\061\265\064" +
    "\260\001\001\000\006\036\u0103\044\u0105\001\001\000\002" +
    "\001\001\000\010\045\u0109\046\137\047\135\001\001\000" +
    "\002\001\001\000\004\036\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\u010b\001\001\000\034\040" +
    "\u010d\042\u010e\053\u010c\054\153\056\236\060\170\062\217" +
    "\063\150\065\234\066\240\072\173\073\152\075\174\001" +
    "\001\000\002\001\001\000\012\055\263\057\272\061\265" +
    "\064\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\040\u0111\041\u0110\042\u010e\053\u010c\054\153\056\236" +
    "\060\170\062\217\063\150\065\234\066\240\072\173\073" +
    "\152\075\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\040\u0115\042\u010e\053\u010c\054" +
    "\153\056\236\060\170\062\217\063\150\065\234\066\240" +
    "\072\173\073\152\075\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\111\u011c\001\001\000" +
    "\002\001\001\000\002\001\001\000\066\015\031\016\030" +
    "\031\204\034\u0123\035\157\050\154\051\160\052\230\053" +
    "\220\054\153\056\236\060\170\062\217\063\150\065\234" +
    "\066\240\072\173\073\152\075\174\076\206\100\237\101" +
    "\213\103\147\104\145\107\156\131\214\001\001\000\002" +
    "\001\001\000\012\043\115\102\u0120\130\126\132\110\001" +
    "\001\000\002\001\001\000\066\015\031\016\030\031\204" +
    "\034\u0122\035\157\050\154\051\160\052\230\053\220\054" +
    "\153\056\236\060\170\062\217\063\150\065\234\066\240" +
    "\072\173\073\152\075\174\076\206\100\237\101\213\103" +
    "\147\104\145\107\156\131\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\055\263\057" +
    "\272\061\265\064\260\135\u0126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\015\031\016" +
    "\030\035\u012b\053\u012c\054\153\056\236\060\170\062\217" +
    "\063\150\065\234\066\240\072\173\073\152\075\174\105" +
    "\u012d\131\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\055\263\057\272\061\265\064\260\001\001\000" +
    "\032\053\u012f\054\153\056\236\060\170\062\217\063\150" +
    "\065\234\066\240\072\173\073\152\075\174\106\u012e\001" +
    "\001\000\002\001\001\000\012\055\263\057\272\061\265" +
    "\064\260\001\001\000\032\053\u012f\054\153\056\236\060" +
    "\170\062\217\063\150\065\234\066\240\072\173\073\152" +
    "\075\174\106\u0131\001\001\000\002\001\001\000\002\001" +
    "\001\000\066\015\031\016\030\031\204\034\u0134\035\157" +
    "\050\154\051\160\052\230\053\220\054\153\056\236\060" +
    "\170\062\217\063\150\065\234\066\240\072\173\073\152" +
    "\075\174\076\206\100\237\101\213\103\147\104\145\107" +
    "\156\131\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\053\u0139\054" +
    "\153\056\236\060\170\062\217\063\150\065\234\066\240" +
    "\072\173\073\152\075\174\001\001\000\012\055\263\057" +
    "\272\061\265\064\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\053\u013d\054\153\056\236\060\170\062" +
    "\217\063\150\065\234\066\240\072\173\073\152\075\174" +
    "\001\001\000\012\055\263\057\272\061\265\064\260\001" +
    "\001\000\002\001\001\000\074\015\031\016\030\031\204" +
    "\034\u0145\035\157\050\154\051\160\052\230\053\220\054" +
    "\153\056\236\060\170\062\217\063\150\065\234\066\240" +
    "\072\173\073\152\075\174\076\206\100\237\101\213\103" +
    "\147\104\145\107\156\112\u0144\113\u0142\114\u0140\131\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\070\015" +
    "\031\016\030\031\204\034\u0145\035\157\050\154\051\160" +
    "\052\230\053\220\054\153\056\236\060\170\062\217\063" +
    "\150\065\234\066\240\072\173\073\152\075\174\076\206" +
    "\100\237\101\213\103\147\104\145\107\156\114\u0149\131" +
    "\214\001\001\000\030\053\u0147\054\153\056\236\060\170" +
    "\062\217\063\150\065\234\066\240\072\173\073\152\075" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\055\263\057\272\061\265\064\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\053\u014c\054\153\056\236\060\170\062\217\063" +
    "\150\065\234\066\240\072\173\073\152\075\174\001\001" +
    "\000\012\055\263\057\272\061\265\064\260\001\001\000" +
    "\066\015\031\016\030\031\204\034\u014e\035\157\050\154" +
    "\051\160\052\230\053\220\054\153\056\236\060\170\062" +
    "\217\063\150\065\234\066\240\072\173\073\152\075\174" +
    "\076\206\100\237\101\213\103\147\104\145\107\156\131" +
    "\214\001\001\000\002\001\001\000\012\055\263\057\272" +
    "\061\265\064\260\001\001\000\002\001\001\000\012\055" +
    "\263\057\272\061\265\064\260\001\001\000\002\001\001" +
    "\000\030\053\u0154\054\153\056\236\060\170\062\217\063" +
    "\150\065\234\066\240\072\173\073\152\075\174\001\001" +
    "\000\012\055\263\057\272\061\265\064\260\001\001\000" +
    "\012\055\263\057\272\061\265\064\260\001\001\000\002" +
    "\001\001\000\066\015\031\016\030\031\204\034\u0158\035" +
    "\157\050\154\051\160\052\230\053\220\054\153\056\236" +
    "\060\170\062\217\063\150\065\234\066\240\072\173\073" +
    "\152\075\174\076\206\100\237\101\213\103\147\104\145" +
    "\107\156\131\214\001\001\000\002\001\001\000\012\045" +
    "\u0109\046\137\047\135\136\u015a\001\001\000\002\001\001" +
    "\000\016\043\115\102\127\117\130\125\u015c\130\126\132" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\031\u0164\120\u0165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\124\u0168\001\001\000\002\001\001\000\006\023\u016a" +
    "\132\067\001\001\000\002\001\001\000\032\015\031\016" +
    "\030\025\106\026\u016c\027\104\030\101\035\103\116\077" +
    "\121\075\122\074\126\100\131\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


	if(first) {	Type.initTypes();
			Env.initFirst();
	}
	if(second) Env.initSecond();

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(Driver.arquivo);
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  protected Lexer lexer;
  public static int errors = 0;
  public static int warnings = 0;
  public static boolean first = true, second = false;
  
public void report_error(String message, Object info) {
String token = "";

if (info instanceof java_cup.runtime.Symbol) {
           java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
           token = s.value+"";

       }
       System.err.println("Erro em: " + token);
 }
  
 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Erro Sintatico.");
 }
  public void sem_error(String lexeme, String message) {
	errors++;
     	System.err.println("Error "+ lexer.current_lexeme() + " : Semantic error");
      System.err.println("  "+ errors + "==> " + message + ": "+ lexeme + "\n");
  }

  public void warning(String lexeme, String message) {
	warnings++;
     	System.err.println("Warning "+ lexer.current_lexeme());
      System.err.println("  "+ warnings + "==> " + message + ": "+ lexeme + "\n");
  } 

 

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {


	class Sname {
	  public String name;
	  public Symb cs;
	  public Symb rs;

	  Sname(String n, Symb c, Symb r) {
		name = n;
		cs = c;
		rs = r;
	  }
	}


  private final ParserCup parser;

  /** Constructor */
  CUP$ParserCup$actions(ParserCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // inter_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("inter_opt",82, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // inter_opt ::= EXTENDS interface_type_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("inter_opt",82, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // interface_declaration ::= modifiers_opt INTERFACE IDENTIFIER inter_opt LBRACE field_declarations_opt RBRACE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("interface_declaration",81, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // constructor_declaration ::= modifiers_opt IDENTIFIER LPAREN parameter_list_opt RPAREN statement_block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("constructor_declaration",80, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // statement_aux ::= SEMI 
            {
              Object RESULT =null;
		RESULT = Type.voidtype();
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_aux",78, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // statement_aux ::= statement_block 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = (Type)t;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_aux",78, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // method_body ::= bracks_opt statement_aux 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
	RESULT = (Type)t; 
	System.out.println(" METHOD EXIT");
		if(parser.first) Env.pop();
		if(parser.second) Env.next(); 
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_body",85, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // parameter_list ::= parameter_list COMMA parameter 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = Type.product((Type)t1, (Type)t2); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameter_list",77, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // parameter_list ::= parameter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameter_list",77, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // parameter_list_opt ::= parameter_list 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",83, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // parameter_list_opt ::= 
            {
              Object RESULT =null;
		 RESULT = Type.voidtype(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameter_list_opt",83, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // method_header ::= modifiers_opt type IDENTIFIER NT$3 LPAREN parameter_list_opt RPAREN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.method((Type)t2, t1), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC METHOD DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.method((Type)t2, t1), c, false);
			   			    }
			   			    Env.putSymb(n, s); 
			   }
			   if(parser.second) { Symb msymb = Env.get(n);
						     Method.putCurrent(n, (Method)msymb.getType());						     
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_header",84, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // NT$3 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    System.out.println(" METHOD ENTRY: "+n);
		 			          Env.push();
			   }
			   if(parser.second) { System.out.println(" METHOD ENTRY: "+n);
						     Env.next();
			   }
			RESULT = (Type)t1;
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$3",92, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // method_declaration ::= method_header method_body 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		
		System.out.println((Type)t1);
		System.out.println((Type)t2);
		if(!((Type)t1).equals((Type)t2)){
			System.err.println("Erro semantico");
			System.exit(1);

		}
	
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("method_declaration",79, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // mcv_declarations ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("mcv_declarations",76, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // mcv_declarations ::= constructor_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("mcv_declarations",76, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // mcv_declarations ::= method_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("mcv_declarations",76, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // statement_switch ::= statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_switch",74, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // statement_switch ::= DEFAULT COLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_switch",74, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // statement_switch ::= CASE expression COLON 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_switch",74, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // statements_switch ::= statements_switch statement_switch 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements_switch",73, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // statements_switch ::= statement_switch 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements_switch",73, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // statements_switch_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements_switch_opt",72, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // statements_switch_opt ::= statements_switch 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements_switch_opt",72, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // switch_statement ::= SWITCH LPAREN expression RPAREN LBRACE statements_switch_opt RBRACE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("switch_statement",65, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // parameter ::= type IDENTIFIER bracks_opt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("parameter",64, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // try_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("try_opt",71, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // try_opt ::= FINALLY statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("try_opt",71, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // statements_try ::= statements_try CATCH LPAREN parameter RPAREN statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements_try",70, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // statements_try ::= statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements_try",70, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // try_statement ::= TRY statements_try try_opt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("try_statement",69, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // expression_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_opt",68, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // expression_opt ::= expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression_opt",68, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // for_var_exp ::= SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for_var_exp",67, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // for_var_exp ::= expression SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for_var_exp",67, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // for_var_exp ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for_var_exp",67, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // for_statement ::= FOR LPAREN for_var_exp expression_opt SEMI expression_opt SEMI RPAREN statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("for_statement",66, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("while_statement",63, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // do_statement ::= DO statement WHILE LPAREN expression RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("do_statement",62, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // else_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else_opt",61, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // else_opt ::= ELSE statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("else_opt",61, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // if_statement ::= IF LPAREN expression RPAREN statement else_opt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("if_statement",60, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // integer_literal_desc ::= OCT_LITERAL_LONG 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("integer_literal_desc",57, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // integer_literal_desc ::= OCT_LITERAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("integer_literal_desc",57, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // integer_literal_desc ::= HEX_LITERAL_LONG 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("integer_literal_desc",57, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // integer_literal_desc ::= HEX_LITERAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("integer_literal_desc",57, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // integer_literal_desc ::= INTEGER_LITERAL_LONG 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("integer_literal_desc",57, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // integer_literal_desc ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		 RESULT = Type.integer(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("integer_literal_desc",57, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // literal_expression ::= CHARACTER_LITERAL 
            {
              Object RESULT =null;
		 Symb s = Env.get("character", Env.getRoot()); 
			   if(s == null) RESULT = Type.reference(Type.forwardName("character", parser.lexer.current_lexeme())); 
			   else RESULT = Type.reference(s.getType());
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",56, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // literal_expression ::= STRING_LITERAL 
            {
              Object RESULT =null;
		 Symb s = Env.get("String", Env.getRoot()); 
			   if(s == null) RESULT = Type.reference(Type.forwardName("String", parser.lexer.current_lexeme())); 
			   else RESULT = Type.reference(s.getType());
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",56, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // literal_expression ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		 RESULT = Type.floating();
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",56, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // literal_expression ::= integer_literal_desc 
            {
              Object RESULT =null;
		 RESULT = Type.integer();
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("literal_expression",56, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // array_expression_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_expression_opt",55, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // array_expression_opt ::= LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_expression_opt",55, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // arglist ::= arglist COMMA expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arglist",54, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // arglist ::= expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arglist",54, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // arglist_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arglist_opt",75, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // arglist_opt ::= arglist 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("arglist_opt",75, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // creating_expression_alt ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("creating_expression_alt",53, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // creating_expression_alt ::= type_specifier array_expression_opt bracks_opt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("creating_expression_alt",53, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // creating_expression_alt ::= name LPAREN arglist_opt RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("creating_expression_alt",53, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // creating_expression ::= NEW creating_expression_alt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("creating_expression",52, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // casting_expression ::= LPAREN type RPAREN expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("casting_expression",51, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // bit_const ::= RSHIFTEQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bit_const",50, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // bit_const ::= LSHIFT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bit_const",50, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // bit_const ::= RSHIFT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bit_const",50, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // bit_const ::= SSHIFT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bit_const",50, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // bit_expression ::= expression bit_const expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bit_expression",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // bit_expression ::= COMP expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bit_expression",49, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // string_expression ::= expression PLUSEQ expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("string_expression",48, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // string_expression ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("string_expression",48, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // logical_const ::= OROREQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_const",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // logical_const ::= AMPERSAND AMPERSAND 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_const",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // logical_const ::= XOREQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_const",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // logical_const ::= XOR 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_const",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // logical_const ::= OREQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_const",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // logical_const ::= OR 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_const",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // logical_const ::= AMPERSANDEQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_const",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // logical_const ::= AMPERSAND 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_const",47, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // logical_expression ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_expression",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // logical_expression ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_expression",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // logical_expression ::= expression QUESTION expression COLON expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_expression",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // logical_expression ::= expression logical_const expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_expression",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // logical_expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("logical_expression",46, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // test_const ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("test_const",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // test_const ::= EQEQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("test_const",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // test_const ::= LTEQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("test_const",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // test_const ::= GTEQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("test_const",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // test_const ::= LT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("test_const",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // test_const ::= GT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("test_const",45, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // testing_expression ::= expression test_const expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("testing_expression",44, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // num_const ::= DIVEQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("num_const",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // num_const ::= DIV 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("num_const",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // num_const ::= MULTEQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("num_const",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // num_const ::= MULT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("num_const",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // num_const ::= MINUSEQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("num_const",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // num_const ::= MINUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("num_const",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // num_const ::= PLUSEQ 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("num_const",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // num_const ::= PLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("num_const",43, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // numeric_expression ::= expression num_const expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("numeric_expression",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // numeric_expression ::= expression MINUSMINUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("numeric_expression",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // numeric_expression ::= expression PLUSPLUS 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("numeric_expression",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // numeric_expression ::= MINUSMINUS expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("numeric_expression",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // numeric_expression ::= PLUSPLUS expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("numeric_expression",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // numeric_expression ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("numeric_expression",42, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // num_logic_expression ::= expression MOD expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("num_logic_expression",59, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // num_logic_expression ::= expression MODEQ expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("num_logic_expression",59, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression ::= expression INSTANCEOF name 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression ::= expression COMMA expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression ::= expression POINT expression 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression ::= expression LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression ::= expression LPAREN arglist RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression ::= expression LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression ::= num_logic_expression 
            {
              Object RESULT =null;
		RESULT = Type.bool();
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression ::= THIS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression ::= SUPER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= NULL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= literal_expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= creating_expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= casting_expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= bit_expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression ::= string_expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= logical_expression 
            {
              Object RESULT =null;
		RESULT = Type.bool();
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= testing_expression 
            {
              Object RESULT =null;
		RESULT = Type.bool();
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression ::= numeric_expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("expression",41, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // variable_initializers ::= variable_initializers COMMA variable_initializer 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_initializers",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // variable_initializers ::= variable_initializer 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_initializers",31, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // array_initializer ::= LBRACE RBRACE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_initializer",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // array_initializer ::= LBRACE variable_initializers RBRACE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_initializer",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // array_initializer ::= LBRACE variable_initializers COMMA RBRACE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("array_initializer",32, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // variable_initializer ::= array_initializer 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_initializer",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // variable_initializer ::= expression 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_initializer",30, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable_initializer_opt ::= 
            {
              Object RESULT =null;
		 RESULT = Type.voidtype(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_initializer_opt",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable_initializer_opt ::= EQ variable_initializer 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_initializer_opt",29, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable_declarator ::= IDENTIFIER bracks_opt variable_initializer_opt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_declarator",28, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable_declarators ::= variable_declarators COMMA variable_declarator 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_declarators",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variable_declarators ::= variable_declarator 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_declarators",34, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // brack ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("brack",37, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bracks ::= bracks brack 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bracks",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bracks ::= brack 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bracks",36, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bracks_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bracks_opt",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // bracks_opt ::= bracks 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("bracks_opt",35, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // type_specifier ::= name 
            {
              Object RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Symb s = sn.rs; 
			   if(s == null) RESULT = Type.reference(Type.forwardName(sn.name, parser.lexer.current_lexeme())); 
			   else RESULT = Type.reference(s.getType());
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_specifier",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // type_specifier ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_specifier",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type_specifier ::= LONG 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_specifier",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type_specifier ::= FLOAT 
            {
              Object RESULT =null;
		 RESULT = Type.floating(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_specifier",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type_specifier ::= INT 
            {
              Object RESULT =null;
		 RESULT = Type.integer(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_specifier",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type_specifier ::= SHORT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_specifier",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type_specifier ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = Type.character(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_specifier",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type_specifier ::= BYTE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_specifier",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type_specifier ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = Type.bool(); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_specifier",33, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type ::= type_specifier bracks_opt 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = (Type)t; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type",86, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variable_declaration ::= modifiers_opt type variable_declarators SEMI 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Type t1 = (Type)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		
System.out.println((Type)t1);
System.out.println((Type)t2);
		if(!((Type)t1).equals((Type)t2)){
			System.err.println("Erro semantico");
			System.exit(1);

		}

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("variable_declaration",27, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // continue_opt ::= CONTINUE IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("continue_opt",40, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // continue_opt ::= CONTINUE SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("continue_opt",40, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // break_opt ::= BREAK IDENTIFIER SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("break_opt",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // break_opt ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("break_opt",39, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // return_opt ::= RETURN expression NT$2 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("return_opt",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$2 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
RESULT = (Type)t;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$2",91, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // return_opt ::= RETURN NT$1 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("return_opt",38, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$1 ::= 
            {
              Object RESULT =null;
RESULT = Type.voidtype();
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$1",90, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= continue_opt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statement ::= break_opt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statement ::= IDENTIFIER COLON statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // statement ::= THROW expression SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // statement ::= return_opt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = (Type)t;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // statement ::= SYNCHRONIZED LPAREN expression RPAREN statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // statement ::= switch_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // statement ::= try_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // statement ::= do_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= statement_block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // statement ::= expression SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // statement ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement",26, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statements ::= statements statement 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = (Type)t;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // statements ::= statement 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = (Type)t;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements",25, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // statements_opt ::= 
            {
              Object RESULT =null;
		RESULT = Type.voidtype();
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements_opt",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // statements_opt ::= statements 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		RESULT = (Type)t;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statements_opt",24, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // statement_block ::= LBRACE statements_opt RBRACE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = (Type)t;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("statement_block",23, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // static_initializer ::= STATIC statement_block 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("static_initializer",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // field_declaration ::= SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_declaration",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // field_declaration ::= static_initializer 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_declaration",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // field_declaration ::= mcv_declarations 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_declaration",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // field_declarations ::= field_declarations field_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_declarations",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // field_declarations ::= field_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_declarations",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // field_declarations_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_declarations_opt",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // field_declarations_opt ::= field_declarations 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_declarations_opt",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // field_aux ::= LBRACE field_declarations_opt RBRACE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("field_aux",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // interface_type_list ::= interface_type_list COMMA name 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("interface_type_list",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // interface_type_list ::= name 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("interface_type_list",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // interfaces_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("interfaces_opt",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // interfaces_opt ::= interfaces 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("interfaces_opt",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // interfaces ::= IMPLEMENTS interface_type_list 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("interfaces",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // super_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("super_opt",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // super_opt ::= super_cl 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("super_opt",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // super_cl ::= EXTENDS name 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("super_cl",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // modifier ::= VOLATILE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifier",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // modifier ::= TRANSIENT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifier",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // modifier ::= SYNCHRONIZED 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifier",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // modifier ::= NATIVE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifier",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // modifier ::= FINAL 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifier",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // modifier ::= ABSTRACT 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifier",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // modifier ::= STATIC 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifier",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // modifier ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifier",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // modifier ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifier",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // modifier ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifier",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // modifiers ::= modifiers modifier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifiers",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // modifiers ::= modifier 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifiers",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // modifiers_opt ::= 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(false); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifiers_opt",87, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // modifiers_opt ::= modifiers 
            {
              Boolean RESULT =null;
		 RESULT = Boolean.valueOf(true); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("modifiers_opt",87, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // class_declaration ::= modifiers_opt CLASS IDENTIFIER NT$0 super_opt interfaces_opt field_aux 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("class_declaration",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Boolean m = (Boolean)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n1 = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
 System.out.println("CLASS ENTRY: "+n1);
			   if(parser.first) if (Env.putClass(n1, m.booleanValue()) != 0) parser.sem_error(n1,"DUPLICATE CLASS NAME");
 			   if(parser.second) { Env.next();
						     Name c = (Env.get(n1)).getOwner();
						     Name.putCurrentClass(c);
			   } 
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("NT$0",89, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_declaration ::= interface_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_declaration",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_declaration ::= class_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_declaration",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type_declarations ::= type_declarations type_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_declarations",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type_declarations ::= type_declaration 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_declarations",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type_declarations_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_declarations_opt",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_declarations_opt ::= type_declarations 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("type_declarations_opt",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // import_statement ::= IMPORT name POINT MULT SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("import_statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // import_statement ::= IMPORT name SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("import_statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // import_statements ::= import_statements import_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("import_statements",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // import_statements ::= import_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("import_statements",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // import_statement_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("import_statement_opt",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // import_statement_opt ::= import_statements 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("import_statement_opt",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // name ::= name POINT IDENTIFIER 
            {
              Sname RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		Sname sn = (Sname)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 Symb s1 = sn.cs;
			   if(s1 == null) { parser.sem_error(sn.name, "UNKNOWN NAME");
						  RESULT = new Sname(n, null, null);
			   }
			   else { Type t1 = s1.getType();
				    if(!t1.isReference()) { parser.sem_error(""+t1, "NOT A REFERENCE");
								    RESULT = new Sname(n, null, null);
				    }
				    else { Type r = ((Reference)t1).getReferred();
					     if(!r.isName()) { parser.sem_error(""+r, "NOT A CLASS");
								     RESULT = new Sname(n, null, null);
					     }
					     else { Symb s2 = Env.get(n, ((Name)r).getEnv()); 
			   			     	if(s2 == null) { parser.sem_error(n,"UNKNOWN NAME"); 
									     RESULT = new Sname(n, null, null);
							}
			   			     	else if (!s2.isPublic() && !Name.getCurrentClass().isSubclass(s2.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE ATTRIBUTE");
				    					 				     			     	      		  RESULT = new Sname(n, null, null);
						  	     }
						  	     else RESULT = new Sname(n, s2, Env.get(n, Env.getRoot()));
					     }								
				    }
			   }
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",88, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // name ::= IDENTIFIER 
            {
              Sname RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		java.lang.String n = (java.lang.String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 if(parser.first) RESULT = new Sname(n, Env.get(n), Env.get(n, Env.getRoot())); 
			   if(parser.second) RESULT = new Sname(n, Env.get(n), Env.get(n, Env.getRoot()));
			
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("name",88, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // package_statement ::= PACKAGE name SEMI 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("package_statement",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // package_statement_opt ::= 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("package_statement_opt",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // package_statement_opt ::= package_statement 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("package_statement_opt",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // compilation_unit ::= package_statement_opt import_statement_opt type_declarations_opt 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("compilation_unit",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= compilation_unit 
            {
              Object RESULT =null;

              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

