/* The following code was generated by JFlex 1.3.5 on 11/06/15 19:26 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/06/15 19:26 from the specification file
 * <tt>file:/C:/Users/Celio/Desktop/Estudo/2015.1/compiladores/CompJava/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 3;
  final public static int STRING = 1;
  final public static int YYINITIAL = 0;
  final public static int CHARLITERAL = 2;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\26\1\3\1\2\1\0\1\3\1\1\16\26\4\0\1\3\1\45"+
    "\1\20\1\0\1\25\1\44\1\0\1\21\1\35\1\36\1\24\1\17"+
    "\1\34\1\43\1\15\1\23\1\5\1\12\2\11\4\13\2\4\1\47"+
    "\1\33\1\27\1\31\1\30\1\46\1\0\4\10\1\16\1\14\5\25"+
    "\1\6\13\25\1\7\2\25\1\41\1\22\1\42\1\51\1\25\1\0"+
    "\1\56\1\72\1\57\1\73\1\53\1\75\1\61\1\77\1\62\1\25"+
    "\1\60\1\67\1\63\1\52\1\64\1\55\1\25\1\65\1\70\1\66"+
    "\1\71\1\74\1\54\1\101\1\76\1\100\1\37\1\50\1\40\1\32"+
    "\41\26\2\0\4\25\4\0\1\25\2\0\1\26\7\0\1\25\4\0"+
    "\1\25\5\0\27\25\1\0\37\25\1\0\u01ca\25\4\0\14\25\16\0"+
    "\5\25\7\0\1\25\1\0\1\25\21\0\160\26\5\25\1\0\2\25"+
    "\2\0\4\25\10\0\1\25\1\0\3\25\1\0\1\25\1\0\24\25"+
    "\1\0\123\25\1\0\213\25\1\0\5\26\2\0\236\25\11\0\46\25"+
    "\2\0\1\25\7\0\47\25\7\0\1\25\1\0\55\26\1\0\1\26"+
    "\1\0\2\26\1\0\2\26\1\0\1\26\10\0\33\25\5\0\3\25"+
    "\15\0\5\26\6\0\1\25\4\0\13\26\5\0\53\25\37\26\4\0"+
    "\2\25\1\26\143\25\1\0\1\25\10\26\1\0\6\26\2\25\2\26"+
    "\1\0\4\26\2\25\12\26\3\25\2\0\1\25\17\0\1\26\1\25"+
    "\1\26\36\25\33\26\2\0\131\25\13\26\1\25\16\0\12\26\41\25"+
    "\11\26\2\25\4\0\1\25\5\0\26\25\4\26\1\25\11\26\1\25"+
    "\3\26\1\25\5\26\22\0\31\25\3\26\104\0\1\25\1\0\13\25"+
    "\67\0\33\26\1\0\4\26\66\25\3\26\1\25\22\26\1\25\7\26"+
    "\12\25\2\26\2\0\12\26\1\0\7\25\1\0\7\25\1\0\3\26"+
    "\1\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25\1\0\1\25"+
    "\3\0\4\25\2\0\1\26\1\25\7\26\2\0\2\26\2\0\3\26"+
    "\1\25\10\0\1\26\4\0\2\25\1\0\3\25\2\26\2\0\12\26"+
    "\4\25\7\0\1\25\5\0\3\26\1\0\6\25\4\0\2\25\2\0"+
    "\26\25\1\0\7\25\1\0\2\25\1\0\2\25\1\0\2\25\2\0"+
    "\1\26\1\0\5\26\4\0\2\26\2\0\3\26\3\0\1\26\7\0"+
    "\4\25\1\0\1\25\7\0\14\26\3\25\1\26\13\0\3\26\1\0"+
    "\11\25\1\0\3\25\1\0\26\25\1\0\7\25\1\0\2\25\1\0"+
    "\5\25\2\0\1\26\1\25\10\26\1\0\3\26\1\0\3\26\2\0"+
    "\1\25\17\0\2\25\2\26\2\0\12\26\1\0\1\25\17\0\3\26"+
    "\1\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25\1\0\2\25"+
    "\1\0\5\25\2\0\1\26\1\25\7\26\2\0\2\26\2\0\3\26"+
    "\10\0\2\26\4\0\2\25\1\0\3\25\2\26\2\0\12\26\1\0"+
    "\1\25\20\0\1\26\1\25\1\0\6\25\3\0\3\25\1\0\4\25"+
    "\3\0\2\25\1\0\1\25\1\0\2\25\3\0\2\25\3\0\3\25"+
    "\3\0\14\25\4\0\5\26\3\0\3\26\1\0\4\26\2\0\1\25"+
    "\6\0\1\26\16\0\12\26\11\0\1\25\7\0\3\26\1\0\10\25"+
    "\1\0\3\25\1\0\27\25\1\0\12\25\1\0\5\25\3\0\1\25"+
    "\7\26\1\0\3\26\1\0\4\26\7\0\2\26\1\0\2\25\6\0"+
    "\2\25\2\26\2\0\12\26\22\0\2\26\1\0\10\25\1\0\3\25"+
    "\1\0\27\25\1\0\12\25\1\0\5\25\2\0\1\26\1\25\7\26"+
    "\1\0\3\26\1\0\4\26\7\0\2\26\7\0\1\25\1\0\2\25"+
    "\2\26\2\0\12\26\1\0\2\25\17\0\2\26\1\0\10\25\1\0"+
    "\3\25\1\0\51\25\2\0\1\25\7\26\1\0\3\26\1\0\4\26"+
    "\1\25\10\0\1\26\10\0\2\25\2\26\2\0\12\26\12\0\6\25"+
    "\2\0\2\26\1\0\22\25\3\0\30\25\1\0\11\25\1\0\1\25"+
    "\2\0\7\25\3\0\1\26\4\0\6\26\1\0\1\26\1\0\10\26"+
    "\22\0\2\26\15\0\60\25\1\26\2\25\7\26\4\0\10\25\10\26"+
    "\1\0\12\26\47\0\2\25\1\0\1\25\2\0\2\25\1\0\1\25"+
    "\2\0\1\25\6\0\4\25\1\0\7\25\1\0\3\25\1\0\1\25"+
    "\1\0\1\25\2\0\2\25\1\0\4\25\1\26\2\25\6\26\1\0"+
    "\2\26\1\25\2\0\5\25\1\0\1\25\1\0\6\26\2\0\12\26"+
    "\2\0\4\25\40\0\1\25\27\0\2\26\6\0\12\26\13\0\1\26"+
    "\1\0\1\26\1\0\1\26\4\0\2\26\10\25\1\0\44\25\4\0"+
    "\24\26\1\0\2\26\5\25\13\26\1\0\44\26\11\0\1\26\71\0"+
    "\53\25\24\26\1\25\12\26\6\0\6\25\4\26\4\25\3\26\1\25"+
    "\3\26\2\25\7\26\3\25\4\26\15\25\14\26\1\25\17\26\2\0"+
    "\46\25\1\0\1\25\5\0\1\25\2\0\53\25\1\0\u014d\25\1\0"+
    "\4\25\2\0\7\25\1\0\1\25\1\0\4\25\2\0\51\25\1\0"+
    "\4\25\2\0\41\25\1\0\4\25\2\0\7\25\1\0\1\25\1\0"+
    "\4\25\2\0\17\25\1\0\71\25\1\0\4\25\2\0\103\25\2\0"+
    "\3\26\40\0\20\25\20\0\125\25\14\0\u026c\25\2\0\21\25\1\0"+
    "\32\25\5\0\113\25\3\0\3\25\17\0\15\25\1\0\4\25\3\26"+
    "\13\0\22\25\3\26\13\0\22\25\2\26\14\0\15\25\1\0\3\25"+
    "\1\0\2\26\14\0\64\25\40\26\3\0\1\25\3\0\2\25\1\26"+
    "\2\0\12\26\41\0\3\26\2\0\12\26\6\0\130\25\10\0\51\25"+
    "\1\26\1\25\5\0\106\25\12\0\35\25\3\0\14\26\4\0\14\26"+
    "\12\0\12\26\36\25\2\0\5\25\13\0\54\25\4\0\21\26\7\25"+
    "\2\26\6\0\12\26\46\0\27\25\5\26\4\0\65\25\12\26\1\0"+
    "\35\26\2\0\13\26\6\0\12\26\15\0\1\25\130\0\5\26\57\25"+
    "\21\26\7\25\4\0\12\26\21\0\11\26\14\0\3\26\36\25\15\26"+
    "\2\25\12\26\54\25\16\26\14\0\44\25\24\26\10\0\12\26\3\0"+
    "\3\25\12\26\44\25\122\0\3\26\1\0\25\26\4\25\1\26\4\25"+
    "\3\26\2\25\11\0\300\25\47\26\25\0\4\26\u0116\25\2\0\6\25"+
    "\2\0\46\25\2\0\6\25\2\0\10\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\37\25\2\0\65\25\1\0\7\25\1\0\1\25"+
    "\3\0\3\25\1\0\7\25\3\0\4\25\2\0\6\25\4\0\15\25"+
    "\5\0\3\25\1\0\7\25\16\0\5\26\32\0\5\26\20\0\2\25"+
    "\23\0\1\25\13\0\5\26\5\0\6\26\1\0\1\25\15\0\1\25"+
    "\20\0\15\25\3\0\33\25\25\0\15\26\4\0\1\26\3\0\14\26"+
    "\21\0\1\25\4\0\1\25\2\0\12\25\1\0\1\25\3\0\5\25"+
    "\6\0\1\25\1\0\1\25\1\0\1\25\1\0\4\25\1\0\13\25"+
    "\2\0\4\25\5\0\5\25\4\0\1\25\21\0\51\25\u0a77\0\57\25"+
    "\1\0\57\25\1\0\205\25\6\0\4\25\3\26\2\25\14\0\46\25"+
    "\1\0\1\25\5\0\1\25\2\0\70\25\7\0\1\25\17\0\1\26"+
    "\27\25\11\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0"+
    "\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0\40\26\57\0"+
    "\1\25\u01d5\0\3\25\31\0\11\25\6\26\1\0\5\25\2\0\5\25"+
    "\4\0\126\25\2\0\2\26\2\0\3\25\1\0\132\25\1\0\4\25"+
    "\5\0\51\25\3\0\136\25\21\0\33\25\65\0\20\25\u0200\0\u19b6\25"+
    "\112\0\u51cd\25\63\0\u048d\25\103\0\56\25\2\0\u010d\25\3\0\20\25"+
    "\12\26\2\25\24\0\57\25\1\26\4\0\12\26\1\0\31\25\7\0"+
    "\1\26\120\25\2\26\45\0\11\25\2\0\147\25\2\0\4\25\1\0"+
    "\4\25\14\0\13\25\115\0\12\25\1\26\3\25\1\26\4\25\1\26"+
    "\27\25\5\26\20\0\1\25\7\0\64\25\14\0\2\26\62\25\21\26"+
    "\13\0\12\26\6\0\22\26\6\25\3\0\1\25\4\0\12\26\34\25"+
    "\10\26\2\0\27\25\15\26\14\0\35\25\3\0\4\26\57\25\16\26"+
    "\16\0\1\25\12\26\46\0\51\25\16\26\11\0\3\25\1\26\10\25"+
    "\2\26\2\0\12\26\6\0\27\25\3\0\1\25\1\26\4\0\60\25"+
    "\1\26\1\25\3\26\2\25\2\26\5\25\2\26\1\25\1\26\1\25"+
    "\30\0\3\25\2\0\13\25\5\26\2\0\3\25\2\26\12\0\6\25"+
    "\2\0\6\25\2\0\6\25\11\0\7\25\1\0\7\25\221\0\43\25"+
    "\10\26\1\0\2\26\2\0\12\26\6\0\u2ba4\25\14\0\27\25\4\0"+
    "\61\25\u2104\0\u016e\25\2\0\152\25\46\0\7\25\14\0\5\25\5\0"+
    "\1\25\1\26\12\25\1\0\15\25\1\0\5\25\1\0\1\25\1\0"+
    "\2\25\1\0\2\25\1\0\154\25\41\0\u016b\25\22\0\100\25\2\0"+
    "\66\25\50\0\15\25\3\0\20\26\20\0\7\26\14\0\2\25\30\0"+
    "\3\25\31\0\1\25\6\0\5\25\1\0\207\25\2\0\1\26\4\0"+
    "\1\25\13\0\12\26\7\0\32\25\4\0\1\25\1\0\32\25\13\0"+
    "\131\25\3\0\6\25\2\0\6\25\2\0\6\25\2\0\3\25\3\0"+
    "\2\25\3\0\2\25\22\0\3\26\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    66,   132,   198,   264,   330,   264,   396,   462,   528, 
      594,   660,   264,   264,   726,   792,   858,   924,   990,   264, 
      264,   264,   264,   264,   264,   264,   264,   264,  1056,  1122, 
     1188,   264,   264,  1254,  1320,  1386,  1452,  1518,  1584,  1650, 
     1716,  1782,  1848,  1914,  1980,  2046,  2112,  2178,  2178,  2244, 
     2310,  2376,  2310,  2442,  2508,  2574,  2574,  2574,  2640,  2706, 
     2772,  2838,  2904,  2970,  3036,  3102,   264,   264,  3168,  3234, 
      264,   264,   264,   264,  3300,   264,   264,   264,   264,   264, 
      264,   264,  3366,   264,  3432,  3498,  3564,  3630,  3696,  3762, 
     3828,  3894,  3960,  4026,  4092,  4158,  4224,  4290,  4356,  4422, 
     4488,  4554,  4620,  4686,  4752,  4818,  4884,  4950,  5016,  5082, 
     5148,  5214,   264,   264,   264,   264,   264,   264,   264,   264, 
      264,  2508,  5280,  5346,  5412,  5478,  5544,  5610,  5676,  5742, 
     5808,  5874,   264,  5940,  6006,  6072,  2574,  6138,  6204,  6270, 
     6336,  6402,   264,  6468,   264,   264,   264,   528,  6534,  6600, 
     6666,  6732,  6798,  6864,  6930,  6996,  7062,  7128,  7194,   528, 
     7260,  7326,  7392,  7458,  7524,  7590,  7656,  7722,  7788,  7854, 
     7920,  7986,  8052,  8118,  8184,  8250,   264,   264,  8316,   264, 
      264,   264,   264,   264,   264,   264,   264,  8382,  8448,  2574, 
     8514,  8580,  8646,   528,  8712,  8778,  8844,  8910,  8976,  9042, 
     9108,  9174,   528,  9240,  9306,  9372,  9438,   528,   528,   528, 
     9504,  9570,  9636,  9702,  9768,   528,  9834,  9900,  9966, 10032, 
    10098, 10164, 10230, 10296, 10362, 10428, 10494, 10560, 10626, 10692, 
    10758,   528, 10824, 10890, 10956, 11022, 11088,   528, 11154,   528, 
    11220, 11286,   528,   528,   528, 11352, 11418, 11484,   528, 11550, 
    11616, 11682, 11748,   528, 11814, 11880, 11946,   528, 12012, 12078, 
      528, 12144, 12210, 12276, 12342, 12408, 12474,   528,   528,   528, 
    12540, 12606, 12672, 12738, 12804, 12870, 12936,   528, 13002, 13068, 
    13134, 13200, 13266, 13332,   528, 13398, 13464, 13530, 13596,   528, 
    13662, 13728, 13794,   528, 13860, 13926, 13992,   528, 14058, 14124, 
    14190, 14256,   264,   528,   528, 14322, 14388, 14454, 14520, 14586, 
    14652, 14718, 14784,   528, 14850, 14916, 14982, 15048, 15114, 15180, 
    15246, 15312, 15378, 15444, 15510, 15576, 15642, 15708, 15708, 15774, 
    15840, 15906, 15972, 16038, 16104
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\5\1\6\2\7\1\10\1\11\3\12\3\10\1\12"+
    "\1\13\1\12\1\14\1\15\1\16\1\5\1\17\1\20"+
    "\1\12\1\5\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\12"+
    "\1\46\1\47\1\50\2\12\1\51\3\12\1\52\1\53"+
    "\1\54\1\12\1\55\1\12\1\56\1\57\4\12\1\60"+
    "\2\5\15\60\1\15\1\61\1\62\57\60\1\63\2\5"+
    "\1\63\2\64\3\63\3\64\4\63\1\65\1\16\1\66"+
    "\57\63\4\5\2\67\3\5\3\67\4\5\1\15\1\16"+
    "\60\5\104\0\1\7\103\0\2\10\1\70\2\71\3\10"+
    "\1\72\1\73\1\74\6\0\1\71\24\0\1\71\1\74"+
    "\13\71\1\70\5\71\1\72\4\71\4\0\1\75\1\76"+
    "\1\70\1\77\1\71\1\100\1\101\1\102\1\72\1\73"+
    "\1\74\6\0\1\71\24\0\1\71\1\74\13\71\1\70"+
    "\5\71\1\72\3\71\1\77\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\30\12\4\0\2\73\3\0\3\73"+
    "\105\0\1\103\11\0\1\104\73\0\1\105\1\106\4\0"+
    "\1\107\101\0\1\110\77\0\1\111\1\0\1\112\100\0"+
    "\1\113\1\114\101\0\1\115\101\0\1\116\11\0\1\117"+
    "\67\0\1\120\101\0\1\121\101\0\1\122\16\0\1\123"+
    "\62\0\1\124\54\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\1\12\1\125\2\12\1\126\12\12\1\127\10\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\27\12"+
    "\1\130\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\4\12\1\131\6\12\1\132\3\12\1\133\10\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\11\12\1\134"+
    "\6\12\1\135\7\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\15\12\1\136\7\12\1\137\2\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\1\140\10\12"+
    "\1\141\16\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\13\12\1\142\11\12\1\143\2\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\12\12\1\144\15\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\14\12"+
    "\1\145\2\12\1\146\4\12\1\147\1\150\2\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\12\12\1\151"+
    "\11\12\1\152\3\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\12\12\1\153\15\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\4\12\1\154\3\12\1\155"+
    "\4\12\1\156\12\12\1\60\2\0\15\60\1\0\1\60"+
    "\1\0\57\60\5\0\1\157\3\0\2\157\1\160\4\0"+
    "\1\161\1\162\1\163\27\0\1\164\12\0\1\165\1\166"+
    "\3\0\1\167\2\0\1\170\25\0\1\171\64\0\2\172"+
    "\3\71\3\172\1\71\1\0\1\71\2\0\1\171\3\0"+
    "\1\71\24\0\30\71\5\0\1\173\3\0\2\173\1\174"+
    "\4\0\1\175\1\176\1\177\27\0\1\200\12\0\1\201"+
    "\1\202\3\0\1\203\2\0\1\204\10\0\2\172\3\71"+
    "\3\172\1\71\1\0\1\71\6\0\1\71\24\0\30\71"+
    "\4\0\11\71\1\0\1\71\6\0\2\71\23\0\30\71"+
    "\4\0\2\73\3\0\3\73\1\205\1\0\1\206\34\0"+
    "\1\206\21\0\1\205\10\0\2\207\3\71\3\207\1\71"+
    "\1\0\1\71\1\210\5\0\2\71\14\0\1\210\6\0"+
    "\30\71\4\0\2\75\3\71\3\75\1\72\1\73\1\74"+
    "\6\0\1\71\24\0\1\71\1\74\21\71\1\72\4\71"+
    "\4\0\1\75\1\76\1\211\2\71\1\100\1\101\1\102"+
    "\1\72\1\73\1\74\6\0\1\71\24\0\1\71\1\74"+
    "\13\71\1\211\5\71\1\72\4\71\4\0\1\212\1\213"+
    "\2\71\5\212\1\0\1\212\6\0\2\71\23\0\1\71"+
    "\1\212\2\71\2\212\12\71\2\212\1\71\1\212\4\71"+
    "\4\0\1\75\1\214\1\211\2\71\3\214\1\72\1\73"+
    "\1\74\6\0\1\71\24\0\1\71\1\74\13\71\1\211"+
    "\5\71\1\72\4\71\4\0\1\75\1\102\1\211\2\71"+
    "\3\102\1\72\1\73\1\74\6\0\1\71\24\0\1\71"+
    "\1\74\13\71\1\211\5\71\1\72\4\71\4\0\1\75"+
    "\1\215\1\211\2\71\3\215\1\72\1\73\1\74\6\0"+
    "\1\71\24\0\1\71\1\74\13\71\1\211\5\71\1\72"+
    "\4\71\1\105\1\216\1\217\77\105\24\106\1\220\55\106"+
    "\30\0\1\221\1\222\101\0\1\223\54\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\2\12\1\224\25\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\14\12\1\225"+
    "\13\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\15\12\1\226\12\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\14\12\1\227\13\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\5\12\1\230\22\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\10\12\1\231"+
    "\1\12\1\232\15\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\20\12\1\233\7\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\3\12\1\234\24\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\16\12\1\235"+
    "\11\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\4\12\1\236\23\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\4\12\1\237\23\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\14\12\1\240\1\12\1\241"+
    "\11\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\3\12\1\242\24\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\4\12\1\243\12\12\1\244\10\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\10\12\1\245"+
    "\17\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\1\246\27\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\4\12\1\247\23\12\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\3\12\1\250\24\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\1\251\27\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\12\12\1\252"+
    "\15\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\12\12\1\253\15\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\14\12\1\254\13\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\15\12\1\255\12\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\15\12\1\256"+
    "\12\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\1\257\27\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\12\12\1\260\15\12\5\0\1\160\3\0\3\160"+
    "\73\0\1\261\3\0\3\261\73\0\1\174\3\0\3\174"+
    "\5\0\1\262\65\0\1\263\3\0\3\263\5\0\1\262"+
    "\101\0\1\264\101\0\1\265\101\0\1\266\101\0\1\267"+
    "\101\0\1\270\101\0\1\271\101\0\1\272\101\0\1\273"+
    "\64\0\2\274\3\0\3\274\3\0\1\210\23\0\1\210"+
    "\42\0\2\207\3\71\3\207\1\72\1\0\1\71\6\0"+
    "\2\71\23\0\23\71\1\72\4\71\4\0\2\274\3\0"+
    "\3\274\72\0\2\275\1\276\1\71\5\275\1\0\1\275"+
    "\6\0\2\71\23\0\1\71\1\275\2\71\2\275\7\71"+
    "\1\276\2\71\2\275\1\71\1\275\4\71\4\0\1\212"+
    "\1\213\1\276\1\71\5\212\1\0\1\212\6\0\2\71"+
    "\23\0\1\71\1\212\2\71\2\212\7\71\1\276\2\71"+
    "\2\212\1\71\1\212\4\71\4\0\1\75\1\277\1\211"+
    "\2\71\3\277\1\72\1\73\1\74\6\0\1\71\24\0"+
    "\1\71\1\74\13\71\1\211\5\71\1\72\4\71\4\0"+
    "\1\75\1\300\1\211\2\71\3\300\1\72\1\73\1\74"+
    "\6\0\1\71\24\0\1\71\1\74\13\71\1\211\5\71"+
    "\1\72\4\71\2\0\1\217\77\0\23\106\1\217\1\220"+
    "\55\106\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\10\12\1\301\17\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\15\12\1\302\12\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\1\12\1\303\26\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\6\12\1\304"+
    "\21\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\22\12\1\305\5\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\14\12\1\306\13\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\15\12\1\307\12\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\1\12\1\310"+
    "\26\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\14\12\1\311\13\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\16\12\1\312\11\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\13\12\1\313\14\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\14\12\1\314"+
    "\13\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\12\12\1\315\2\12\1\316\12\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\1\317\27\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\1\12\1\320\26\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\16\12"+
    "\1\321\11\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\7\12\1\322\20\12\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\14\12\1\323\13\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\1\12\1\324\26\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\5\12"+
    "\1\325\22\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\13\12\1\326\14\12\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\15\12\1\327\12\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\1\12\1\330\26\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\4\12"+
    "\1\331\23\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\16\12\1\332\11\12\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\4\12\1\333\23\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\4\12\1\334\23\12"+
    "\21\0\1\262\64\0\2\274\3\0\3\274\1\205\60\0"+
    "\1\205\10\0\2\335\1\276\1\71\5\335\1\0\1\335"+
    "\6\0\2\71\23\0\1\71\1\335\2\71\2\335\7\71"+
    "\1\276\2\71\2\335\1\71\1\335\4\71\4\0\1\75"+
    "\1\336\1\211\2\71\3\336\1\72\1\73\1\74\6\0"+
    "\1\71\24\0\1\71\1\74\13\71\1\211\5\71\1\72"+
    "\4\71\4\0\1\75\1\337\1\211\2\71\3\337\1\72"+
    "\1\73\1\74\6\0\1\71\24\0\1\71\1\74\13\71"+
    "\1\211\5\71\1\72\4\71\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\22\12\1\340\5\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\1\341\27\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\4\12\1\342"+
    "\23\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\4\12\1\343\23\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\1\12\1\344\26\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\10\12\1\345\17\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\13\12\1\346"+
    "\14\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\13\12\1\347\14\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\16\12\1\350\11\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\4\12\1\351\23\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\13\12\1\352"+
    "\14\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\1\12\1\353\26\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\16\12\1\354\11\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\10\12\1\355\17\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\13\12\1\356"+
    "\14\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\25\12\1\357\2\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\14\12\1\360\13\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\1\12\1\361\26\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\14\12\1\362"+
    "\13\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\1\12\1\363\26\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\15\12\1\364\12\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\14\12\1\365\13\12\4\0"+
    "\2\366\1\276\1\71\5\366\1\0\1\366\6\0\2\71"+
    "\23\0\1\71\1\366\2\71\2\366\7\71\1\276\2\71"+
    "\2\366\1\71\1\366\4\71\4\0\1\75\1\367\1\211"+
    "\2\71\3\367\1\72\1\73\1\74\6\0\1\71\24\0"+
    "\1\71\1\74\13\71\1\211\5\71\1\72\4\71\4\0"+
    "\1\75\1\370\1\211\2\71\3\370\1\72\1\73\1\74"+
    "\6\0\1\71\24\0\1\71\1\74\13\71\1\211\5\71"+
    "\1\72\4\71\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\1\12\1\371\26\12\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\21\12\1\372\6\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\7\12\1\373\20\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\14\12"+
    "\1\374\13\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\5\12\1\375\22\12\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\5\12\1\376\22\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\16\12\1\377\11\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\4\12"+
    "\1\u0100\23\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\1\u0101\27\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\14\12\1\u0102\13\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\11\12\1\u0103\16\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\10\12\1\u0104"+
    "\17\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\5\12\1\u0105\22\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\13\12\1\u0106\14\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\4\12\1\u0107\23\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\10\12\1\u0108"+
    "\17\12\4\0\2\u0109\1\276\1\71\5\u0109\1\0\1\u0109"+
    "\6\0\2\71\23\0\1\71\1\u0109\2\71\2\u0109\7\71"+
    "\1\276\2\71\2\u0109\1\71\1\u0109\4\71\4\0\1\75"+
    "\1\u010a\1\211\2\71\3\u010a\1\72\1\73\1\74\6\0"+
    "\1\71\24\0\1\71\1\74\13\71\1\211\5\71\1\72"+
    "\4\71\4\0\1\75\1\u010b\1\211\2\71\3\u010b\1\72"+
    "\1\73\1\74\6\0\1\71\24\0\1\71\1\74\13\71"+
    "\1\211\5\71\1\72\4\71\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\16\12\1\u010c\11\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\1\12\1\u010d\26\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\1\12"+
    "\1\u010e\26\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\14\12\1\u010f\13\12\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\4\12\1\u0110\23\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\5\12\1\u0111\22\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\5\12"+
    "\1\u0112\22\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\1\12\1\u0113\26\12\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\1\12\1\u0114\26\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\12\12\1\u0115\15\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\1\u0116"+
    "\27\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\15\12\1\u0117\12\12\4\0\2\u0118\1\276\1\71\5\u0118"+
    "\1\0\1\u0118\6\0\2\71\23\0\1\71\1\u0118\2\71"+
    "\2\u0118\7\71\1\276\2\71\2\u0118\1\71\1\u0118\4\71"+
    "\4\0\1\75\1\u0119\1\211\2\71\3\u0119\1\72\1\73"+
    "\1\74\6\0\1\71\24\0\1\71\1\74\13\71\1\211"+
    "\5\71\1\72\4\71\4\0\1\75\1\u011a\1\211\2\71"+
    "\3\u011a\1\72\1\73\1\74\6\0\1\71\24\0\1\71"+
    "\1\74\13\71\1\211\5\71\1\72\4\71\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\1\12\1\u011b\26\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\1\u011c"+
    "\27\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\14\12\1\u011d\13\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\1\12\1\u011e\26\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\1\u011f\27\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\1\u0120\27\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\1\u0121\27\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\1\12"+
    "\1\u0122\26\12\4\0\2\u0123\1\276\1\71\5\u0123\1\0"+
    "\1\u0123\6\0\2\71\23\0\1\71\1\u0123\2\71\2\u0123"+
    "\7\71\1\276\2\71\2\u0123\1\71\1\u0123\4\71\4\0"+
    "\1\75\1\u0124\1\211\2\71\3\u0124\1\72\1\73\1\74"+
    "\6\0\1\71\24\0\1\71\1\74\13\71\1\211\5\71"+
    "\1\72\4\71\4\0\1\75\1\u0125\1\211\2\71\3\u0125"+
    "\1\72\1\73\1\74\6\0\1\71\24\0\1\71\1\74"+
    "\13\71\1\211\5\71\1\72\4\71\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\21\12\1\u0126\6\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\21\12\1\u0127"+
    "\6\12\4\0\11\12\1\0\1\12\6\0\2\12\23\0"+
    "\12\12\1\u0128\15\12\4\0\11\12\1\0\1\12\6\0"+
    "\2\12\23\0\14\12\1\u0129\13\12\4\0\11\12\1\0"+
    "\1\12\6\0\2\12\23\0\14\12\1\u012a\13\12\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\10\12\1\u012b"+
    "\17\12\4\0\2\u012c\1\276\1\71\5\u012c\1\0\1\u012c"+
    "\6\0\2\71\23\0\1\71\1\u012c\2\71\2\u012c\7\71"+
    "\1\276\2\71\2\u012c\1\71\1\u012c\4\71\4\0\1\75"+
    "\1\u012d\1\211\2\71\3\u012d\1\72\1\73\1\74\6\0"+
    "\1\71\24\0\1\71\1\74\13\71\1\211\5\71\1\72"+
    "\4\71\4\0\1\75\1\u012e\1\211\2\71\3\u012e\1\72"+
    "\1\73\1\74\6\0\1\71\24\0\1\71\1\74\13\71"+
    "\1\211\5\71\1\72\4\71\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\2\0\1\u012f\20\0\30\12\4\0\11\12"+
    "\1\0\1\12\6\0\2\12\23\0\23\12\1\u0130\4\12"+
    "\4\0\11\12\1\0\1\12\6\0\2\12\23\0\16\12"+
    "\1\u0131\11\12\4\0\11\12\1\0\1\12\6\0\2\12"+
    "\23\0\26\12\1\u0132\1\12\4\0\2\u0133\1\276\1\71"+
    "\5\u0133\1\0\1\u0133\6\0\2\71\23\0\1\71\1\u0133"+
    "\2\71\2\u0133\7\71\1\276\2\71\2\u0133\1\71\1\u0133"+
    "\4\71\4\0\1\75\1\u0134\1\211\2\71\3\u0134\1\72"+
    "\1\73\1\74\6\0\1\71\24\0\1\71\1\74\13\71"+
    "\1\211\5\71\1\72\4\71\4\0\1\75\1\u0135\1\211"+
    "\2\71\3\u0135\1\72\1\73\1\74\6\0\1\71\24\0"+
    "\1\71\1\74\13\71\1\211\5\71\1\72\4\71\4\0"+
    "\11\12\1\0\1\12\6\0\2\12\23\0\1\12\1\u0136"+
    "\26\12\4\0\2\u0137\1\276\1\71\5\u0137\1\0\1\u0137"+
    "\6\0\2\71\23\0\1\71\1\u0137\2\71\2\u0137\7\71"+
    "\1\276\2\71\2\u0137\1\71\1\u0137\4\71\4\0\1\75"+
    "\1\u0138\1\211\2\71\3\u0138\1\72\1\73\1\74\6\0"+
    "\1\71\24\0\1\71\1\74\13\71\1\211\5\71\1\72"+
    "\4\71\4\0\1\75\1\u0139\1\211\2\71\3\u0139\1\72"+
    "\1\73\1\74\6\0\1\71\24\0\1\71\1\74\13\71"+
    "\1\211\5\71\1\72\4\71\4\0\11\12\1\0\1\12"+
    "\6\0\2\12\23\0\21\12\1\u013a\6\12\4\0\2\u013b"+
    "\1\276\1\71\5\u013b\1\0\1\u013b\6\0\2\71\23\0"+
    "\1\71\1\u013b\2\71\2\u013b\7\71\1\276\2\71\2\u013b"+
    "\1\71\1\u013b\4\71\4\0\1\75\1\u013c\1\211\2\71"+
    "\3\u013c\1\72\1\73\1\74\6\0\1\71\24\0\1\71"+
    "\1\74\13\71\1\211\5\71\1\72\4\71\4\0\1\75"+
    "\1\u013d\1\211\2\71\3\u013d\1\72\1\73\1\74\6\0"+
    "\1\71\24\0\1\71\1\74\13\71\1\211\5\71\1\72"+
    "\4\71\4\0\2\u013e\1\276\1\71\5\u013e\1\0\1\u013e"+
    "\6\0\2\71\23\0\1\71\1\u013e\2\71\2\u013e\7\71"+
    "\1\276\2\71\2\u013e\1\71\1\u013e\4\71\4\0\1\75"+
    "\1\u013f\1\211\2\71\3\u013f\1\72\1\73\1\74\6\0"+
    "\1\71\24\0\1\71\1\74\13\71\1\211\5\71\1\72"+
    "\4\71\4\0\1\75\1\u0140\1\211\2\71\3\u0140\1\72"+
    "\1\73\1\74\6\0\1\71\24\0\1\71\1\74\13\71"+
    "\1\211\5\71\1\72\4\71\4\0\2\u0141\1\276\1\71"+
    "\5\u0141\1\0\1\u0141\6\0\2\71\23\0\1\71\1\u0141"+
    "\2\71\2\u0141\7\71\1\276\2\71\2\u0141\1\71\1\u0141"+
    "\4\71\4\0\1\75\1\u0142\1\211\2\71\3\u0142\1\72"+
    "\1\73\1\74\6\0\1\71\24\0\1\71\1\74\13\71"+
    "\1\211\5\71\1\72\4\71\4\0\1\75\1\u0143\1\211"+
    "\2\71\3\u0143\1\72\1\73\1\74\6\0\1\71\24\0"+
    "\1\71\1\74\13\71\1\211\5\71\1\72\4\71\4\0"+
    "\2\u0144\1\276\1\71\5\u0144\1\0\1\u0144\6\0\2\71"+
    "\23\0\1\71\1\u0144\2\71\2\u0144\7\71\1\276\2\71"+
    "\2\u0144\1\71\1\u0144\4\71\4\0\1\75\1\u0145\1\211"+
    "\2\71\3\u0145\1\72\1\73\1\74\6\0\1\71\24\0"+
    "\1\71\1\74\13\71\1\211\5\71\1\72\4\71\4\0"+
    "\1\75\1\u0146\1\211\2\71\3\u0146\1\72\1\73\1\74"+
    "\6\0\1\71\24\0\1\71\1\74\13\71\1\211\5\71"+
    "\1\72\4\71\4\0\2\u0147\1\276\1\71\5\u0147\1\0"+
    "\1\u0147\6\0\2\71\23\0\1\71\1\u0147\2\71\2\u0147"+
    "\7\71\1\276\2\71\2\u0147\1\71\1\u0147\4\71\4\0"+
    "\1\75\1\u0148\1\211\2\71\3\u0148\1\72\1\73\1\74"+
    "\6\0\1\71\24\0\1\71\1\74\13\71\1\211\5\71"+
    "\1\72\4\71\4\0\1\75\1\u0149\1\211\2\71\3\u0149"+
    "\1\72\1\73\1\74\6\0\1\71\24\0\1\71\1\74"+
    "\13\71\1\211\5\71\1\72\4\71\4\0\2\u014a\1\276"+
    "\1\71\5\u014a\1\0\1\u014a\6\0\2\71\23\0\1\71"+
    "\1\u014a\2\71\2\u014a\7\71\1\276\2\71\2\u014a\1\71"+
    "\1\u014a\4\71\4\0\1\75\1\u014b\1\211\2\71\3\u014b"+
    "\1\72\1\73\1\74\6\0\1\71\24\0\1\71\1\74"+
    "\13\71\1\211\5\71\1\72\4\71\4\0\2\71\1\276"+
    "\6\71\1\0\1\71\6\0\2\71\23\0\15\71\1\276"+
    "\12\71\4\0\1\75\1\u014c\1\211\2\71\3\u014c\1\72"+
    "\1\73\1\74\6\0\1\71\24\0\1\71\1\74\13\71"+
    "\1\211\5\71\1\72\4\71\4\0\1\75\1\u014d\1\211"+
    "\2\71\3\u014d\1\72\1\73\1\74\6\0\1\71\24\0"+
    "\1\71\1\74\13\71\1\211\5\71\1\72\4\71\4\0"+
    "\1\75\1\u014e\1\211\2\71\3\u014e\1\72\1\73\1\74"+
    "\6\0\1\71\24\0\1\71\1\74\13\71\1\211\5\71"+
    "\1\72\4\71\4\0\1\75\1\u014f\1\211\2\71\3\u014f"+
    "\1\72\1\73\1\74\6\0\1\71\24\0\1\71\1\74"+
    "\13\71\1\211\5\71\1\72\4\71\4\0\2\75\1\211"+
    "\2\71\3\75\1\72\1\73\1\74\6\0\1\71\24\0"+
    "\1\71\1\74\13\71\1\211\5\71\1\72\4\71";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  9,  9,  1,  1, 
     1,  1,  1,  9,  9,  9,  9,  9,  9,  9,  9,  9,  1,  1,  1,  9, 
     9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  0,  1,  1,  1, 
     1,  1,  9,  9,  0,  0,  9,  9,  9,  9,  1,  9,  9,  9,  9,  9, 
     9,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  1,  0,  1,  1,  1,  1,  1,  1,  9,  0, 
     9,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     9,  9,  0,  9,  9,  9,  9,  9,  9,  9,  9,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  0,  0,  0,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	
	StringBuffer string = new StringBuffer();
    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    private long parseLong(int start, int end, int radix) {
    	long result = 0;
    	long digit;

    	for (int i = start; i < end; i++) {
      		digit  = Character.digit(yycharat(i),radix);
      		result*= radix;
      		result+= digit;
    	}
    	return result;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[16170];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 277: 
          {  return symbolFactory.newSymbol("BOOLEAN", BOOLEAN);  }
        case 336: break;
        case 269: 
          {  return symbolFactory.newSymbol("PRIVATE", PRIVATE);  }
        case 337: break;
        case 268: 
          {  return symbolFactory.newSymbol("PACKAGE", PACKAGE);  }
        case 338: break;
        case 267: 
          {  return symbolFactory.newSymbol("EXTENDS", EXTENDS);  }
        case 339: break;
        case 77: 
          {  return symbolFactory.newSymbol("MINUSEQ", MINUSEQ);  }
        case 340: break;
        case 244: 
          {  return symbolFactory.newSymbol("FLOAT", FLOAT);  }
        case 341: break;
        case 243: 
          {  return symbolFactory.newSymbol("FINAL", FINAL);  }
        case 342: break;
        case 242: 
          {  return symbolFactory.newSymbol("FALSE", FALSE);  }
        case 343: break;
        case 239: 
          {  return symbolFactory.newSymbol("SHORT", SHORT);  }
        case 344: break;
        case 237: 
          {  return symbolFactory.newSymbol("SUPER", SUPER);  }
        case 345: break;
        case 231: 
          {  return symbolFactory.newSymbol("CLASS", CLASS);  }
        case 346: break;
        case 32: 
          {  return symbolFactory.newSymbol("COLON", COLON);  }
        case 347: break;
        case 28: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 348: break;
        case 10: 
          {  return symbolFactory.newSymbol("POINT", POINT);  }
        case 349: break;
        case 21: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 350: break;
        case 70: 
          {  return symbolFactory.newSymbol("DIVEQ", DIVEQ);  }
        case 351: break;
        case 79: 
          {  return symbolFactory.newSymbol("MODEQ", MODEQ);  }
        case 352: break;
        case 80: 
          {  return symbolFactory.newSymbol("NOTEQ", NOTEQ);  }
        case 353: break;
        case 83: 
          {  return symbolFactory.newSymbol("XOREQ", XOREQ);  }
        case 354: break;
        case 12: 
        case 52: 
          {  yybegin(STRING); string.setLength(0);  }
        case 355: break;
        case 304: 
          {  return symbolFactory.newSymbol("IMPLEMENTS", IMPLEMENTS);  }
        case 356: break;
        case 303: 
          {  return symbolFactory.newSymbol("INSTANCEOF", INSTANCEOF);  }
        case 357: break;
        case 78: 
          {  return symbolFactory.newSymbol("MINUSMINUS", MINUSMINUS);  }
        case 358: break;
        case 141: 
        case 142: 
          {  /* ignore */  }
        case 359: break;
        case 34: 
          {  return symbolFactory.newSymbol("XOR", XOR);  }
        case 360: break;
        case 30: 
          {  return symbolFactory.newSymbol("NOT", NOT);  }
        case 361: break;
        case 29: 
          {  return symbolFactory.newSymbol("MOD", MOD);  }
        case 362: break;
        case 14: 
          {  return symbolFactory.newSymbol("DIV", DIV);  }
        case 363: break;
        case 112: 
          {  string.append( '\"' );  }
        case 364: break;
        case 113: 
          {  string.append( '\'' );  }
        case 365: break;
        case 114: 
          {  string.append( '\\' );  }
        case 366: break;
        case 115: 
          {  string.append( '\n' );  }
        case 367: break;
        case 116: 
          {  string.append( '\r' );  }
        case 368: break;
        case 117: 
          {  string.append( '\t' );  }
        case 369: break;
        case 118: 
          {  string.append( '\b' );  }
        case 370: break;
        case 119: 
          {  string.append( '\f' );  }
        case 371: break;
        case 147: 
          {  return symbolFactory.newSymbol("NEW", NEW);  }
        case 372: break;
        case 159: 
          {  return symbolFactory.newSymbol("INT", INT);  }
        case 373: break;
        case 289: 
          {  return symbolFactory.newSymbol("VOLATILE", VOLATILE);  }
        case 374: break;
        case 284: 
          {  return symbolFactory.newSymbol("ABSTRACT", ABSTRACT);  }
        case 375: break;
        case 66: 
          {  return symbolFactory.newSymbol("PLUSPLUS", PLUSPLUS);  }
        case 376: break;
        case 31: 
          {  return symbolFactory.newSymbol("QUESTION", QUESTION);  }
        case 377: break;
        case 145: 
          {  return symbolFactory.newSymbol("RSHIFTEQ", RSHIFTEQ);  }
        case 378: break;
        case 302: 
          {  return symbolFactory.newSymbol("AMPERSANDEQ", AMPERSANDEQ);  }
        case 379: break;
        case 215: 
          {  return symbolFactory.newSymbol("BYTE", BYTE);  }
        case 380: break;
        case 209: 
          {  return symbolFactory.newSymbol("LONG", LONG);  }
        case 381: break;
        case 208: 
          {  return symbolFactory.newSymbol("THIS", THIS);  }
        case 382: break;
        case 207: 
          {  return symbolFactory.newSymbol("TRUE", TRUE);  }
        case 383: break;
        case 202: 
          {  return symbolFactory.newSymbol("CHAR", CHAR);  }
        case 384: break;
        case 193: 
          {  return symbolFactory.newSymbol("NULL", NULL);  }
        case 385: break;
        case 11: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 386: break;
        case 15: 
          {  return symbolFactory.newSymbol("MULT", MULT);  }
        case 387: break;
        case 19: 
          {  return symbolFactory.newSymbol("COMP", COMP);  }
        case 388: break;
        case 20: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 389: break;
        case 73: 
          {  return symbolFactory.newSymbol("LTEQ", LTEQ);  }
        case 390: break;
        case 75: 
          {  return symbolFactory.newSymbol("GTEQ", GTEQ);  }
        case 391: break;
        case 76: 
          {  return symbolFactory.newSymbol("EQEQ", EQEQ);  }
        case 392: break;
        case 81: 
          {  return symbolFactory.newSymbol("OREQ", OREQ);  }
        case 393: break;
        case 82: 
          {  return symbolFactory.newSymbol("OROR", OROR);  }
        case 394: break;
        case 297: 
          {  return symbolFactory.newSymbol("TRANSIENT", TRANSIENT);  }
        case 395: break;
        case 294: 
          {  return symbolFactory.newSymbol("AMPERSAND", AMPERSAND);  }
        case 396: break;
        case 293: 
          {  return symbolFactory.newSymbol("PROTECTED", PROTECTED);  }
        case 397: break;
        case 260: 
          {  return symbolFactory.newSymbol("STATIC", STATIC);  }
        case 398: break;
        case 257: 
          {  return symbolFactory.newSymbol("IMPORT", IMPORT);  }
        case 399: break;
        case 253: 
          {  return symbolFactory.newSymbol("PUBLIC", PUBLIC);  }
        case 400: break;
        case 248: 
          {  return symbolFactory.newSymbol("NATIVE", NATIVE);  }
        case 401: break;
        case 27: 
          {  return symbolFactory.newSymbol("RBRACK", RBRACK);  }
        case 402: break;
        case 26: 
          {  return symbolFactory.newSymbol("LBRACK", LBRACK);  }
        case 403: break;
        case 25: 
          {  return symbolFactory.newSymbol("RBRACE", RBRACE);  }
        case 404: break;
        case 24: 
          {  return symbolFactory.newSymbol("LBRACE", LBRACE);  }
        case 405: break;
        case 23: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 406: break;
        case 22: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 407: break;
        case 67: 
          {  return symbolFactory.newSymbol("PLUSEQ", PLUSEQ);  }
        case 408: break;
        case 71: 
          {  return symbolFactory.newSymbol("MULTEQ", MULTEQ);  }
        case 409: break;
        case 72: 
          {  return symbolFactory.newSymbol("LSHIFT", LSHIFT);  }
        case 410: break;
        case 74: 
          {  return symbolFactory.newSymbol("RSHIFT", RSHIFT);  }
        case 411: break;
        case 144: 
          {  return symbolFactory.newSymbol("SSHIFT", SSHIFT);  }
        case 412: break;
        case 146: 
          {  return symbolFactory.newSymbol("OROREQ", OROREQ);  }
        case 413: break;
        case 186: 
          {  yybegin(YYINITIAL); return symbolFactory.newSymbol("CHARACTER_LITERAL", CHARACTER_LITERAL, new Character('\f')); }
        case 414: break;
        case 185: 
          {  yybegin(YYINITIAL); return symbolFactory.newSymbol("CHARACTER_LITERAL", CHARACTER_LITERAL, new Character('\b')); }
        case 415: break;
        case 184: 
          {  yybegin(YYINITIAL); return symbolFactory.newSymbol("CHARACTER_LITERAL", CHARACTER_LITERAL, new Character('\t')); }
        case 416: break;
        case 183: 
          {  yybegin(YYINITIAL); return symbolFactory.newSymbol("CHARACTER_LITERAL", CHARACTER_LITERAL, new Character('\r')); }
        case 417: break;
        case 182: 
          {  yybegin(YYINITIAL); return symbolFactory.newSymbol("CHARACTER_LITERAL", CHARACTER_LITERAL, new Character('\n')); }
        case 418: break;
        case 55: 
          {  return symbolFactory.newSymbol("INTEGER_LITERAL_LONG", INTEGER_LITERAL_LONG, new Long(yytext().substring(0,yylength()-1)));  }
        case 419: break;
        case 137: 
        case 138: 
        case 188: 
        case 220: 
        case 245: 
        case 264: 
        case 279: 
        case 290: 
        case 299: 
          {  return symbolFactory.newSymbol("HEX_LITERAL", HEX_LITERAL, new Integer((int) parseLong(2, yylength(), 16)));  }
        case 420: break;
        case 179: 
          {  yybegin(YYINITIAL); return symbolFactory.newSymbol("CHARACTER_LITERAL", CHARACTER_LITERAL, new Character('\"')); }
        case 421: break;
        case 180: 
          {  yybegin(YYINITIAL); return symbolFactory.newSymbol("CHARACTER_LITERAL", CHARACTER_LITERAL, new Character('\'')); }
        case 422: break;
        case 189: 
          {  return symbolFactory.newSymbol("HEX_LITERAL_LONG", HEX_LITERAL_LONG, new Long(parseLong(2, yylength()-1, 16)));  }
        case 423: break;
        case 136: 
          {  return symbolFactory.newSymbol("OCT_LITERAL_LONG", OCT_LITERAL_LONG, new Long(parseLong(0, yylength()-1, 8)));  }
        case 424: break;
        case 57: 
        case 132: 
          {  return symbolFactory.newSymbol("FLOAT_LITERAL", FLOAT_LITERAL, new Float(yytext().substring(0,yylength()-1)));  }
        case 425: break;
        case 9: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 100: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 148: 
        case 149: 
        case 150: 
        case 151: 
        case 152: 
        case 153: 
        case 154: 
        case 155: 
        case 156: 
        case 157: 
        case 158: 
        case 160: 
        case 161: 
        case 162: 
        case 163: 
        case 164: 
        case 165: 
        case 166: 
        case 167: 
        case 168: 
        case 169: 
        case 170: 
        case 171: 
        case 172: 
        case 173: 
        case 174: 
        case 175: 
        case 192: 
        case 194: 
        case 195: 
        case 196: 
        case 197: 
        case 198: 
        case 199: 
        case 200: 
        case 201: 
        case 203: 
        case 204: 
        case 205: 
        case 206: 
        case 210: 
        case 211: 
        case 212: 
        case 213: 
        case 214: 
        case 216: 
        case 217: 
        case 218: 
        case 219: 
        case 223: 
        case 224: 
        case 225: 
        case 226: 
        case 227: 
        case 228: 
        case 229: 
        case 230: 
        case 232: 
        case 233: 
        case 234: 
        case 235: 
        case 236: 
        case 238: 
        case 240: 
        case 241: 
        case 249: 
        case 250: 
        case 251: 
        case 252: 
        case 254: 
        case 255: 
        case 256: 
        case 258: 
        case 259: 
        case 261: 
        case 262: 
        case 263: 
        case 270: 
        case 271: 
        case 272: 
        case 273: 
        case 274: 
        case 275: 
        case 276: 
        case 278: 
        case 282: 
        case 283: 
        case 285: 
        case 286: 
        case 287: 
        case 288: 
        case 295: 
        case 296: 
        case 298: 
        case 305: 
        case 309: 
          {  return symbolFactory.newSymbol("IDENTIFIER", IDENTIFIER, yytext().toString());  }
        case 426: break;
        case 120: 
          {  yybegin(YYINITIAL); return symbolFactory.newSymbol("CHARACTER_LITERAL", CHARACTER_LITERAL, new Character(yytext().charAt(0)));  }
        case 427: break;
        case 61: 
        case 63: 
        case 64: 
        case 65: 
        case 139: 
        case 140: 
        case 190: 
        case 191: 
        case 221: 
        case 222: 
        case 246: 
        case 247: 
        case 265: 
        case 266: 
        case 280: 
        case 281: 
        case 291: 
        case 292: 
        case 300: 
        case 301: 
        case 307: 
        case 308: 
        case 311: 
        case 312: 
        case 315: 
        case 316: 
        case 318: 
        case 319: 
        case 321: 
        case 322: 
        case 324: 
        case 325: 
        case 327: 
          {  return symbolFactory.newSymbol("OCT_LITERAL", OCT_LITERAL, new Integer((int) parseLong(0, yylength(), 8)));  }
        case 428: break;
        case 181: 
          {  yybegin(YYINITIAL); return symbolFactory.newSymbol("CHARACTER_LITERAL", CHARACTER_LITERAL, new Character('\\'));  }
        case 429: break;
        case 13: 
        case 48: 
          {  yybegin(CHARLITERAL);  }
        case 430: break;
        case 7: 
        case 8: 
          {  return symbolFactory.newSymbol("INTEGER_LITERAL", INTEGER_LITERAL, new Integer(yytext()));  }
        case 431: break;
        case 110: 
        case 111: 
        case 176: 
          {  char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );  }
        case 432: break;
        case 33: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 433: break;
        case 16: 
          {  return symbolFactory.newSymbol("LT", LT);  }
        case 434: break;
        case 17: 
          {  return symbolFactory.newSymbol("GT", GT);  }
        case 435: break;
        case 18: 
          {  return symbolFactory.newSymbol("EQ", EQ);  }
        case 436: break;
        case 313: 
          {  return symbolFactory.newSymbol("SYNCHRONIZED", SYNCHRONIZED);  }
        case 437: break;
        case 47: 
          {  string.append( yytext() );  }
        case 438: break;
        case 56: 
        case 59: 
        case 62: 
        case 134: 
        case 306: 
        case 310: 
        case 314: 
        case 317: 
        case 320: 
        case 323: 
        case 326: 
        case 329: 
          {  throw new RuntimeException("Variável não pode começar com número em \""+yytext()+
                                                             "\" na linha "+yyline+", coluna "+yycolumn);  }
        case 439: break;
        case 5: 
        case 6: 
          {                                }
        case 440: break;
        case 4: 
        case 49: 
        case 50: 
        case 51: 
        case 53: 
        case 54: 
          {  throw new RuntimeException("Caractere inválido \""+yytext()+
                                                             "\" na linha "+yyline+", coluna "+yycolumn);  }
        case 441: break;
        case 177: 
          {  yybegin(YYINITIAL); 
			                              int val = Integer.parseInt(yytext().substring(1,yylength()-1),8);
			                            return symbolFactory.newSymbol("CHARACTER_LITERAL", CHARACTER_LITERAL, new Character((char)val));  }
        case 442: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
