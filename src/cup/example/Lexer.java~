/* The following code was generated by JFlex 1.3.5 on 10/06/15 21:45 */

package cup.example;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java.lang.*;
import java.io.InputStreamReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 10/06/15 21:45 from the specification file
 * <tt>file:/C:/Users/Celio/Desktop/Estudo/2015.1/compiladores/CompJava/lexer.jflex</tt>
 */
public class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int CODESEG = 1;
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\1\31"+
    "\2\0\1\7\1\30\2\0\1\20\1\21\1\6\1\27\1\17\1\26"+
    "\1\16\1\5\12\4\1\33\1\15\1\11\1\13\1\12\1\32\1\0"+
    "\32\7\1\24\1\0\1\25\1\35\1\7\1\0\1\37\1\54\1\40"+
    "\1\55\1\43\1\57\1\42\1\62\1\44\1\7\1\41\1\51\1\45"+
    "\1\60\1\46\1\36\1\7\1\47\1\52\1\50\1\53\1\56\1\7"+
    "\1\64\1\61\1\63\1\22\1\34\1\23\1\14\41\10\2\0\4\7"+
    "\4\0\1\7\2\0\1\10\7\0\1\7\4\0\1\7\5\0\27\7"+
    "\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0\5\7\7\0\1\7"+
    "\1\0\1\7\21\0\160\10\5\7\1\0\2\7\2\0\4\7\10\0"+
    "\1\7\1\0\3\7\1\0\1\7\1\0\24\7\1\0\123\7\1\0"+
    "\213\7\1\0\5\10\2\0\236\7\11\0\46\7\2\0\1\7\7\0"+
    "\47\7\7\0\1\7\1\0\55\10\1\0\1\10\1\0\2\10\1\0"+
    "\2\10\1\0\1\10\10\0\33\7\5\0\3\7\15\0\5\10\6\0"+
    "\1\7\4\0\13\10\5\0\53\7\37\10\4\0\2\7\1\10\143\7"+
    "\1\0\1\7\10\10\1\0\6\10\2\7\2\10\1\0\4\10\2\7"+
    "\12\10\3\7\2\0\1\7\17\0\1\10\1\7\1\10\36\7\33\10"+
    "\2\0\131\7\13\10\1\7\16\0\12\10\41\7\11\10\2\7\4\0"+
    "\1\7\5\0\26\7\4\10\1\7\11\10\1\7\3\10\1\7\5\10"+
    "\22\0\31\7\3\10\104\0\1\7\1\0\13\7\67\0\33\10\1\0"+
    "\4\10\66\7\3\10\1\7\22\10\1\7\7\10\12\7\2\10\2\0"+
    "\12\10\1\0\7\7\1\0\7\7\1\0\3\10\1\0\10\7\2\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0"+
    "\1\10\1\7\7\10\2\0\2\10\2\0\3\10\1\7\10\0\1\10"+
    "\4\0\2\7\1\0\3\7\2\10\2\0\12\10\4\7\7\0\1\7"+
    "\5\0\3\10\1\0\6\7\4\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\10\1\0\5\10"+
    "\4\0\2\10\2\0\3\10\3\0\1\10\7\0\4\7\1\0\1\7"+
    "\7\0\14\10\3\7\1\10\13\0\3\10\1\0\11\7\1\0\3\7"+
    "\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10"+
    "\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7\17\0\2\7"+
    "\2\10\2\0\12\10\1\0\1\7\17\0\3\10\1\0\10\7\2\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"+
    "\1\10\1\7\7\10\2\0\2\10\2\0\3\10\10\0\2\10\4\0"+
    "\2\7\1\0\3\7\2\10\2\0\12\10\1\0\1\7\20\0\1\10"+
    "\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0"+
    "\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7\4\0"+
    "\5\10\3\0\3\10\1\0\4\10\2\0\1\7\6\0\1\10\16\0"+
    "\12\10\11\0\1\7\7\0\3\10\1\0\10\7\1\0\3\7\1\0"+
    "\27\7\1\0\12\7\1\0\5\7\3\0\1\7\7\10\1\0\3\10"+
    "\1\0\4\10\7\0\2\10\1\0\2\7\6\0\2\7\2\10\2\0"+
    "\12\10\22\0\2\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0"+
    "\12\7\1\0\5\7\2\0\1\10\1\7\7\10\1\0\3\10\1\0"+
    "\4\10\7\0\2\10\7\0\1\7\1\0\2\7\2\10\2\0\12\10"+
    "\1\0\2\7\17\0\2\10\1\0\10\7\1\0\3\7\1\0\51\7"+
    "\2\0\1\7\7\10\1\0\3\10\1\0\4\10\1\7\10\0\1\10"+
    "\10\0\2\7\2\10\2\0\12\10\12\0\6\7\2\0\2\10\1\0"+
    "\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0"+
    "\1\10\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0"+
    "\60\7\1\10\2\7\7\10\4\0\10\7\10\10\1\0\12\10\47\0"+
    "\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0"+
    "\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0"+
    "\2\7\1\0\4\7\1\10\2\7\6\10\1\0\2\10\1\7\2\0"+
    "\5\7\1\0\1\7\1\0\6\10\2\0\12\10\2\0\4\7\40\0"+
    "\1\7\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0"+
    "\1\10\4\0\2\10\10\7\1\0\44\7\4\0\24\10\1\0\2\10"+
    "\5\7\13\10\1\0\44\10\11\0\1\10\71\0\53\7\24\10\1\7"+
    "\12\10\6\0\6\7\4\10\4\7\3\10\1\7\3\10\2\7\7\10"+
    "\3\7\4\10\15\7\14\10\1\7\17\10\2\0\46\7\1\0\1\7"+
    "\5\0\1\7\2\0\53\7\1\0\u014d\7\1\0\4\7\2\0\7\7"+
    "\1\0\1\7\1\0\4\7\2\0\51\7\1\0\4\7\2\0\41\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7"+
    "\1\0\71\7\1\0\4\7\2\0\103\7\2\0\3\10\40\0\20\7"+
    "\20\0\125\7\14\0\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7"+
    "\3\0\3\7\17\0\15\7\1\0\4\7\3\10\13\0\22\7\3\10"+
    "\13\0\22\7\2\10\14\0\15\7\1\0\3\7\1\0\2\10\14\0"+
    "\64\7\40\10\3\0\1\7\3\0\2\7\1\10\2\0\12\10\41\0"+
    "\3\10\2\0\12\10\6\0\130\7\10\0\51\7\1\10\1\7\5\0"+
    "\106\7\12\0\35\7\3\0\14\10\4\0\14\10\12\0\12\10\36\7"+
    "\2\0\5\7\13\0\54\7\4\0\21\10\7\7\2\10\6\0\12\10"+
    "\46\0\27\7\5\10\4\0\65\7\12\10\1\0\35\10\2\0\13\10"+
    "\6\0\12\10\15\0\1\7\130\0\5\10\57\7\21\10\7\7\4\0"+
    "\12\10\21\0\11\10\14\0\3\10\36\7\15\10\2\7\12\10\54\7"+
    "\16\10\14\0\44\7\24\10\10\0\12\10\3\0\3\7\12\10\44\7"+
    "\122\0\3\10\1\0\25\10\4\7\1\10\4\7\3\10\2\7\11\0"+
    "\300\7\47\10\25\0\4\10\u0116\7\2\0\6\7\2\0\46\7\2\0"+
    "\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0"+
    "\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0"+
    "\7\7\16\0\5\10\32\0\5\10\20\0\2\7\23\0\1\7\13\0"+
    "\5\10\5\0\6\10\1\0\1\7\15\0\1\7\20\0\15\7\3\0"+
    "\33\7\25\0\15\10\4\0\1\10\3\0\14\10\21\0\1\7\4\0"+
    "\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0"+
    "\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0"+
    "\205\7\6\0\4\7\3\10\2\7\14\0\46\7\1\0\1\7\5\0"+
    "\1\7\2\0\70\7\7\0\1\7\17\0\1\10\27\7\11\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\40\10\57\0\1\7\u01d5\0\3\7"+
    "\31\0\11\7\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0"+
    "\2\10\2\0\3\7\1\0\132\7\1\0\4\7\5\0\51\7\3\0"+
    "\136\7\21\0\33\7\65\0\20\7\u0200\0\u19b6\7\112\0\u51cd\7\63\0"+
    "\u048d\7\103\0\56\7\2\0\u010d\7\3\0\20\7\12\10\2\7\24\0"+
    "\57\7\1\10\4\0\12\10\1\0\31\7\7\0\1\10\120\7\2\10"+
    "\45\0\11\7\2\0\147\7\2\0\4\7\1\0\4\7\14\0\13\7"+
    "\115\0\12\7\1\10\3\7\1\10\4\7\1\10\27\7\5\10\20\0"+
    "\1\7\7\0\64\7\14\0\2\10\62\7\21\10\13\0\12\10\6\0"+
    "\22\10\6\7\3\0\1\7\4\0\12\10\34\7\10\10\2\0\27\7"+
    "\15\10\14\0\35\7\3\0\4\10\57\7\16\10\16\0\1\7\12\10"+
    "\46\0\51\7\16\10\11\0\3\7\1\10\10\7\2\10\2\0\12\10"+
    "\6\0\27\7\3\0\1\7\1\10\4\0\60\7\1\10\1\7\3\10"+
    "\2\7\2\10\5\7\2\10\1\7\1\10\1\7\30\0\3\7\2\0"+
    "\13\7\5\10\2\0\3\7\2\10\12\0\6\7\2\0\6\7\2\0"+
    "\6\7\11\0\7\7\1\0\7\7\221\0\43\7\10\10\1\0\2\10"+
    "\2\0\12\10\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u016e\7"+
    "\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7"+
    "\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7"+
    "\3\0\20\10\20\0\7\10\14\0\2\7\30\0\3\7\31\0\1\7"+
    "\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\10"+
    "\7\0\32\7\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7"+
    "\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7"+
    "\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    53,   106,   159,   106,   212,   265,   318,   371,   424, 
      477,   530,   106,   106,   106,   106,   106,   106,   106,   106, 
      106,   106,   583,   636,   689,   742,   106,   106,   795,   848, 
      901,   954,  1007,  1060,  1113,  1166,  1219,  1272,  1325,  1378, 
     1431,  1484,   212,  1537,  1590,  1643,   106,   106,   106,   106, 
     1696,   106,   106,   106,   106,   106,   106,   106,   106,   106, 
     1749,   106,  1802,  1855,  1908,  1961,  2014,  2067,  2120,  2173, 
     2226,  2279,  2332,  2385,  2438,  2491,  2544,  2597,  2650,  2703, 
     2756,  2809,  2862,  2915,  2968,   106,  3021,   106,   106,   106, 
     3074,  3127,  3180,  3233,  3286,  3339,  3392,  3445,  3498,  3551, 
      371,  3604,  3657,  3710,  3763,  3816,  3869,  3922,  3975,  4028, 
     4081,  4134,  4187,  4240,  4293,  4346,  4399,  4452,  4505,  4558, 
     4611,   371,  4664,  4717,  4770,  4823,   371,   371,  4876,  4929, 
     4982,  5035,   371,  5088,  5141,  5194,  5247,  5300,  5353,  5406, 
     5459,  5512,  5565,  5618,   371,  5671,  5724,  5777,  5830,  5883, 
     5936,   371,  5989,  6042,   371,   371,   371,  6095,  6148,  6201, 
     6254,   371,  6307,  6360,  6413,   371,  6466,  6519,   371,  6572, 
     6625,  6678,   371,   371,   371,  6731,  6784,  6837,   371,  6890, 
     6943,  6996,   371,  7049,  7102,  7155,   371,  7208,  7261,  7314, 
      371,   371,  7367,  7420,   371,  7473,   106,   371,  7526,  7579, 
      371
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\11\1\42\1\43\3\11\1\44\1\45\1\46\1\11"+
    "\1\47\1\11\1\50\1\51\1\52\4\11\4\3\1\6"+
    "\60\3\67\0\1\5\66\0\1\53\2\0\1\54\26\0"+
    "\27\54\5\0\1\55\1\56\4\0\1\57\64\0\1\60"+
    "\55\0\1\11\2\0\2\11\25\0\27\11\11\0\1\61"+
    "\1\0\1\62\63\0\1\63\1\64\64\0\1\65\64\0"+
    "\1\66\12\0\1\67\51\0\1\70\13\0\1\71\50\0"+
    "\1\72\64\0\1\73\64\0\1\74\20\0\1\75\43\0"+
    "\1\76\55\0\1\11\2\0\2\11\25\0\1\11\1\77"+
    "\7\11\1\100\3\11\1\101\11\11\4\0\1\11\2\0"+
    "\2\11\25\0\7\11\1\102\6\11\1\103\10\11\4\0"+
    "\1\11\2\0\2\11\25\0\13\11\1\104\10\11\1\105"+
    "\2\11\4\0\1\11\2\0\2\11\25\0\26\11\1\106"+
    "\4\0\1\11\2\0\2\11\25\0\7\11\1\107\12\11"+
    "\1\110\4\11\4\0\1\11\2\0\2\11\25\0\11\11"+
    "\1\111\15\11\4\0\1\11\2\0\2\11\25\0\10\11"+
    "\1\112\16\11\4\0\1\11\2\0\2\11\25\0\12\11"+
    "\1\113\10\11\1\114\1\115\2\11\4\0\1\11\2\0"+
    "\2\11\25\0\10\11\1\116\12\11\1\117\3\11\4\0"+
    "\1\11\2\0\2\11\25\0\10\11\1\120\16\11\4\0"+
    "\1\11\2\0\2\11\25\0\1\11\1\121\4\11\1\122"+
    "\4\11\1\123\13\11\4\0\1\11\2\0\2\11\25\0"+
    "\1\11\1\124\25\11\4\0\1\54\2\0\2\54\25\0"+
    "\27\54\1\55\1\125\1\126\62\55\6\56\1\127\56\56"+
    "\12\0\1\130\1\131\64\0\1\132\55\0\1\11\2\0"+
    "\2\11\25\0\2\11\1\133\24\11\4\0\1\11\2\0"+
    "\2\11\25\0\6\11\1\134\1\11\1\135\16\11\4\0"+
    "\1\11\2\0\2\11\25\0\16\11\1\136\10\11\4\0"+
    "\1\11\2\0\2\11\25\0\1\137\26\11\4\0\1\11"+
    "\2\0\2\11\25\0\14\11\1\140\12\11\4\0\1\11"+
    "\2\0\2\11\25\0\1\11\1\141\25\11\4\0\1\11"+
    "\2\0\2\11\25\0\1\11\1\142\25\11\4\0\1\11"+
    "\2\0\2\11\25\0\12\11\1\143\14\11\4\0\1\11"+
    "\2\0\2\11\25\0\1\144\26\11\4\0\1\11\2\0"+
    "\2\11\25\0\12\11\1\145\14\11\4\0\1\11\2\0"+
    "\2\11\25\0\1\11\1\146\13\11\1\147\11\11\4\0"+
    "\1\11\2\0\2\11\25\0\22\11\1\150\4\11\4\0"+
    "\1\11\2\0\2\11\25\0\1\11\1\151\25\11\4\0"+
    "\1\11\2\0\2\11\25\0\22\11\1\152\4\11\4\0"+
    "\1\11\2\0\2\11\25\0\10\11\1\153\16\11\4\0"+
    "\1\11\2\0\2\11\25\0\10\11\1\154\16\11\4\0"+
    "\1\11\2\0\2\11\25\0\12\11\1\155\14\11\4\0"+
    "\1\11\2\0\2\11\25\0\13\11\1\156\13\11\4\0"+
    "\1\11\2\0\2\11\25\0\13\11\1\157\13\11\4\0"+
    "\1\11\2\0\2\11\25\0\22\11\1\160\4\11\4\0"+
    "\1\11\2\0\2\11\25\0\10\11\1\161\16\11\4\0"+
    "\1\11\2\0\2\11\25\0\12\11\1\162\14\11\2\0"+
    "\1\126\62\0\5\56\1\126\1\127\56\56\4\0\1\11"+
    "\2\0\2\11\25\0\3\11\1\163\23\11\4\0\1\11"+
    "\2\0\2\11\25\0\20\11\1\164\6\11\4\0\1\11"+
    "\2\0\2\11\25\0\12\11\1\165\14\11\4\0\1\11"+
    "\2\0\2\11\25\0\13\11\1\166\13\11\4\0\1\11"+
    "\2\0\2\11\25\0\5\11\1\167\21\11\4\0\1\11"+
    "\2\0\2\11\25\0\12\11\1\170\14\11\4\0\1\11"+
    "\2\0\2\11\25\0\14\11\1\171\12\11\4\0\1\11"+
    "\2\0\2\11\25\0\11\11\1\172\15\11\4\0\1\11"+
    "\2\0\2\11\25\0\5\11\1\173\21\11\4\0\1\11"+
    "\2\0\2\11\25\0\10\11\1\174\2\11\1\175\13\11"+
    "\4\0\1\11\2\0\2\11\25\0\22\11\1\176\4\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\177\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\4\11\1\200\22\11"+
    "\4\0\1\11\2\0\2\11\25\0\12\11\1\201\14\11"+
    "\4\0\1\11\2\0\2\11\25\0\2\11\1\202\24\11"+
    "\4\0\1\11\2\0\2\11\25\0\11\11\1\203\15\11"+
    "\4\0\1\11\2\0\2\11\25\0\13\11\1\204\13\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\205\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\1\11\1\206\25\11"+
    "\4\0\1\11\2\0\2\11\25\0\14\11\1\207\12\11"+
    "\4\0\1\11\2\0\2\11\25\0\1\11\1\210\25\11"+
    "\4\0\1\11\2\0\2\11\25\0\1\11\1\211\25\11"+
    "\4\0\1\11\2\0\2\11\25\0\6\11\1\212\20\11"+
    "\4\0\1\11\2\0\2\11\25\0\1\11\1\213\25\11"+
    "\4\0\1\11\2\0\2\11\25\0\1\11\1\214\25\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\215\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\6\11\1\216\20\11"+
    "\4\0\1\11\2\0\2\11\25\0\11\11\1\217\15\11"+
    "\4\0\1\11\2\0\2\11\25\0\11\11\1\220\15\11"+
    "\4\0\1\11\2\0\2\11\25\0\14\11\1\221\12\11"+
    "\4\0\1\11\2\0\2\11\25\0\22\11\1\222\4\11"+
    "\4\0\1\11\2\0\2\11\25\0\11\11\1\223\15\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\224\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\14\11\1\225\12\11"+
    "\4\0\1\11\2\0\2\11\25\0\6\11\1\226\20\11"+
    "\4\0\1\11\2\0\2\11\25\0\24\11\1\227\2\11"+
    "\4\0\1\11\2\0\2\11\25\0\12\11\1\230\14\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\231\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\12\11\1\232\14\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\233\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\13\11\1\234\13\11"+
    "\4\0\1\11\2\0\2\11\25\0\12\11\1\235\14\11"+
    "\4\0\1\11\2\0\2\11\25\0\20\11\1\236\6\11"+
    "\4\0\1\11\2\0\2\11\25\0\4\11\1\237\22\11"+
    "\4\0\1\11\2\0\2\11\25\0\12\11\1\240\14\11"+
    "\4\0\1\11\2\0\2\11\25\0\2\11\1\241\24\11"+
    "\4\0\1\11\2\0\2\11\25\0\2\11\1\242\24\11"+
    "\4\0\1\11\2\0\2\11\25\0\14\11\1\243\12\11"+
    "\4\0\1\11\2\0\2\11\25\0\1\11\1\244\25\11"+
    "\4\0\1\11\2\0\2\11\25\0\17\11\1\245\7\11"+
    "\4\0\1\11\2\0\2\11\25\0\12\11\1\246\14\11"+
    "\4\0\1\11\2\0\2\11\25\0\7\11\1\247\17\11"+
    "\4\0\1\11\2\0\2\11\25\0\6\11\1\250\20\11"+
    "\4\0\1\11\2\0\2\11\25\0\2\11\1\251\24\11"+
    "\4\0\1\11\2\0\2\11\25\0\11\11\1\252\15\11"+
    "\4\0\1\11\2\0\2\11\25\0\1\11\1\253\25\11"+
    "\4\0\1\11\2\0\2\11\25\0\6\11\1\254\20\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\255\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\256\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\257\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\12\11\1\260\14\11"+
    "\4\0\1\11\2\0\2\11\25\0\1\11\1\261\25\11"+
    "\4\0\1\11\2\0\2\11\25\0\2\11\1\262\24\11"+
    "\4\0\1\11\2\0\2\11\25\0\14\11\1\263\12\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\264\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\265\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\10\11\1\266\16\11"+
    "\4\0\1\11\2\0\2\11\25\0\22\11\1\267\4\11"+
    "\4\0\1\11\2\0\2\11\25\0\13\11\1\270\13\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\271\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\22\11\1\272\4\11"+
    "\4\0\1\11\2\0\2\11\25\0\12\11\1\273\14\11"+
    "\4\0\1\11\2\0\2\11\25\0\22\11\1\274\4\11"+
    "\4\0\1\11\2\0\2\11\25\0\22\11\1\275\4\11"+
    "\4\0\1\11\2\0\2\11\25\0\22\11\1\276\4\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\277\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\17\11\1\300\7\11"+
    "\4\0\1\11\2\0\2\11\25\0\17\11\1\301\7\11"+
    "\4\0\1\11\2\0\2\11\25\0\12\11\1\302\14\11"+
    "\4\0\1\11\2\0\2\11\25\0\12\11\1\303\14\11"+
    "\4\0\1\11\2\0\2\11\25\0\6\11\1\304\20\11"+
    "\4\0\1\11\2\0\2\11\2\0\1\305\22\0\27\11"+
    "\4\0\1\11\2\0\2\11\25\0\14\11\1\306\12\11"+
    "\4\0\1\11\2\0\2\11\25\0\25\11\1\307\1\11"+
    "\4\0\1\11\2\0\2\11\25\0\5\11\1\310\21\11"+
    "\4\0\1\11\2\0\2\11\25\0\17\11\1\311\7\11";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  9,  9,  9,  9, 
     9,  9,  9,  9,  9,  9,  1,  1,  1,  1,  9,  9,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  1,  0,  0,  9,  9, 
     9,  9,  1,  9,  9,  9,  9,  9,  9,  9,  9,  9,  1,  9,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  9,  0,  9,  9,  9,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  9,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
	

    public Lexer(ComplexSymbolFactory sf, java.io.InputStream is){
		this(is);
        symbolFactory = sf;
    }
	public Lexer(ComplexSymbolFactory sf, java.io.Reader reader){
		this(reader);
        symbolFactory = sf;
    }
    
    private StringBuffer sb;
    private ComplexSymbolFactory symbolFactory;
    private int csline,cscolumn;

    public Symbol symbol(String name, int code){
		return symbolFactory.newSymbol(name, code,
						new Location(yyline+1,yycolumn+1, yychar), // -yylength()
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength())
				);
    }
    public Symbol symbol(String name, int code, String lexem){
	return symbolFactory.newSymbol(name, code, 
						new Location(yyline+1, yycolumn +1, yychar), 
						new Location(yyline+1,yycolumn+yylength(), yychar+yylength()), lexem);
    }
    
    protected void emit_warning(String message){
    	System.out.println("scanner warning: " + message + " at : 2 "+ 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }
    
    protected void emit_error(String message){
    	System.out.println("scanner error: " + message + " at : 2" + 
    			(yyline+1) + " " + (yycolumn+1) + " " + yychar);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[7632];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yychar+= yy_markedPos_l-yy_startRead;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 53: 
          {  return symbolFactory.newSymbol("MINUSEQ", MINUSEQ);  }
        case 202: break;
        case 173: 
          {  return symbolFactory.newSymbol("PACKAGE", PACKAGE);  }
        case 203: break;
        case 174: 
          {  return symbolFactory.newSymbol("PRIVATE", PRIVATE);  }
        case 204: break;
        case 178: 
          {  return symbolFactory.newSymbol("EXTENDS", EXTENDS);  }
        case 205: break;
        case 182: 
          {  return symbolFactory.newSymbol("BOOLEAN", BOOLEAN);  }
        case 206: break;
        case 46: 
          {  return symbolFactory.newSymbol("DIVEQ", DIVEQ);  }
        case 207: break;
        case 27: 
          {  return symbolFactory.newSymbol("COLON", COLON);  }
        case 208: break;
        case 22: 
          {  return symbolFactory.newSymbol("MINUS", MINUS);  }
        case 209: break;
        case 14: 
          {  return symbolFactory.newSymbol("POINT", POINT);  }
        case 210: break;
        case 15: 
          {  return symbolFactory.newSymbol("COMMA", COMMA);  }
        case 211: break;
        case 57: 
          {  return symbolFactory.newSymbol("MODEQ", MODEQ);  }
        case 212: break;
        case 58: 
          {  return symbolFactory.newSymbol("NOTEQ", NOTEQ);  }
        case 213: break;
        case 61: 
          {  return symbolFactory.newSymbol("XOREQ", XOREQ);  }
        case 214: break;
        case 144: 
          {  return symbolFactory.newSymbol("CLASS", CLASS);  }
        case 215: break;
        case 151: 
          {  return symbolFactory.newSymbol("SHORT", SHORT);  }
        case 216: break;
        case 154: 
          {  return symbolFactory.newSymbol("FALSE", FALSE);  }
        case 217: break;
        case 155: 
          {  return symbolFactory.newSymbol("FINAL", FINAL);  }
        case 218: break;
        case 156: 
          {  return symbolFactory.newSymbol("FLOAT", FLOAT);  }
        case 219: break;
        case 197: 
          {  return symbolFactory.newSymbol("IMPLEMENTS", IMPLEMENTS);  }
        case 220: break;
        case 54: 
          {  return symbolFactory.newSymbol("MINUSMINUS", MINUSMINUS);  }
        case 221: break;
        case 84: 
        case 85: 
          {  /* ignore */  }
        case 222: break;
        case 29: 
          {  return symbolFactory.newSymbol("XOR", XOR);  }
        case 223: break;
        case 25: 
          {  return symbolFactory.newSymbol("NOT", NOT);  }
        case 224: break;
        case 24: 
          {  return symbolFactory.newSymbol("MOD", MOD);  }
        case 225: break;
        case 6: 
          {  return symbolFactory.newSymbol("DIV", DIV);  }
        case 226: break;
        case 100: 
          {  return symbolFactory.newSymbol("INT", INT);  }
        case 227: break;
        case 26: 
          {  return symbolFactory.newSymbol("QUESTION", QUESTION);  }
        case 228: break;
        case 56: 
          {  return symbolFactory.newSymbol("PLUSPLUS", PLUSPLUS);  }
        case 229: break;
        case 88: 
          {  return symbolFactory.newSymbol("RSHIFTEQ", RSHIFTEQ);  }
        case 230: break;
        case 186: 
          {  return symbolFactory.newSymbol("ABSTRACT", ABSTRACT);  }
        case 231: break;
        case 190: 
          {  return symbolFactory.newSymbol("VOLATILE", VOLATILE);  }
        case 232: break;
        case 196: 
          {  return symbolFactory.newSymbol("AMPERSANDEQ", AMPERSANDEQ);  }
        case 233: break;
        case 52: 
          {  return symbolFactory.newSymbol("EQEQ", EQEQ);  }
        case 234: break;
        case 51: 
          {  return symbolFactory.newSymbol("GTEQ", GTEQ);  }
        case 235: break;
        case 49: 
          {  return symbolFactory.newSymbol("LTEQ", LTEQ);  }
        case 236: break;
        case 23: 
          {  return symbolFactory.newSymbol("PLUS", PLUS);  }
        case 237: break;
        case 7: 
          {  return symbolFactory.newSymbol("MULT", MULT);  }
        case 238: break;
        case 12: 
          {  return symbolFactory.newSymbol("COMP", COMP);  }
        case 239: break;
        case 13: 
          {  return symbolFactory.newSymbol("SEMI", SEMI);  }
        case 240: break;
        case 59: 
          {  return symbolFactory.newSymbol("OREQ", OREQ);  }
        case 241: break;
        case 60: 
          {  return symbolFactory.newSymbol("OROR", OROR);  }
        case 242: break;
        case 121: 
          {  return symbolFactory.newSymbol("CHAR", CHAR);  }
        case 243: break;
        case 126: 
          {  return symbolFactory.newSymbol("TRUE", TRUE);  }
        case 244: break;
        case 127: 
          {  return symbolFactory.newSymbol("LONG", LONG);  }
        case 245: break;
        case 132: 
          {  return symbolFactory.newSymbol("BYTE", BYTE);  }
        case 246: break;
        case 191: 
          {  return symbolFactory.newSymbol("PROTECTED", PROTECTED);  }
        case 247: break;
        case 192: 
          {  return symbolFactory.newSymbol("AMPERSAND", AMPERSAND);  }
        case 248: break;
        case 194: 
          {  return symbolFactory.newSymbol("TRANSIENT", TRANSIENT);  }
        case 249: break;
        case 50: 
          {  return symbolFactory.newSymbol("RSHIFT", RSHIFT);  }
        case 250: break;
        case 48: 
          {  return symbolFactory.newSymbol("LSHIFT", LSHIFT);  }
        case 251: break;
        case 47: 
          {  return symbolFactory.newSymbol("MULTEQ", MULTEQ);  }
        case 252: break;
        case 21: 
          {  return symbolFactory.newSymbol("RBRACK", RBRACK);  }
        case 253: break;
        case 16: 
          {  return symbolFactory.newSymbol("LPAREN", LPAREN);  }
        case 254: break;
        case 17: 
          {  return symbolFactory.newSymbol("RPAREN", RPAREN);  }
        case 255: break;
        case 18: 
          {  return symbolFactory.newSymbol("LBRACE", LBRACE);  }
        case 256: break;
        case 19: 
          {  return symbolFactory.newSymbol("RBRACE", RBRACE);  }
        case 257: break;
        case 20: 
          {  return symbolFactory.newSymbol("LBRACK", LBRACK);  }
        case 258: break;
        case 55: 
          {  return symbolFactory.newSymbol("PLUSEQ", PLUSEQ);  }
        case 259: break;
        case 87: 
          {  return symbolFactory.newSymbol("SSHIFT", SSHIFT);  }
        case 260: break;
        case 89: 
          {  return symbolFactory.newSymbol("OROREQ", OROREQ);  }
        case 261: break;
        case 161: 
          {  return symbolFactory.newSymbol("PUBLIC", PUBLIC);  }
        case 262: break;
        case 165: 
          {  return symbolFactory.newSymbol("IMPORT", IMPORT);  }
        case 263: break;
        case 168: 
          {  return symbolFactory.newSymbol("STATIC", STATIC);  }
        case 264: break;
        case 172: 
          {  return symbolFactory.newSymbol("NATIVE", NATIVE);  }
        case 265: break;
        case 8: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 62: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 69: 
        case 70: 
        case 71: 
        case 72: 
        case 73: 
        case 74: 
        case 75: 
        case 76: 
        case 77: 
        case 78: 
        case 79: 
        case 80: 
        case 81: 
        case 82: 
        case 83: 
        case 90: 
        case 91: 
        case 92: 
        case 93: 
        case 94: 
        case 95: 
        case 96: 
        case 97: 
        case 98: 
        case 99: 
        case 101: 
        case 102: 
        case 103: 
        case 104: 
        case 105: 
        case 106: 
        case 107: 
        case 108: 
        case 109: 
        case 110: 
        case 111: 
        case 112: 
        case 113: 
        case 114: 
        case 115: 
        case 116: 
        case 117: 
        case 118: 
        case 119: 
        case 120: 
        case 122: 
        case 123: 
        case 124: 
        case 125: 
        case 128: 
        case 129: 
        case 130: 
        case 131: 
        case 133: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
        case 143: 
        case 145: 
        case 146: 
        case 147: 
        case 148: 
        case 149: 
        case 150: 
        case 152: 
        case 153: 
        case 157: 
        case 158: 
        case 159: 
        case 160: 
        case 162: 
        case 163: 
        case 164: 
        case 166: 
        case 167: 
        case 169: 
        case 170: 
        case 171: 
        case 175: 
        case 176: 
        case 177: 
        case 179: 
        case 180: 
        case 181: 
        case 183: 
        case 184: 
        case 185: 
        case 187: 
        case 188: 
        case 189: 
        case 193: 
        case 195: 
        case 198: 
        case 199: 
          {  return symbolFactory.newSymbol("IDENTIFIER", IDENTIFIER, yytext().toString());  }
        case 266: break;
        case 28: 
          {  return symbolFactory.newSymbol("OR", OR);  }
        case 267: break;
        case 11: 
          {  return symbolFactory.newSymbol("EQ", EQ);  }
        case 268: break;
        case 10: 
          {  return symbolFactory.newSymbol("GT", GT);  }
        case 269: break;
        case 9: 
          {  return symbolFactory.newSymbol("LT", LT);  }
        case 270: break;
        case 200: 
          {  return symbolFactory.newSymbol("SYNCHRONIZED", SYNCHRONIZED);  }
        case 271: break;
        case 43: 
          {  throw new RuntimeException("Variável não pode começar com número em \""+yytext()+
                                                             "\" na linha "+yyline+", coluna "+yycolumn);  }
        case 272: break;
        case 3: 
        case 4: 
          {                                }
        case 273: break;
        case 2: 
        case 5: 
          {  throw new RuntimeException("Caractere inválido \""+yytext()+
                                                             "\" na linha "+yyline+", coluna "+yycolumn);  }
        case 274: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              {     return symbolFactory.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
