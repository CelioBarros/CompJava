package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PACKAGE, POINT, IMPORT, MULT;
terminal String     IDENTIFIER;

/* Non terminals */
non terminal            inicio;
non terminal            compilation_unit, package_statement_opt, package_statement, name;
non terminal            import_statement_opt, import_statements, import_statement;

/* Precedences */

/* The grammar rules */
inicio ::= inicio compilation_unit:c SEMI
            | compilation_unit:c SEMI
            ;
            
compilation_unit ::= package_statement_opt:p import_statement_opt:i
			         ;
			            
package_statement_opt ::= package_statement:p         {: System.out.println(p); :}
			|                                        
			;
			
package_statement ::= PACKAGE name:n SEMI         {: RESULT = n; :}
			;
			
name ::= IDENTIFIER:i                         {: RESULT = i; :}
			| name:n POINT IDENTIFIER:i         {: RESULT = n + i; :}
			;
			
import_statement_opt ::= import_statements:i    {: System.out.println(i); :}
							|
							;

import_statements ::= import_statement:i        {: RESULT = i; :}
						| import_statements:i import_statement:s         {: RESULT = s; :}
						;

import_statement ::= IMPORT name:n SEMI       {: RESULT = n; :}
						| IMPORT name:n POINT MULT SEMI       {: RESULT = n; :}
						;