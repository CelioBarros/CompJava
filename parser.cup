package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PACKAGE, POINT;
terminal String     IDENTIFIER;

/* Non terminals */
non terminal            inicio;
non terminal            compilation_unit, package_statement_opt, package_statement, package_name;

/* Precedences */

/* The grammar rules */
inicio ::= inicio compilation_unit:c SEMI      {: System.out.println(c); :}
            | compilation_unit:c SEMI                  {: System.out.println(c); :}
            ;
            
compilation_unit ::= package_statement_opt:p         {: RESULT = p; :}
			;
			            
package_statement_opt ::= package_statement:p         {: RESULT = p; :}
			|                                        
			;
			
package_statement ::= PACKAGE package_name:p         {: RESULT = p; :}
			;
			
package_name ::= IDENTIFIER:i                         {: RESULT = i; :}
			| package_name:p POINT IDENTIFIER:i         {: RESULT = p + i; :}
			;