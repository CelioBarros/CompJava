package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import type.*;
import symtab.*;

parser code {:
  protected Lexer lexer;
  public static int errors = 0;
  public static int warnings = 0;
  public static boolean first = true, second = false;
  
public void report_error(String message, Object info) {
String token = "";

if (info instanceof java_cup.runtime.Symbol) {
           java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
           token = s.value+"";

       }
       System.err.println("Erro em: " + token);
 }
  
 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Erro Sintatico.");
 }
  public void sem_error(String lexeme, String message) {
	errors++;
     	System.err.println("Error "+ lexer.current_lexeme() + " : Semantic error");
      System.err.println("  "+ errors + "==> " + message + ": "+ lexeme + "\n");
  }

  public void warning(String lexeme, String message) {
	warnings++;
     	System.err.println("Warning "+ lexer.current_lexeme());
      System.err.println("  "+ warnings + "==> " + message + ": "+ lexeme + "\n");
  } 

 
:}

action code {:
	class Sname {
	  public String name;
	  public Symb cs;
	  public Symb rs;

	  Sname(String n, Symb c, Symb r) {
		name = n;
		cs = c;
		rs = r;
	  }
	}

:};

/* define how to connect to the scanner! */
init with {:

	if(first) {	Type.initTypes();
			Env.initFirst();
	}
	if(second) Env.initSecond();

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File(Driver.arquivo);
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PACKAGE, POINT, COMMA, IMPORT, MULT, CLASS, EXTENDS, IMPLEMENTS;
terminal			PUBLIC, PROTECTED, PRIVATE, STATIC, ABSTRACT, FINAL, NATIVE, SYNCHRONIZED;
terminal			TRANSIENT, VOLATILE, LBRACE, RBRACE, LBRACK, RBRACK, EQ, MOD, MODEQ, NOT;
terminal			MINUS, MINUSMINUS, PLUS, PLUSPLUS, PLUSEQ, MINUSEQ, MULTEQ, DIV, DIVEQ;
terminal			GT, LT, GTEQ, LTEQ, EQEQ, NOTEQ;
terminal			RETURN, THROW, BREAK, CONTINUE;
terminal			COMP, RSHIFTEQ, RSHIFT, SSHIFT, LSHIFT, LPAREN, RPAREN, NEW;
terminal			TRUE, FALSE, QUESTION, COLON, AMPERSAND, AMPERSANDEQ, OR, OROR, OREQ, OROREQ;
terminal			BYTE, CHAR, SHORT, INT, FLOAT, LONG, DOUBLE, XOREQ, XOR;
terminal			INTEGER_LITERAL_LONG, HEX_LITERAL, HEX_LITERAL_LONG;
terminal			OCT_LITERAL, OCT_LITERAL_LONG, FLOAT_LITERAL;
terminal			NULL, SUPER, THIS, INSTANCEOF, IF, ELSE, DO, WHILE, FOR, TRY, CATCH, FINALLY;
terminal			SWITCH, CASE, DEFAULT, INTERFACE;
terminal java.lang.String     IDENTIFIER;
terminal java.lang.Character	CHARACTER_LITERAL;
terminal java.lang.String 	STRING_LITERAL;
terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Boolean BOOLEAN;



/* Non terminals */
non terminal            inicio;
non terminal            compilation_unit, package_statement_opt, package_statement;
non terminal            import_statement_opt, import_statements, import_statement;
non terminal            type_declarations_opt, type_declarations, type_declaration;
non terminal			class_declaration;
non terminal			modifiers, modifier;
non terminal			super_opt, super_cl, interfaces_opt, interfaces, interface_type_list;
non terminal			field_aux, field_declaration, field_declarations_opt, field_declarations;
non terminal			static_initializer;
non terminal			statement_block, statements_opt, statements, statement;
non terminal			variable_declaration, variable_declarator, variable_initializer_opt;
non terminal			variable_initializer, variable_initializers, array_initializer;
non terminal			type_specifier, variable_declarators;
non terminal			bracks_opt, bracks, brack, return_opt, break_opt, continue_opt;
non terminal			expression, numeric_expression, num_const;
non terminal			testing_expression, test_const, logical_expression, logical_const;
non terminal			string_expression, bit_expression, bit_const, casting_expression;
non terminal			creating_expression, creating_expression_alt, arglist, array_expression_opt;
non terminal			literal_expression, integer_literal_desc, string, num_logic_expression;
non terminal			if_statement, else_opt, do_statement, while_statement, parameter, switch_statement;
non terminal			for_statement, for_var_exp, expression_opt, try_statement, statements_try, try_opt;
non terminal			statements_switch_opt, statements_switch, statement_switch, arglist_opt;
non terminal			mcv_declarations, parameter_list, statement_aux, method_declaration;
non terminal			constructor_declaration, interface_declaration, inter_opt, parameter_list_opt;
non terminal			method_header, method_body;
non terminal Type type;
non terminal Boolean modifiers_opt;
non terminal Sname name;


/* Precedences */
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left MOD;
precedence left NOT; 
precedence left LPAREN;
precedence left ELSE;
precedence left POINT;
precedence left COMMA;
precedence left INSTANCEOF;
precedence left TRY, CATCH, FINALLY;
precedence right SEMI;
precedence right PLUSEQ, MINUSEQ;
precedence right MULTEQ, DIVEQ;
precedence right MODEQ;
precedence right PLUSPLUS, MINUSMINUS;
precedence left SSHIFT, RSHIFT, LSHIFT, RSHIFTEQ;
precedence left LBRACK;
precedence left GT, LT, GTEQ, LTEQ, EQEQ, NOTEQ, QUESTION;
precedence left IDENTIFIER;

precedence right AMPERSAND, AMPERSANDEQ, OR, OROR, OREQ, OROREQ, XOR, XOREQ;

/* The grammar rules */
inicio ::= compilation_unit
            ;
            
compilation_unit ::= package_statement_opt import_statement_opt type_declarations_opt
			         ;
			            
package_statement_opt ::= package_statement
			|                                        
			;
			
package_statement ::= PACKAGE name SEMI
			;
			
name ::= IDENTIFIER:n
{: if(parser.first) RESULT = new Sname(n, Env.get(n), Env.get(n, Env.getRoot())); 
			   if(parser.second) RESULT = new Sname(n, Env.get(n), Env.get(n, Env.getRoot()));
			:}			
			| name:sn POINT IDENTIFIER:n
			{: Symb s1 = sn.cs;
			   if(s1 == null) { parser.sem_error(sn.name, "UNKNOWN NAME");
						  RESULT = new Sname(n, null, null);
			   }
			   else { Type t1 = s1.getType();
				    if(!t1.isReference()) { parser.sem_error(""+t1, "NOT A REFERENCE");
								    RESULT = new Sname(n, null, null);
				    }
				    else { Type r = ((Reference)t1).getReferred();
					     if(!r.isName()) { parser.sem_error(""+r, "NOT A CLASS");
								     RESULT = new Sname(n, null, null);
					     }
					     else { Symb s2 = Env.get(n, ((Name)r).getEnv()); 
			   			     	if(s2 == null) { parser.sem_error(n,"UNKNOWN NAME"); 
									     RESULT = new Sname(n, null, null);
							}
			   			     	else if (!s2.isPublic() && !Name.getCurrentClass().isSubclass(s2.getOwner())) { parser.sem_error(n, "ILLEGAL ACCESS TO PRIVATE ATTRIBUTE");
				    					 				     			     	      		  RESULT = new Sname(n, null, null);
						  	     }
						  	     else RESULT = new Sname(n, s2, Env.get(n, Env.getRoot()));
					     }								
				    }
			   }
			:}
			;
			
import_statement_opt ::= import_statements
							|
							;

import_statements ::= import_statement
						| import_statements import_statement
						;

import_statement ::= IMPORT name SEMI
						| IMPORT name POINT MULT SEMI
						;

type_declarations_opt ::= type_declarations
						|
						;
						
type_declarations ::= type_declaration
					| type_declarations type_declaration
					;
					
type_declaration ::= class_declaration
					| interface_declaration
					;

class_declaration ::= modifiers_opt:m CLASS IDENTIFIER:n1 
			{: System.out.println("CLASS ENTRY: "+n1);
			   if(parser.first) if (Env.putClass(n1, m.booleanValue()) != 0) parser.sem_error(n1,"DUPLICATE CLASS NAME");
 			   if(parser.second) { Env.next();
						     Name c = (Env.get(n1)).getOwner();
						     Name.putCurrentClass(c);
			   } 
			:}
			 super_opt interfaces_opt field_aux
					;
						

modifiers_opt ::= modifiers {: RESULT = Boolean.valueOf(true); :}
		| {: RESULT = Boolean.valueOf(false); :}
		;
modifiers ::= modifier
		| modifiers modifier
		;
		
modifier ::= PUBLIC
		| PROTECTED
		| PRIVATE
		| STATIC
		| ABSTRACT
		| FINAL
		| NATIVE
		| SYNCHRONIZED
		| TRANSIENT
		| VOLATILE
		;
		
super_cl ::= EXTENDS name
	;
super_opt ::= super_cl	
	|
	;
	
interfaces ::= IMPLEMENTS interface_type_list
	;
interfaces_opt ::= interfaces
	|
	;
interface_type_list ::= name
	| interface_type_list COMMA name
	;
	
field_aux ::= LBRACE field_declarations_opt RBRACE
	;
	
field_declarations_opt ::= field_declarations
	|
	;
	
field_declarations ::= field_declaration
	| field_declarations field_declaration
	;
	
field_declaration ::= mcv_declarations
	| static_initializer
	| SEMI
	;
	
static_initializer ::= STATIC statement_block
	;
	
statement_block ::= LBRACE statements_opt:t  RBRACE
	{:RESULT = (Type)t;:}
	;
	
statements_opt ::= statements:t {:RESULT = (Type)t;:}
	| {:RESULT = Type.voidtype();:}
	;
statements ::= statement:t {:RESULT = (Type)t;:} 
	| statements statement:t {:RESULT = (Type)t;:}
	;
	
statement ::= variable_declaration
	  | expression SEMI
      | statement_block 
      | if_statement 
      | do_statement 
      | while_statement 
      | for_statement 
      | try_statement 
      | switch_statement 
      | SYNCHRONIZED LPAREN expression RPAREN statement
      | return_opt:t {:RESULT = (Type)t;:} 
      | THROW expression SEMI
      | IDENTIFIER COLON statement 
      | break_opt 
      | continue_opt 
      | SEMI
	;	

return_opt ::= RETURN {:RESULT = Type.voidtype();:} SEMI
	| RETURN expression:t {:RESULT = (Type)t;:} SEMI
	;
break_opt ::= BREAK SEMI
	| BREAK IDENTIFIER SEMI
	;
continue_opt ::= CONTINUE SEMI
	| CONTINUE IDENTIFIER SEMI
	;
	
variable_declaration ::= modifiers_opt type:t1 variable_declarators:t2 SEMI {:
System.out.println((Type)t1);
System.out.println((Type)t2);
		if(!((Type)t1).equals((Type)t2)){
			System.err.println("Erro semantico");
			System.exit(1);

		}
:}
	;

type ::= type_specifier:t bracks_opt
	{: RESULT = (Type)t; :}
	;
	
type_specifier ::= BOOLEAN {: RESULT = Type.bool(); :}
	| BYTE
	| CHAR {: RESULT = Type.character(); :}
	| SHORT
	| INT {: RESULT = Type.integer(); :}
	| FLOAT {: RESULT = Type.floating(); :}
	| LONG
	| DOUBLE
	| name:sn
			{: Symb s = sn.rs; 
			   if(s == null) RESULT = Type.reference(Type.forwardName(sn.name, parser.lexer.current_lexeme())); 
			   else RESULT = Type.reference(s.getType());
			:}
	;
	
bracks_opt ::= bracks
	|
	;
	
bracks ::= brack
	| bracks brack
	;
	
brack ::= LBRACK RBRACK
	;
	
variable_declarators ::= variable_declarator:t
	{: RESULT = (Type)t; :}
	| variable_declarators COMMA variable_declarator:t
	{: RESULT = (Type)t; :}
	;
	
variable_declarator ::=
		IDENTIFIER bracks_opt variable_initializer_opt:t
		{: RESULT = (Type)t; :}
	;

variable_initializer_opt ::= EQ variable_initializer:t {: RESULT = (Type)t; :}
	| {: RESULT = Type.voidtype(); :}
	;

variable_initializer ::= expression:t {: RESULT = (Type)t; :}
	| array_initializer
	;
	
array_initializer ::= LBRACE variable_initializers COMMA RBRACE
	|	LBRACE variable_initializers RBRACE
	|	LBRACE RBRACE
	;
	
variable_initializers ::= variable_initializer
	|	variable_initializers COMMA variable_initializer
	;
	
expression ::= numeric_expression:t {: RESULT = (Type)t; :}
	| testing_expression {:RESULT = Type.bool();:}
	| logical_expression {:RESULT = Type.bool();:}
	| string_expression:t {: RESULT = (Type)t; :}
    | bit_expression:t {: RESULT = (Type)t; :}
    | casting_expression:t {: RESULT = (Type)t; :}
    | creating_expression:t {: RESULT = (Type)t; :}
    | literal_expression:t {: RESULT = (Type)t; :}
    | NULL:t {: RESULT = (Type)t; :}
	| SUPER:t {: RESULT = (Type)t; :}
	| THIS:t {: RESULT = (Type)t; :}
    | IDENTIFIER
    | num_logic_expression {:RESULT = Type.bool();:}
    | expression LPAREN RPAREN
    | expression LPAREN arglist RPAREN
    | expression LBRACK expression RBRACK
    | expression POINT expression
    | expression COMMA expression
    | expression INSTANCEOF name
    ;
    
num_logic_expression ::= expression MODEQ expression 
	| expression MOD expression
	;     
      
numeric_expression ::= MINUS expression 
      | PLUSPLUS expression
      | MINUSMINUS expression 
      | expression PLUSPLUS 
      | expression MINUSMINUS
      | expression num_const expression
      ;

num_const ::= PLUS
      | PLUSEQ
      | MINUS
      | MINUSEQ
      | MULT
      | MULTEQ
      | DIV
      | DIVEQ
      ;
      
testing_expression ::= expression test_const expression
	;
	
test_const ::= GT
	| LT
	| GTEQ
	| LTEQ
	| EQEQ
	| NOTEQ
	;
	
logical_expression ::= NOT expression 
      | expression logical_const expression
      | expression QUESTION expression COLON expression 
      | TRUE
      | FALSE 
      ;
      
logical_const ::= AMPERSAND
      | AMPERSANDEQ
      | OR 
      | OREQ
      | XOR 
      | XOREQ 
      | AMPERSAND AMPERSAND 
      | OROREQ
      ;
      
string_expression ::= expression PLUS expression
	| expression PLUSEQ expression
	;
	
bit_expression ::= COMP expression
	| expression bit_const expression
	;
	
bit_const ::= SSHIFT
	| RSHIFT
	| LSHIFT
	| RSHIFTEQ
	;
	
casting_expression ::= LPAREN type RPAREN expression
	;
	
creating_expression ::= NEW creating_expression_alt
	;
	
creating_expression_alt ::= name LPAREN arglist_opt RPAREN
	| type_specifier array_expression_opt bracks_opt
	| LPAREN expression RPAREN
	;
	
arglist_opt ::= arglist
	|
	;
	
arglist ::= expression
	| arglist COMMA expression
	;
	
array_expression_opt ::= LBRACK expression RBRACK
	|
	;
	

literal_expression ::= integer_literal_desc {: RESULT = Type.integer();:}
    | FLOAT_LITERAL {: RESULT = Type.floating();:}
    | STRING_LITERAL
    {: Symb s = Env.get("String", Env.getRoot()); 
			   if(s == null) RESULT = Type.reference(Type.forwardName("String", parser.lexer.current_lexeme())); 
			   else RESULT = Type.reference(s.getType());
			:}
    | CHARACTER_LITERAL    {: Symb s = Env.get("character", Env.getRoot()); 
			   if(s == null) RESULT = Type.reference(Type.forwardName("character", parser.lexer.current_lexeme())); 
			   else RESULT = Type.reference(s.getType());
			:}
    ;
     

integer_literal_desc ::= INTEGER_LITERAL {: RESULT = Type.integer(); :}
	| INTEGER_LITERAL_LONG
	| HEX_LITERAL
	| HEX_LITERAL_LONG
	| OCT_LITERAL
	| OCT_LITERAL_LONG
	;

if_statement ::= IF LPAREN expression RPAREN statement else_opt
	;
	
else_opt ::= ELSE statement
	|
	;
	
do_statement ::= DO statement WHILE LPAREN expression RPAREN SEMI
	;
	
while_statement ::= WHILE LPAREN expression RPAREN statement
	;
	
for_statement ::= FOR LPAREN for_var_exp expression_opt SEMI expression_opt SEMI RPAREN statement
	;
	
for_var_exp ::= variable_declaration
	| expression SEMI
	| SEMI
	;
	
expression_opt ::= expression
	|
	;
	
try_statement ::= TRY statements_try try_opt
	;
	
statements_try ::= statement
	| statements_try CATCH LPAREN parameter RPAREN statement
	;
	
try_opt ::= FINALLY statement
	|
	;
	
parameter ::= type:t IDENTIFIER bracks_opt
	{: RESULT = (Type)t; :}
	;
	
switch_statement ::= SWITCH LPAREN expression RPAREN LBRACE statements_switch_opt RBRACE
	;
	
statements_switch_opt ::= statements_switch
	|
	;
	
statements_switch ::= statement_switch
	| statements_switch statement_switch
	;
	
statement_switch ::= CASE expression COLON
	| DEFAULT COLON
	| statement
	;
	
mcv_declarations ::= method_declaration
	| constructor_declaration
	| variable_declaration
	;
	
method_declaration ::= method_header:t1 method_body:t2 {:
		System.out.println((Type)t1);
		System.out.println((Type)t2);
		if(!((Type)t1).equals((Type)t2)){
			System.err.println("Erro semantico");
			System.exit(1);

		}
	:}
	;
	
method_header ::=
		modifiers_opt:m type:t1 IDENTIFIER:n 
 			{: if(parser.first) { if (!Env.put(n, null)) parser.sem_error(n,"DUPLICATE NAME");
						    System.out.println(" METHOD ENTRY: "+n);
		 			          Env.push();
			   }
			   if(parser.second) { System.out.println(" METHOD ENTRY: "+n);
						     Env.next();
			   }
			RESULT = (Type)t1;
			:}
			LPAREN parameter_list_opt:t2 RPAREN
			{: if(parser.first) { Name c = Name.getCurrentClass();
			   			    String cname = c.getName();
			   			    Symb csymb = Env.get(cname);
			   			    Symb s;
			   			    if(csymb.isPublic()) s = new Symb(Type.method((Type)t2, t1), c, m.booleanValue());
			   			    else { if(m.booleanValue()) parser.warning(n, "PUBLIC METHOD DECLARED IN PRIVATE CLASS");
				    		           s = new Symb(Type.method((Type)t2, t1), c, false);
			   			    }
			   			    Env.putSymb(n, s); 
			   }
			   if(parser.second) { Symb msymb = Env.get(n);
						     Method.putCurrent(n, (Method)msymb.getType());						     
			   }
			:}
	;
	
parameter_list_opt ::= {: RESULT = Type.voidtype(); :}
	| parameter_list:t {: RESULT = (Type)t; :}
	;
	
parameter_list ::= parameter:t
			{: RESULT = (Type)t; :}
	| parameter_list:t1 COMMA parameter:t2
			{: RESULT = Type.product((Type)t1, (Type)t2); :}
	;
	
method_body ::= bracks_opt statement_aux:t 
	{:
	RESULT = (Type)t; 
	System.out.println(" METHOD EXIT");
		if(parser.first) Env.pop();
		if(parser.second) Env.next(); 
	:}

	;
statement_aux ::= statement_block:t {:RESULT = (Type)t;:}
	| SEMI {:RESULT = Type.voidtype();:}
	;
	
constructor_declaration ::= modifiers_opt IDENTIFIER LPAREN parameter_list_opt RPAREN statement_block
	;
	
interface_declaration ::=  modifiers_opt INTERFACE IDENTIFIER inter_opt LBRACE field_declarations_opt RBRACE
	;
	
inter_opt ::= EXTENDS interface_type_list
	|
	;
	
